{"project": "apache.cxf", "commit": "0ad6bfbfc5345d3241fbb8b717beb57ff1bf318e", "file_path": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/policyhandlers/AbstractBindingBuilder.java", "func_code": "  protected void assertSupportingTokens(Collection<PolicyAssertion> suppTokens) {\n    if (suppTokens == null) {\n      return;\n    }\n    for (PolicyAssertion pa : suppTokens) {\n      if (pa instanceof SupportingToken) {\n        for (Token token : ((SupportingToken) pa).getTokens()) {\n          this.policyAsserted(token);\n        }\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 187, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.999999940395357}, {"buggy": true, "line_num": 7, "prob": 2.55550820937777e-12}, {"buggy": true, "line_num": 1, "prob": 2.1412214603697668e-13}]}
{"project": "apache.groovy", "commit": "fae29119a1102393ae5d1645c3fc1e06547b0ad8", "file_path": "src/main/org/codehaus/groovy/transform/stc/StaticTypeCheckingSupport.java", "func_code": "  private static boolean equalIncludingGenerics(ClassNode orig, ClassNode copy) {\n    if (orig == copy) return true;\n    if (orig.isGenericsPlaceHolder() != copy.isGenericsPlaceHolder()) return false;\n    if (!orig.equals(copy)) return false;\n    GenericsType[] gt1 = orig.getGenericsTypes();\n    GenericsType[] gt2 = orig.getGenericsTypes();\n    if ((gt1 == null || gt2 == null) && gt1 != gt2) return false;\n    if (gt1 == gt2) return true;\n    if (gt1.length != gt2.length) return false;\n    for (int i = 0; i < gt1.length; i++) {\n      if (!equalIncludingGenerics(gt1[i], gt2[i])) return false;\n    }\n    return true;\n  }\n", "line_num": 5, "charoffset": 29, "length": 23, "error": "orig.getGenericsTypes()", "repair": "copy.getGenericsTypes()", "task_id": 193, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.9999485040806656}, {"buggy": false, "line_num": -1, "prob": 3.431502497722953e-05}, {"buggy": true, "line_num": 10, "prob": 1.785370269422881e-08}, {"buggy": true, "line_num": 2, "prob": 2.3995025184058716e-11}, {"buggy": true, "line_num": 5, "prob": 2.014323033938676e-11}, {"buggy": true, "line_num": 4, "prob": 1.1315525122962234e-11}, {"buggy": true, "line_num": 9, "prob": 2.205310632623807e-12}, {"buggy": true, "line_num": 3, "prob": 6.127326413301104e-13}, {"buggy": true, "line_num": 7, "prob": 8.489160613951284e-15}, {"buggy": true, "line_num": 1, "prob": 6.465854546831872e-15}]}
{"project": "libgdx.libgdx", "commit": "b041bcdeb2b96589efd6e6058fb0ba9dc630e949", "file_path": "gdx/src/com/badlogic/gdx/graphics/g3d/model/Node.java", "func_code": "  public <T extends Node> int insertChild(int index, final T child) {\r\n    for (Node p = this; p != null; p = p.getParent()) {\r\n      if (p == child) throw new GdxRuntimeException(\"Cannot add a parent as a child\");\r\n    }\r\n    Node p = child.getParent();\r\n    if (p != null && !p.removeChild(child))\r\n      throw new GdxRuntimeException(\"Could not remove child from its current parent\");\r\n    if (index < 0 || index >= children.size) {\r\n      index = children.size;\r\n      children.add(child);\r\n    } else children.insert(index, child);\r\n    child.parent = this;\r\n    return index;\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 385, "predictions": [{"buggy": true, "line_num": 7, "prob": 0.9996260378732074}, {"buggy": false, "line_num": -1, "prob": 0.00031024540813861075}, {"buggy": true, "line_num": 5, "prob": 7.744976953671466e-08}, {"buggy": true, "line_num": 9, "prob": 4.623204135232954e-11}, {"buggy": true, "line_num": 8, "prob": 1.462735446684474e-11}, {"buggy": true, "line_num": 2, "prob": 4.866762800343982e-13}, {"buggy": true, "line_num": 10, "prob": 6.533907324050492e-14}]}
{"project": "liferay.liferay-portal", "commit": "6a79f335767bbc406939ba90cfa983680ea629d8", "file_path": "portal-impl/src/com/liferay/portal/bean/BeanLocatorImpl.java", "func_code": "  protected Class<?>[] getInterfaces(Object object) {\n    List<Class<?>> interfaceClasses = new ArrayList<Class<?>>();\n\n    Class<?> clazz = object.getClass();\n\n    getInterfaces(interfaceClasses, clazz);\n\n    Class<?> superClazz = clazz.getSuperclass();\n\n    while (superClazz != null) {\n      getInterfaces(interfaceClasses, superClazz);\n\n      superClazz = clazz.getSuperclass();\n    }\n\n    return interfaceClasses.toArray(new Class<?>[interfaceClasses.size()]);\n  }\n", "line_num": 12, "charoffset": 16, "length": 21, "error": "clazz.getSuperclass()", "repair": "superClazz.getSuperclass()", "task_id": 416, "predictions": [{"buggy": true, "line_num": 12, "prob": 0.9999998807907247}, {"buggy": false, "line_num": -1, "prob": 1.5122538813988716e-07}, {"buggy": true, "line_num": 7, "prob": 6.292697274248833e-15}, {"buggy": true, "line_num": 10, "prob": 9.131673823848143e-17}, {"buggy": true, "line_num": 5, "prob": 4.002411363470289e-17}]}
{"project": "JetBrains.intellij-community", "commit": "e0a14ee65825bca406e56b918dba7dda39d48fa8", "file_path": "platform/lang-impl/src/com/intellij/codeInsight/editorActions/wordSelection/NaturalLanguageTextSelectioner.java", "func_code": "  private static TextRange findCustomRange(\n      String text, int start, int end, char startChar, char endChar) {\n    int prev = text.lastIndexOf(startChar, start);\n    int next = text.indexOf(endChar, end);\n    if (prev < 0 || next < 0) {\n      return null;\n    }\n    if (StringUtil.contains(text, prev + 1, start, endChar)\n        || StringUtil.contains(text, end, next, startChar)) return null;\n    if (prev + 1 < start || next > end) {\n      return new TextRange(prev + 1, next);\n    }\n\n    return new TextRange(prev, next + 1);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 36, "predictions": [{"buggy": true, "line_num": 9, "prob": 0.9998189806943326}, {"buggy": true, "line_num": 3, "prob": 6.917982065193333e-11}, {"buggy": false, "line_num": -1, "prob": 1.1767967700533299e-11}, {"buggy": true, "line_num": 8, "prob": 1.2704138971847568e-13}]}
{"project": "JetBrains.intellij-community", "commit": "4dea024fa82cc3b00fafd1f22ed3c05331a03f77", "file_path": "platform/core-impl/src/com/intellij/psi/impl/source/codeStyle/CodeEditUtil.java", "func_code": "  public static void removeChildren(ASTNode parent, @NotNull ASTNode first, @NotNull ASTNode last) {\n    final boolean tailingElement =\n        last.getStartOffset() + last.getTextLength()\n            == parent.getStartOffset() + parent.getTextLength();\n    final boolean forceReformat = needToForceReformat(parent, first, last);\n    saveWhitespacesInfo(first);\n\n    TreeElement child = (TreeElement) first;\n    while (child != null) {\n      // checkForOuters(child);\n      if (child == last) break;\n      child = child.getTreeNext();\n    }\n    assert child == last\n        : last + \" is not a successor of \" + first + \" in the .getTreeNext() chain\";\n\n    final ASTNode prevLeaf = TreeUtil.prevLeaf(first);\n    final ASTNode nextLeaf = TreeUtil.nextLeaf(first);\n    parent.removeRange(first, last.getTreeNext());\n    ASTNode nextLeafToAdjust = nextLeaf;\n    if (nextLeafToAdjust != null && prevLeaf != null && nextLeafToAdjust.getTreeParent() == null) {\n      // next element has invalidated\n      nextLeafToAdjust = prevLeaf.getTreeNext();\n    }\n    makePlaceHolderBetweenTokens(prevLeaf, nextLeafToAdjust, forceReformat, tailingElement);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 35, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.9948470273651441}, {"buggy": false, "line_num": -1, "prob": 0.001368752062092334}, {"buggy": true, "line_num": 18, "prob": 5.874531928286338e-05}, {"buggy": true, "line_num": 24, "prob": 4.332752082371099e-09}, {"buggy": true, "line_num": 16, "prob": 1.2467072846214569e-09}, {"buggy": true, "line_num": 17, "prob": 1.11943132896114e-09}, {"buggy": true, "line_num": 20, "prob": 3.6072795328707945e-10}, {"buggy": true, "line_num": 22, "prob": 4.4455153467259194e-11}]}
{"project": "elastic.elasticsearch", "commit": "8c7e0f5ca1bec303b0ffdad76974e56828e5877d", "file_path": "src/main/java/org/elasticsearch/index/fielddata/ordinals/SinglePackedOrdinals.java", "func_code": "  public IntArrayRef getOrds(int docId) {\n    int ordinal = (int) reader.get(docId);\n    if (ordinal == 0) return IntArrayRef.EMPTY;\n    intsScratch.values[0] = ordinal;\n    return intsScratch;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 293, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9657853628463576}, {"buggy": true, "line_num": 1, "prob": 9.815395047663852e-05}, {"buggy": true, "line_num": 3, "prob": 4.234245409993977e-07}, {"buggy": true, "line_num": 2, "prob": 3.348207533946636e-12}]}
{"project": "eclipse.che", "commit": "318feca1623d91ba6ce31b8c026c2dc5cffb68ca", "file_path": "plugins/plugin-debugger/che-plugin-debugger-ide/src/main/java/org/eclipse/che/plugin/debugger/ide/debug/VariableNodeDataAdapter.java", "func_code": "  public MutableVariable getNodeByPath(\n      @NotNull MutableVariable root, @NotNull List<String> relativeNodePath) {\n    MutableVariable localRoot = root;\n    for (int i = 0; i < relativeNodePath.size(); i++) {\n      String path = relativeNodePath.get(i);\n      if (localRoot != null) {\n        List<MutableVariable> variables = new ArrayList<>(localRoot.getVariables());\n        localRoot = null;\n        for (int j = 0; j < variables.size(); j++) {\n          MutableVariable variable = variables.get(j);\n          if (variable.getName().equals(path)) {\n            localRoot = variable;\n            break;\n          }\n        }\n\n        if (i == (relativeNodePath.size() - 1)) {\n          return localRoot;\n        }\n      }\n    }\n    return null;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 285, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8747778918750453}, {"buggy": true, "line_num": 6, "prob": 7.224249197972737e-12}, {"buggy": true, "line_num": 17, "prob": 5.644986578624755e-12}, {"buggy": true, "line_num": 16, "prob": 1.4545690908991865e-12}, {"buggy": true, "line_num": 3, "prob": 6.507171254588916e-13}, {"buggy": true, "line_num": 5, "prob": 6.064401982271698e-13}, {"buggy": true, "line_num": 11, "prob": 3.884631272118903e-13}, {"buggy": true, "line_num": 4, "prob": 3.2479045937868756e-13}, {"buggy": true, "line_num": 8, "prob": 2.907180048142617e-13}, {"buggy": true, "line_num": 9, "prob": 1.9506644076935143e-13}]}
{"project": "looly.hutool", "commit": "c53d025bf90758c2cfd30c18d506fbe27c84c6c6", "file_path": "hutool-core/src/main/java/com/xiaoleilu/hutool/io/FileUtil.java", "func_code": "  private static void internalCopyDir(File src, File dest, boolean isOverride)\r\n      throws IORuntimeException {\r\n    if (false == dest.exists()) {\r\n      dest.mkdirs();\r\n    } else if (dest.isFile()) {\r\n      throw new IORuntimeException(\r\n          StrUtil.format(\r\n              \"Src [{}] is a directory but dest [{}] is a file!\", src.getPath(), dest.getPath()));\r\n    }\r\n\r\n    final String files[] = src.list();\r\n    for (String file : files) {\r\n      File srcFile = new File(src, file);\r\n      File destFile = new File(dest, file);\r\n      // \u9012\u5f52\u590d\u5236\r\n      if (srcFile.isDirectory()) {\r\n        internalCopyDir(srcFile, destFile, isOverride);\r\n      } else {\r\n        internalCopyFile(srcFile, destFile, isOverride);\r\n      }\r\n    }\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 427, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.999956607817835}, {"buggy": true, "line_num": 4, "prob": 8.966094299370144e-09}, {"buggy": true, "line_num": 7, "prob": 3.0929366624310858e-09}, {"buggy": true, "line_num": 13, "prob": 7.790572117118198e-10}, {"buggy": true, "line_num": 15, "prob": 6.061112471330201e-11}, {"buggy": true, "line_num": 12, "prob": 4.396380902389945e-11}, {"buggy": true, "line_num": 10, "prob": 9.894531858805405e-12}, {"buggy": true, "line_num": 3, "prob": 3.8730031948119195e-12}, {"buggy": true, "line_num": 18, "prob": 1.2930075973773734e-12}]}
{"project": "clojure.clojure", "commit": "dda99609dbe5b3ef9a831b570c99ee79530f4d0a", "file_path": "src/jvm/clojure/lang/Module.java", "func_code": "  public static TRef intern(String moduleName, String name) throws Exception {\n    Module module = findModule(name);\n    if (module == null) throw new Exception(String.format(\"Module %s not found\", moduleName));\n    return module.intern(name);\n  }\n", "line_num": 1, "charoffset": 17, "length": 16, "error": "findModule(name)", "repair": "findModule(moduleName)", "task_id": 259, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.8931802748486208}, {"buggy": false, "line_num": -1, "prob": 0.10681973783259868}, {"buggy": true, "line_num": 1, "prob": 3.572438503014061e-08}, {"buggy": true, "line_num": 2, "prob": 9.81562467368225e-19}]}
{"project": "JetBrains.intellij-community", "commit": "245a5ae8286dd9d4eaba531a5b61f7f59967f6c4", "file_path": "J2EE/source/com/intellij/j2ee/module/LibraryLinkImpl.java", "func_code": "  private static @Nullable Library findModuleLibrary(\n      Module module,\n      final @NotNull ModulesProvider provider,\n      @NotNull String url,\n      Set<Module> visited) {\n    if (!visited.add(module)) {\n      return null;\n    }\n\n    ModuleRootModel rootModel = provider.getRootModel(module);\n    OrderEntry[] orderEntries = rootModel.getOrderEntries();\n    for (OrderEntry orderEntry : orderEntries) {\n      if (orderEntry instanceof LibraryOrderEntry) {\n        LibraryOrderEntry libraryOrderEntry = ((LibraryOrderEntry) orderEntry);\n        Library library = libraryOrderEntry.getLibrary();\n        if (library == null) continue;\n        String[] urls = library.getUrls(OrderRootType.CLASSES);\n        if (urls.length != 1) continue;\n        if (Comparing.strEqual(urls[0], url)) return library;\n      } else if (orderEntry instanceof ModuleOrderEntry) {\n        final Module dependency = ((ModuleOrderEntry) orderEntry).getModule();\n        if (dependency == null) {\n          continue;\n        }\n        final Library library = findModuleLibrary(dependency, provider, url, visited);\n        if (library != null) {\n          return library;\n        }\n      }\n    }\n    return null;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 83, "predictions": [{"buggy": true, "line_num": 18, "prob": 0.9929543923884201}, {"buggy": false, "line_num": -1, "prob": 0.001003490229905756}, {"buggy": true, "line_num": 24, "prob": 6.168292671681041e-05}]}
{"project": "apache.lucene-solr", "commit": "75e69c5198c02e6635eed274b03ea759ef1c4818", "file_path": "solr/core/src/java/org/apache/solr/search/TextLogisticRegressionQParserPlugin.java", "func_code": "  public void collect(int doc) throws IOException {\n    int valuesDocID = leafOutcomeValue.docID();\n    if (valuesDocID < doc) {\n      valuesDocID = leafOutcomeValue.advance(valuesDocID);\n    }\n    int outcome;\n    if (valuesDocID == doc) {\n      outcome = (int) leafOutcomeValue.longValue();\n    } else {\n      outcome = 0;\n    }\n\n    outcome = trainingParams.positiveLabel == outcome ? 1 : 0;\n    if (outcome == 1) {\n      positiveDocsSet.set(context.docBase + doc);\n    }\n    docsSet.set(context.docBase + doc);\n  }\n", "line_num": 3, "charoffset": 22, "length": 37, "error": "leafOutcomeValue.advance(valuesDocID)", "repair": "leafOutcomeValue.advance(doc)", "task_id": 211, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6871720041894047}, {"buggy": true, "line_num": 6, "prob": 0.06670346942830416}, {"buggy": true, "line_num": 14, "prob": 0.00014336814501625134}, {"buggy": true, "line_num": 3, "prob": 2.599653951407807e-06}, {"buggy": true, "line_num": 16, "prob": 1.0998349956076965e-10}, {"buggy": true, "line_num": 7, "prob": 1.60685220438157e-12}]}
{"project": "oracle.graal", "commit": "7b51b01eea8a6747b99e8354352ab755e40e449a", "file_path": "compiler/src/org.graalvm.compiler.lir.aarch64/src/org/graalvm/compiler/lir/aarch64/AArch64AtomicMove.java", "func_code": "  public void emitCode(CompilationResultBuilder crb, AArch64MacroAssembler masm) {\n    AArch64Kind kind = (AArch64Kind) expectedValue.getPlatformKind();\n    assert kind.isInteger();\n    final int size = kind.getSizeInBytes() * Byte.SIZE;\n\n    Register address = asRegister(addressValue);\n    Register result = asRegister(resultValue);\n    Register newVal = asRegister(newValue);\n    if (AArch64LIRFlagsVersioned.useLSE(masm.target.arch)) {\n      Register expected = asRegister(expectedValue);\n      masm.mov(size, result, expected);\n      masm.cas(size, expected, newVal, address, true /* acquire */, true /* release */);\n      AArch64Compare.gpCompare(masm, resultValue, expectedValue);\n    } else {\n      // We could avoid using a scratch register here, by reusing resultValue for the\n      // stlxr success flag and issue a mov resultValue, expectedValue in case of success\n      // before returning.\n      Register scratch = asRegister(scratchValue);\n      Label retry = new Label();\n      Label fail = new Label();\n      masm.bind(retry);\n      masm.ldaxr(size, result, address);\n      AArch64Compare.gpCompare(masm, resultValue, expectedValue);\n      masm.branchConditionally(AArch64Assembler.ConditionFlag.NE, fail);\n      masm.stlxr(size, scratch, newVal, address);\n      // if scratch == 0 then write successful, else retry.\n      masm.cbnz(32, scratch, retry);\n      masm.bind(fail);\n    }\n  }\n", "line_num": 11, "charoffset": 16, "length": 81, "error": "masm.cas(size,expected,newVal,address,true,true)", "repair": "masm.cas(size,result,newVal,address,true,true)", "task_id": 457, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9999887943404534}, {"buggy": true, "line_num": 12, "prob": 8.795090211505555e-07}, {"buggy": true, "line_num": 24, "prob": 2.922101564579522e-07}, {"buggy": true, "line_num": 17, "prob": 1.2618981535940257e-10}, {"buggy": true, "line_num": 21, "prob": 5.260885855984095e-11}, {"buggy": true, "line_num": 7, "prob": 1.5623006147098692e-11}, {"buggy": false, "line_num": -1, "prob": 1.1571940197055386e-11}, {"buggy": true, "line_num": 11, "prob": 2.927988419712533e-12}, {"buggy": true, "line_num": 26, "prob": 1.8946676191374635e-12}]}
{"project": "wildfly.wildfly", "commit": "280e0cb9e4cc0e647ba171e4a998722eeffb85eb", "file_path": "ejb3/src/main/java/org/jboss/as/ejb3/component/singleton/SingletonComponentInstanceAssociationInterceptor.java", "func_code": "  public Object processInvocation(InterceptorContext interceptorContext) throws Exception {\n    SingletonComponent singletonComponent =\n        getComponent(interceptorContext, SingletonComponent.class);\n    // get the component instance\n    ComponentInstance singletonComponentInstance = singletonComponent.getComponentInstance();\n    if (singletonComponent == null) {\n      throw MESSAGES.componentInstanceNotAvailable(interceptorContext);\n    }\n    interceptorContext.putPrivateData(ComponentInstance.class, singletonComponentInstance);\n    return interceptorContext.proceed();\n  }\n", "line_num": 5, "charoffset": 12, "length": 26, "error": "singletonComponent == null", "repair": "singletonComponentInstance == null", "task_id": 533, "predictions": [{"buggy": true, "line_num": 5, "prob": 1.0}, {"buggy": true, "line_num": 4, "prob": 2.8887064757517355e-10}, {"buggy": false, "line_num": -1, "prob": 2.704856954371978e-14}, {"buggy": true, "line_num": 6, "prob": 8.013009287157092e-22}, {"buggy": true, "line_num": 9, "prob": 6.913784673442329e-23}, {"buggy": true, "line_num": 2, "prob": 2.2153212701469643e-25}, {"buggy": true, "line_num": 8, "prob": 4.581487688336325e-27}]}
{"project": "JetBrains.intellij-community", "commit": "204117507562a0c7c91c076a50de4e60504a3b81", "file_path": "java/java-impl/src/com/intellij/codeInsight/ExternalAnnotationsManagerImpl.java", "func_code": "  private XmlTag addAnnotation(\n      @NotNull XmlTag rootTag,\n      @NotNull String ownerName,\n      @NotNull ExternalAnnotation annotation,\n      @Nullable XmlTag startTag) {\n    if (startTag == null) {\n      startTag = PsiTreeUtil.findChildOfType(rootTag, XmlTag.class);\n    }\n\n    XmlTag prevItem = null;\n    XmlTag curItem = startTag;\n\n    while (curItem != null) {\n      XmlTag addedItem = addAnnotation(rootTag, ownerName, annotation, curItem, prevItem);\n      if (addedItem != null) {\n        return addedItem;\n      }\n\n      prevItem = curItem;\n      curItem = PsiTreeUtil.getNextSiblingOfType(startTag, XmlTag.class);\n    }\n\n    return addItemTag(rootTag, prevItem, ownerName, annotation);\n  }\n", "line_num": 19, "charoffset": 16, "length": 56, "error": "PsiTreeUtil.getNextSiblingOfType(startTag,XmlTag.class)", "repair": "PsiTreeUtil.getNextSiblingOfType(curItem,XmlTag.class)", "task_id": 30, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9626663488787729}, {"buggy": true, "line_num": 22, "prob": 4.5007244903416496e-07}, {"buggy": true, "line_num": 13, "prob": 1.817284200309186e-08}, {"buggy": true, "line_num": 6, "prob": 5.986423735685766e-10}, {"buggy": true, "line_num": 5, "prob": 1.2169182185574018e-11}, {"buggy": true, "line_num": 19, "prob": 1.07165474735367e-12}]}
{"project": "BroadleafCommerce.BroadleafCommerce", "commit": "d896e80b75baf16a7461c6a1fec14830a54249be", "file_path": "admin/broadleaf-contentmanagement-module/src/main/java/org/broadleafcommerce/cms/page/service/PageServiceImpl.java", "func_code": "  protected PageDTO evaluatePageRules(\n      List<PageDTO> pageDTOList, Locale locale, Map<String, Object> ruleDTOs) {\n    if (pageDTOList == null) {\n      return NULL_PAGE;\n    }\n\n    // First check to see if we have a page that matches on the full locale.\n    for (PageDTO page : pageDTOList) {\n      if (locale != null && locale.getLocaleCode() != null) {\n        if (locale.getLocaleCode().equals(page.getLocaleCode())) {\n          if (passesPageRules(page, ruleDTOs)) {\n            return page;\n          }\n        }\n      }\n    }\n\n    // Otherwise, we look for a match using just the language.\n    for (PageDTO page : pageDTOList) {\n      if (passesPageRules(page, ruleDTOs)) {\n        return page;\n      }\n    }\n\n    return NULL_PAGE;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 12, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.999886155897584}, {"buggy": true, "line_num": 10, "prob": 1.998399042035575e-06}, {"buggy": true, "line_num": 8, "prob": 1.7609658972848936e-06}, {"buggy": true, "line_num": 11, "prob": 9.420859041926364e-10}, {"buggy": true, "line_num": 19, "prob": 3.575147820963943e-10}, {"buggy": true, "line_num": 20, "prob": 6.005493505613161e-12}, {"buggy": true, "line_num": 9, "prob": 5.2542045526542014e-12}, {"buggy": true, "line_num": 18, "prob": 6.632527507529918e-13}]}
{"project": "quartz-scheduler.quartz", "commit": "696220949749ddee9dbb19374be5ab4850d2ee33", "file_path": "quartz-core/src/main/java/org/quartz/impl/StdSchedulerFactory.java", "func_code": "  private void populateProviderWithExtraProps(PoolingConnectionProvider cp, Properties props)\n      throws Exception {\n    Properties copyProps = new Properties();\n    copyProps.putAll(props);\n\n    // Remove all the default properties first (they don't always match to setter name, and they are\n    // already\n    // been set!)\n    copyProps.remove(PoolingConnectionProvider.DB_DRIVER);\n    copyProps.remove(PoolingConnectionProvider.DB_URL);\n    copyProps.remove(PoolingConnectionProvider.DB_USER);\n    copyProps.remove(PoolingConnectionProvider.DB_PASSWORD);\n    copyProps.remove(PoolingConnectionProvider.DB_MAX_CONNECTIONS);\n    copyProps.remove(PoolingConnectionProvider.DB_VALIDATION_QUERY);\n    copyProps.remove(C3p0PoolingConnectionProvider.DB_VALIDATE_ON_CHECKOUT);\n    props.remove(PoolingConnectionProvider.POOLING_PROVIDER);\n    setBeanProps(cp.getDataSource(), copyProps);\n  }\n", "line_num": 15, "charoffset": 8, "length": 56, "error": "props.remove(PoolingConnectionProvider.POOLING_PROVIDER)", "repair": "copyProps.remove(PoolingConnectionProvider.POOLING_PROVIDER)", "task_id": 491, "predictions": [{"buggy": true, "line_num": 15, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 3.622703271517862e-14}, {"buggy": true, "line_num": 16, "prob": 2.3897374771142322e-26}, {"buggy": true, "line_num": 3, "prob": 1.92187150596765e-26}, {"buggy": true, "line_num": 1, "prob": 5.661008957121814e-27}]}
{"project": "JabRef.jabref", "commit": "4e55d239f019f2497d9146501aa0ba087ff5df3e", "file_path": "src/main/java/net/sf/jabref/bst/TextPrefixFunction.java", "func_code": "  public void execute(BstEntry context) {\n    Stack<Object> stack = vm.getStack();\n\n    if (stack.size() < 2) {\n      throw new VMException(\"Not enough operands on stack for operation text.prefix$\");\n    }\n    Object o1 = stack.pop();\n    Object o2 = stack.pop();\n\n    if (!(o1 instanceof Integer)) {\n      vm.warn(\"An integer is needed as first parameter to text.prefix$\");\n      stack.push(\"\");\n      return;\n    }\n    if (!(o2 instanceof String)) {\n      vm.warn(\"A string is needed as second parameter to text.prefix$\");\n      stack.push(\"\");\n      return;\n    }\n\n    stack.push(BibtexTextPrefix.textPrefix((Integer) o1, (String) o2, vm));\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 20, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8756216764106908}, {"buggy": true, "line_num": 11, "prob": 3.0126919085564126e-07}, {"buggy": true, "line_num": 20, "prob": 9.37862892308229e-08}, {"buggy": true, "line_num": 6, "prob": 3.0019554382905966e-08}, {"buggy": true, "line_num": 16, "prob": 2.1815522625695805e-08}, {"buggy": true, "line_num": 9, "prob": 8.825606418524145e-09}, {"buggy": true, "line_num": 1, "prob": 8.065899292546491e-10}, {"buggy": true, "line_num": 14, "prob": 2.854398631153266e-10}, {"buggy": true, "line_num": 7, "prob": 1.0501647058007839e-10}]}
{"project": "sk89q.WorldEdit", "commit": "620a4a21a12fda94e43ad4131c7122cdeda2ab35", "file_path": "src/main/java/com/sk89q/worldedit/command/RegionCommands.java", "func_code": "  public void stack(\n      Player player,\n      EditSession editSession,\n      LocalSession session,\n      @Selection Region region,\n      @Optional(\"1\") @Range(min = 1) int count,\n      @Optional(Direction.AIM) @Direction Vector direction,\n      @Switch('s') boolean moveSelection,\n      @Switch('a') boolean ignoreAirBlocks)\n      throws WorldEditException {\n    int affected = editSession.stackCuboidRegion(region, direction, count, !ignoreAirBlocks);\n\n    if (ignoreAirBlocks) {\n      try {\n        final Vector size = region.getMaximumPoint().subtract(region.getMinimumPoint());\n\n        final Vector shiftVector = direction.multiply(count * (Math.abs(direction.dot(size)) + 1));\n        region.shift(shiftVector);\n\n        session.getRegionSelector(player.getWorld()).learnChanges();\n        session.getRegionSelector(player.getWorld()).explainRegionAdjust(player, session);\n      } catch (RegionOperationException e) {\n        player.printError(e.getMessage());\n      }\n    }\n\n    player.print(affected + \" blocks changed. Undo with //undo\");\n  }\n", "line_num": 12, "charoffset": 8, "length": 592, "error": "if (ignoreAirBlocks) {   try {     final Vector size=region.getMaximumPoint().subtract(region.getMinimumPoint());     final Vector shiftVector=direction.multiply(count * (Math.abs(direction.dot(size)) + 1));     region.shift(shiftVector);     session.getRegionSelector(player.getWorld()).learnChanges();     session.getRegionSelector(player.getWorld()).explainRegionAdjust(player,session);   }  catch (  RegionOperationException e) {     player.printError(e.getMessage());   } } ", "repair": "if (moveSelection) {   try {     final Vector size=region.getMaximumPoint().subtract(region.getMinimumPoint());     final Vector shiftVector=direction.multiply(count * (Math.abs(direction.dot(size)) + 1));     region.shift(shiftVector);     session.getRegionSelector(player.getWorld()).learnChanges();     session.getRegionSelector(player.getWorld()).explainRegionAdjust(player,session);   }  catch (  RegionOperationException e) {     player.printError(e.getMessage());   } } ", "task_id": 503, "predictions": [{"buggy": true, "line_num": 16, "prob": 0.9678398700591297}, {"buggy": true, "line_num": 17, "prob": 0.00025071804815879307}, {"buggy": false, "line_num": -1, "prob": 1.7797536424011917e-06}, {"buggy": true, "line_num": 20, "prob": 2.9169923809554493e-07}, {"buggy": true, "line_num": 12, "prob": 3.6238596922871234e-09}, {"buggy": true, "line_num": 14, "prob": 3.6771304083812355e-13}]}
{"project": "apache.shiro", "commit": "ec3a2af79ae3f780337598c43259bfc4cbc46ca4", "file_path": "core/src/main/java/org/apache/shiro/config/IniSecurityManagerFactory.java", "func_code": "  private void addToRealms(Collection<Realm> realms, RealmFactory factory) {\n    LifecycleUtils.init(factory);\n    Collection<Realm> factoryRealms = factory.getRealms();\n    if (!CollectionUtils.isEmpty(realms)) {\n      realms.addAll(factoryRealms);\n    }\n  }\n", "line_num": 3, "charoffset": 13, "length": 31, "error": "CollectionUtils.isEmpty(realms)", "repair": "CollectionUtils.isEmpty(factoryRealms)", "task_id": 227, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.8861450566321494}, {"buggy": false, "line_num": -1, "prob": 0.10281729188489162}, {"buggy": true, "line_num": 1, "prob": 7.436233262228299e-12}, {"buggy": true, "line_num": 2, "prob": 4.200680469639187e-13}]}
{"project": "deeplearning4j.deeplearning4j", "commit": "06d5a2200e1d496f3757ace40321bfc371cab541", "file_path": "deeplearning4j-core/src/main/java/org/deeplearning4j/nn/layers/convolution/ConvolutionLayer.java", "func_code": "  public INDArray calculateDelta(INDArray epsilon) {\n    INDArray z = preOutput(true);\n    INDArray activationDerivative =\n        Nd4j.getExecutioner()\n            .execAndReturn(\n                Nd4j.getOpFactory()\n                    .createTransform(conf().getActivationFunction(), z)\n                    .derivative());\n    if (!Arrays.equals(z.shape(), activationDerivative.shape()))\n      throw new IllegalStateException(\"Shapes must be same\");\n    return epsilon.muli(activationDerivative);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 273, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6002211916934111}, {"buggy": true, "line_num": 8, "prob": 0.3677023110551253}, {"buggy": true, "line_num": 10, "prob": 5.012356564905695e-11}, {"buggy": true, "line_num": 1, "prob": 1.4479933894765123e-14}, {"buggy": true, "line_num": 2, "prob": 1.3974359618013838e-14}, {"buggy": true, "line_num": 3, "prob": 8.650652332940286e-15}, {"buggy": true, "line_num": 5, "prob": 6.8722932777447205e-15}]}
{"project": "apache.beam", "commit": "59f042c85a7265d95620afd5aea565416cd35ff9", "file_path": "runners/core-java/src/main/java/org/apache/beam/runners/core/ReduceFnRunner.java", "func_code": "  private void cancelEndOfWindowAndGarbageCollectionTimers(\n      ReduceFn<?, ?, ?, W>.Context directContext) {\n    WindowTracing.debug(\n        \"ReduceFnRunner.cancelEndOfWindowAndGarbageCollectionTimers: Deleting timers for \"\n            + \"key:{}; window:{} where inputWatermark:{}; outputWatermark:{}\",\n        key,\n        directContext.window(),\n        timerInternals.currentInputWatermarkTime(),\n        timerInternals.currentOutputWatermarkTime());\n    Instant eow = directContext.window().maxTimestamp();\n    directContext.timers().deleteTimer(eow, TimeDomain.EVENT_TIME);\n    Instant gc = garbageCollectionTime(directContext.window());\n    if (gc.isAfter(eow)) {\n      directContext.timers().deleteTimer(eow, TimeDomain.EVENT_TIME);\n    }\n  }\n", "line_num": 10, "charoffset": 6, "length": 62, "error": "directContext.timers().deleteTimer(eow,TimeDomain.EVENT_TIME)", "repair": "directContext.timers().deleteTimer(gc,TimeDomain.EVENT_TIME)", "task_id": 164, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.8800106785665175}, {"buggy": true, "line_num": 10, "prob": 0.118839178579762}, {"buggy": false, "line_num": -1, "prob": 0.001029370301415112}, {"buggy": true, "line_num": 12, "prob": 6.163328621108465e-11}, {"buggy": true, "line_num": 11, "prob": 3.6464763381981324e-13}, {"buggy": true, "line_num": 13, "prob": 1.852309436799154e-13}, {"buggy": true, "line_num": 6, "prob": 4.055912125009881e-14}, {"buggy": true, "line_num": 7, "prob": 9.185061150860043e-16}, {"buggy": true, "line_num": 9, "prob": 9.052530933285196e-16}, {"buggy": true, "line_num": 2, "prob": 8.305675140936314e-16}, {"buggy": true, "line_num": 8, "prob": 3.6537879043649784e-16}]}
{"project": "ben-manes.caffeine", "commit": "27dfec3f1226631aed065bfe086dcf1526582ab3", "file_path": "caffeine/src/main/java/com/github/benmanes/caffeine/cache/BoundedLocalCache.java", "func_code": "  void reorderProbation(Node<K, V> node) {\n    if (!accessOrderProbationDeque().contains(node)) {\n      // Ignore stale accesses for an entry that is no longer present\n      return;\n    } else if (node.getPolicyWeight() > mainProtectedMaximum()) {\n      return;\n    }\n\n    long mainProtectedWeightedSize = mainProtectedWeightedSize() + node.getPolicyWeight();\n    accessOrderProbationDeque().remove(node);\n    accessOrderProtectedDeque().add(node);\n    node.makeMainProtected();\n\n    long mainProtectedMaximum = mainProtectedMaximum();\n    while (mainProtectedWeightedSize > mainProtectedMaximum) {\n      Node<K, V> demoted = accessOrderProtectedDeque().pollFirst();\n      if (demoted == null) {\n        break;\n      }\n      demoted.makeMainProbation();\n      accessOrderProbationDeque().add(demoted);\n      mainProtectedWeightedSize -= demoted.getPolicyWeight();\n    }\n\n    lazySetMainProtectedWeightedSize(mainProtectedWeightedSize);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 249, "predictions": [{"buggy": true, "line_num": 24, "prob": 0.9999170372176026}, {"buggy": false, "line_num": -1, "prob": 8.30145333065093e-05}, {"buggy": true, "line_num": 10, "prob": 2.1485321199945677e-13}, {"buggy": true, "line_num": 9, "prob": 8.3793198805043e-15}, {"buggy": true, "line_num": 14, "prob": 3.603639374275925e-15}, {"buggy": true, "line_num": 21, "prob": 3.595976821784691e-15}, {"buggy": true, "line_num": 20, "prob": 1.1026546473933604e-16}, {"buggy": true, "line_num": 19, "prob": 8.850485419858166e-17}, {"buggy": true, "line_num": 1, "prob": 1.1085628761568322e-17}]}
{"project": "deeplearning4j.deeplearning4j", "commit": "5feff6c5a4dedae770f12e15fd881286df252b2b", "file_path": "deeplearning4j-nlp-parent/deeplearning4j-nlp/src/main/java/org/deeplearning4j/text/sentenceiterator/interoperability/SentenceIteratorConverter.java", "func_code": "  public LabelledDocument nextDocument() {\n    LabelledDocument document = new LabelledDocument();\n\n    document.setContent(backendIterator.nextSentence());\n    if (backendIterator instanceof LabelAwareSentenceIterator) {\n      List<String> labels = ((LabelAwareSentenceIterator) backendIterator).currentLabels();\n      if (labels != null) {\n        for (String label : labels) {\n          document.addLabel(label);\n          generator.storeLabel(label);\n        }\n      } else {\n        String label = ((LabelAwareSentenceIterator) backendIterator).currentLabel();\n        if (label != null) {\n          document.addLabel(label);\n          generator.storeLabel(label);\n        }\n      }\n    } else if (generator != null) document.addLabel(generator.nextLabel());\n\n    return document;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 269, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999995231629555}, {"buggy": true, "line_num": 15, "prob": 2.5051761609694046e-07}, {"buggy": true, "line_num": 9, "prob": 1.246032776349379e-08}, {"buggy": true, "line_num": 18, "prob": 3.538712795848813e-12}, {"buggy": true, "line_num": 3, "prob": 1.9507026065610537e-12}, {"buggy": true, "line_num": 13, "prob": 7.818709923420218e-13}]}
{"project": "JetBrains.intellij-community", "commit": "6527313e9479968d84a8c6f1f10a90ec43b3d4b3", "file_path": "platform/lang-impl/src/com/intellij/codeInspection/ex/GlobalInspectionContextImpl.java", "func_code": "  private static GlobalInspectionToolWrapper getProblemDescriptionProcessor(\n      @NotNull final GlobalInspectionToolWrapper toolWrapper,\n      final Map<String, DescriptorProviderInspection> wrappersMap) {\n\n    return new GlobalInspectionToolWrapper(toolWrapper.getTool()) {\n      @Override\n      public void addProblemElement(\n          RefEntity refEntity, CommonProblemDescriptor... commonProblemDescriptors) {\n        for (CommonProblemDescriptor problemDescriptor : commonProblemDescriptors) {\n          if (problemDescriptor instanceof ProblemDescriptor) {\n            String problemGroup = ((ProblemDescriptor) problemDescriptor).getProblemGroup();\n\n            if (problemGroup != null) {\n              DescriptorProviderInspection dummyWrapper = wrappersMap.get(problemGroup);\n\n              if (dummyWrapper != null) { // Else it's switched off\n                dummyWrapper.addProblemElement(refEntity, problemDescriptor);\n              }\n            } else {\n              toolWrapper.addProblemElement(refEntity, problemDescriptor);\n            }\n          }\n        }\n      }\n    };\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 56, "predictions": [{"buggy": true, "line_num": 10, "prob": 0.9999617339717787}, {"buggy": false, "line_num": -1, "prob": 3.401374398667059e-05}, {"buggy": true, "line_num": 9, "prob": 1.7387810424750623e-06}, {"buggy": true, "line_num": 12, "prob": 1.2686004366886693e-09}, {"buggy": true, "line_num": 16, "prob": 7.241929255010913e-10}, {"buggy": true, "line_num": 8, "prob": 2.887847079439059e-10}, {"buggy": true, "line_num": 19, "prob": 1.14297898435523e-12}]}
{"project": "libgdx.libgdx", "commit": "36861f2d8c45c809ce7d13944320bb144dbc6757", "file_path": "gdx/src/com/badlogic/gdx/scenes/scene2d/ui/Skin.java", "func_code": "  public TiledDrawable getTiledDrawable(String name) {\r\n    TiledDrawable tiled = optional(name, TiledDrawable.class);\r\n    if (tiled != null) return tiled;\r\n\r\n    Drawable drawable = optional(name, Drawable.class);\r\n    if (tiled != null) {\r\n      if (!(drawable instanceof TiledDrawable)) {\r\n        throw new GdxRuntimeException(\r\n            \"Drawable found but is not a TiledDrawable: \"\r\n                + name\r\n                + \", \"\r\n                + drawable.getClass().getName());\r\n      }\r\n      return tiled;\r\n    }\r\n\r\n    tiled = new TiledDrawable(getRegion(name));\r\n    add(name, tiled, TiledDrawable.class);\r\n    return tiled;\r\n  }\r\n", "line_num": 5, "charoffset": 6, "length": 13, "error": "tiled != null", "repair": "drawable != null", "task_id": 387, "predictions": [{"buggy": true, "line_num": 5, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 3.03358094640507e-10}, {"buggy": true, "line_num": 4, "prob": 6.353214299109888e-15}, {"buggy": true, "line_num": 16, "prob": 2.336724231900403e-17}, {"buggy": true, "line_num": 13, "prob": 3.745342805851415e-18}, {"buggy": true, "line_num": 9, "prob": 2.3800115802258256e-19}, {"buggy": true, "line_num": 17, "prob": 1.3884920878248998e-19}, {"buggy": true, "line_num": 1, "prob": 3.1698595549159585e-21}, {"buggy": true, "line_num": 11, "prob": 6.458140556038071e-22}, {"buggy": true, "line_num": 2, "prob": 1.0209300814395357e-22}]}
{"project": "oracle.graal", "commit": "1397b781498ebdf36465ae8d558944d640ca9368", "file_path": "graal/com.oracle.graal.api.meta/src/com/oracle/graal/api/meta/MetaUtil.java", "func_code": "  public static Class getMirrorOrFail(ResolvedJavaType type, ClassLoader loader)\n      throws NoClassDefFoundError {\n    ResolvedJavaType elementalType = getElementalType(type);\n    Class elementalClass;\n    if (elementalType.isPrimitive()) {\n      elementalClass = type.getKind().toJavaClass();\n    } else {\n      try {\n        elementalClass = Class.forName(toJavaName(elementalType), true, loader);\n      } catch (ClassNotFoundException e) {\n        throw (NoClassDefFoundError) new NoClassDefFoundError().initCause(e);\n      }\n    }\n    if (type.isArray()) {\n      ResolvedJavaType t = type;\n      while (t.getComponentType() != null) {\n        elementalClass = Array.newInstance(elementalClass, 0).getClass();\n        t = t.getComponentType();\n      }\n    }\n    assert elementalClass != null : toJavaName(type);\n    return elementalClass;\n  }\n", "line_num": 5, "charoffset": 29, "length": 14, "error": "type.getKind()", "repair": "elementalType.getKind()", "task_id": 472, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9999600650887918}, {"buggy": true, "line_num": 8, "prob": 4.570155682921938e-06}, {"buggy": false, "line_num": -1, "prob": 2.513290788136789e-07}, {"buggy": true, "line_num": 13, "prob": 9.21689704339094e-12}, {"buggy": true, "line_num": 20, "prob": 6.953590825803367e-12}, {"buggy": true, "line_num": 4, "prob": 1.7561127812477048e-15}, {"buggy": true, "line_num": 16, "prob": 2.458667519723768e-16}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "8a4eab141a3d1502e975375144e0f288be6ff6ec", "file_path": "core/java/com/android/internal/app/ResolverActivity.java", "func_code": "  private void addResolveListDedupe(\n      List<ResolvedComponentInfo> into, Intent intent, List<ResolveInfo> from) {\n    final int fromCount = from.size();\n    final int intoCount = into.size();\n    for (int i = 0; i < fromCount; i++) {\n      final ResolveInfo newInfo = from.get(i);\n      boolean found = false;\n      // Only loop to the end of into as it was before we started; no dupes in from.\n      for (int j = 0; j < intoCount; j++) {\n        final ResolvedComponentInfo rci = into.get(j);\n        if (isSameResolvedComponent(newInfo, rci)) {\n          found = true;\n          rci.add(intent, newInfo);\n          break;\n        }\n      }\n      if (!found) {\n        final ComponentName name =\n            new ComponentName(newInfo.activityInfo.packageName, newInfo.activityInfo.name);\n        final ResolvedComponentInfo rci = new ResolvedComponentInfo(name, intent, newInfo);\n        rci.setPinned(isComponentPinned(name));\n        into.add(rci);\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 142, "predictions": [{"buggy": true, "line_num": 21, "prob": 0.9845871677505844}, {"buggy": false, "line_num": -1, "prob": 0.013997506452801352}, {"buggy": true, "line_num": 19, "prob": 0.0007642918197116606}, {"buggy": true, "line_num": 11, "prob": 5.356662776619377e-07}, {"buggy": true, "line_num": 12, "prob": 6.895238800865119e-09}, {"buggy": true, "line_num": 3, "prob": 9.075223125527241e-10}, {"buggy": true, "line_num": 10, "prob": 2.8959373497842305e-11}, {"buggy": true, "line_num": 18, "prob": 7.672533422230542e-12}]}
{"project": "Tencent.tinker", "commit": "8c3886b4bc0dbf56bf566a32b777d7516095a676", "file_path": "tinker-build/tinker-patch-lib/src/main/java/com/tencent/tinker/build/aapt/AaptUtil.java", "func_code": "  private static void addToResourceCollector(\n      AaptResourceCollector resourceCollector,\n      ResourceDirectory resourceDirectory,\n      Node node,\n      RType rType,\n      String resourceValue) {\n    String resourceName = sanitizeName(rType, resourceCollector, extractNameAttribute(node));\n    resourceCollector.addRTypeResourceName(rType, resourceName, resourceValue, resourceDirectory);\n    if (rType.equals(RType.STYLEABLE)) {\n\n      int count = 0;\n      for (Node attrNode = node.getFirstChild();\n          attrNode != null;\n          attrNode = attrNode.getNextSibling()) {\n        if (attrNode.getNodeType() != Node.ELEMENT_NODE || !attrNode.getNodeName().equals(\"attr\")) {\n          continue;\n        }\n\n        String rawAttrName = extractNameAttribute(attrNode);\n        String attrName = sanitizeName(rType, resourceCollector, rawAttrName);\n        resourceCollector.addResource(\n            RType.STYLEABLE,\n            IdType.INT,\n            String.format(\"%s_%s\", resourceName, attrName),\n            Integer.toString(count++));\n\n        if (!rawAttrName.startsWith(\"android:\")) {\n          resourceCollector.addIntResourceIfNotPresent(RType.ATTR, attrName);\n          resourceCollector.addRTypeResourceName(\n              RType.ATTR, rawAttrName, nodeToString(attrNode, true), resourceDirectory);\n        }\n      }\n\n      resourceCollector.addIntArrayResourceIfNotPresent(rType, resourceName, count);\n    } else {\n      resourceCollector.addIntResourceIfNotPresent(rType, resourceName);\n    }\n  }\n", "line_num": 27, "charoffset": 20, "length": 66, "error": "resourceCollector.addIntResourceIfNotPresent(RType.ATTR,attrName)", "repair": "resourceCollector.addIntResourceIfNotPresent(RType.ATTR,rawAttrName)", "task_id": 124, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9193664556134464}, {"buggy": true, "line_num": 8, "prob": 0.07585938325800844}, {"buggy": true, "line_num": 6, "prob": 9.769918530112101e-06}, {"buggy": true, "line_num": 35, "prob": 7.282462448961137e-09}, {"buggy": true, "line_num": 29, "prob": 6.273135086281148e-09}]}
{"project": "google.closure-compiler", "commit": "daef17d4bb38e7a7961121288f1ef4ae3c56ec71", "file_path": "src/com/google/javascript/jscomp/AstValidator.java", "func_code": "  private void validateCatch(Node n) {\n    validateNodeType(Token.CATCH, n);\n    validateChildCount(n);\n    Node caught = n.getFirstChild();\n    if (caught.isName()) {\n      validateName(caught);\n    } else if (n.isArrayPattern()) {\n      validateArrayPattern(Token.CATCH, caught);\n    } else {\n      validateObjectPattern(Token.CATCH, caught);\n    }\n    validateBlock(n.getLastChild());\n  }\n", "line_num": 6, "charoffset": 15, "length": 18, "error": "n.isArrayPattern()", "repair": "caught.isArrayPattern()", "task_id": 329, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.9999998807907247}, {"buggy": false, "line_num": -1, "prob": 1.7404159414821258e-07}, {"buggy": true, "line_num": 5, "prob": 7.0689431220088666e-12}, {"buggy": true, "line_num": 11, "prob": 4.976516868720745e-12}, {"buggy": true, "line_num": 9, "prob": 6.557187824921837e-15}, {"buggy": true, "line_num": 7, "prob": 2.091250993466503e-15}, {"buggy": true, "line_num": 4, "prob": 2.1435860700372708e-18}, {"buggy": true, "line_num": 2, "prob": 6.466285376549607e-19}]}
{"project": "google.ExoPlayer", "commit": "26e1306639c7f98825972cdcc4e573050a1f4ea8", "file_path": "library/src/main/java/com/google/android/exoplayer2/trackselection/BaseTrackSelection.java", "func_code": "  public final boolean blacklist(int index, long blacklistDurationMs) {\n    long nowMs = SystemClock.elapsedRealtime();\n    boolean canBlacklist = isBlacklisted(index, nowMs);\n    for (int i = 0; i < length && !canBlacklist; i++) {\n      canBlacklist = i != index && !isBlacklisted(i, nowMs);\n    }\n    if (!canBlacklist) {\n      return false;\n    }\n    blacklistUntilTimes[index] = Math.max(blacklistUntilTimes[index], nowMs + blacklistDurationMs);\n    return true;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 326, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8248468522497663}, {"buggy": true, "line_num": 9, "prob": 0.13121562022493777}, {"buggy": true, "line_num": 4, "prob": 0.002021604813702653}, {"buggy": true, "line_num": 3, "prob": 1.1450078759268826e-07}, {"buggy": true, "line_num": 2, "prob": 2.5582249337793725e-08}, {"buggy": true, "line_num": 6, "prob": 8.617117298998208e-09}]}
{"project": "JetBrains.kotlin", "commit": "3c8d87279e79b54052f438b12a81ef9997ab05ec", "file_path": "compiler/frontend.java/src/org/jetbrains/jet/lang/resolve/java/JavaDescriptorResolver.java", "func_code": "  private DeclarationDescriptor resolveParentDescriptor(PsiClass psiClass) {\n    PsiClass containingClass = psiClass.getContainingClass();\n    if (containingClass != null) {\n      return resolveClass(containingClass);\n    }\n\n    PsiJavaFile containingFile = (PsiJavaFile) psiClass.getContainingFile();\n    String packageName = containingFile.getPackageName();\n    return resolveNamespace(packageName);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 93, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8103647878338913}, {"buggy": true, "line_num": 3, "prob": 1.9323038989333536e-10}, {"buggy": true, "line_num": 8, "prob": 1.3395455600168063e-10}, {"buggy": true, "line_num": 2, "prob": 9.349947806511037e-11}, {"buggy": true, "line_num": 6, "prob": 1.998944815007541e-11}, {"buggy": true, "line_num": 7, "prob": 1.5281314092300755e-11}]}
{"project": "JetBrains.intellij-community", "commit": "2c0b50c1ce4abd4993aba4b4bab1c57be1390024", "file_path": "java/debugger/impl/src/com/intellij/debugger/memory/toolwindow/MemoryViewToolWindowFactory.java", "func_code": "  private void registerMemoryView(@NotNull XDebugSession session) {\n    LOG.assertTrue(SwingUtilities.isEventDispatchThread());\n    final XDebugProcess debugProcess = session.getDebugProcess();\n    final Project project = session.getProject();\n    final DebugProcess javaProcess =\n        DebuggerManager.getInstance(session.getProject())\n            .getDebugProcess(debugProcess.getProcessHandler());\n    if (javaProcess instanceof DebugProcessImpl) {\n      final DebugProcessImpl processImpl = (DebugProcessImpl) javaProcess;\n      final ClassesFilteredView classesFilteredView =\n          new ClassesFilteredView(debugProcess.getSession());\n      myDispatcher.addListener(visible -> classesFilteredView.setActive(visible), project);\n\n      final MemoryViewDebugProcessData data = new MemoryViewDebugProcessData(classesFilteredView);\n      final ToolWindow toolWindow = getToolWindow(processImpl.getProject());\n\n      classesFilteredView.setActive(toolWindow != null && toolWindow.isVisible());\n      processImpl.putUserData(MemoryViewDebugProcessData.KEY, data);\n\n      if (toolWindow != null) {\n        updateCurrentMemoryView(project, toolWindow);\n      }\n    }\n  }\n", "line_num": 11, "charoffset": 6, "length": 84, "error": "myDispatcher.addListener(visible -> classesFilteredView.setActive(visible),project)", "repair": "myDispatcher.addListener(visible -> classesFilteredView.setActive(visible),classesFilteredView)", "task_id": 38, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9022007971981013}, {"buggy": false, "line_num": -1, "prob": 0.09763749003745414}, {"buggy": true, "line_num": 16, "prob": 1.1730388037027462e-07}, {"buggy": true, "line_num": 20, "prob": 5.614261213867424e-10}, {"buggy": true, "line_num": 17, "prob": 8.565171762785454e-13}]}
{"project": "facebook.presto", "commit": "0673ae2adcc189937b5d30a361202d2e80ad9e0e", "file_path": "presto-spi/src/main/java/com/facebook/presto/spi/block/SliceArrayBlock.java", "func_code": "  static Slice[] deepCopyAndCompact(Slice[] values, int positionOffset, int length) {\n    Slice[] newValues = Arrays.copyOfRange(values, positionOffset, positionOffset + length);\n    // Compact the slices. Use an IdentityHashMap because this could be very expensive otherwise.\n    Map<Slice, Slice> distinctValues = new IdentityHashMap<>();\n    for (int i = 0; i < newValues.length; i++) {\n      Slice slice = newValues[i];\n      if (slice == null) {\n        continue;\n      }\n      Slice distinct = distinctValues.get(slice);\n      if (distinct == null) {\n        distinct = Slices.copyOf(slice);\n        distinctValues.put(slice, distinct);\n      }\n      newValues[i] = distinct;\n    }\n    return newValues;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 313, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8784207010184828}, {"buggy": true, "line_num": 4, "prob": 1.3110408706896265e-06}, {"buggy": true, "line_num": 11, "prob": 3.2003421436612827e-11}, {"buggy": true, "line_num": 14, "prob": 1.930442596298116e-11}, {"buggy": true, "line_num": 5, "prob": 4.5372130152166644e-13}, {"buggy": true, "line_num": 6, "prob": 3.28124820386011e-13}, {"buggy": true, "line_num": 12, "prob": 2.3590348805746685e-13}]}
{"project": "libgdx.libgdx", "commit": "0256c6ceff897814a8d532fc43d6006c8b9bd7b6", "file_path": "gdx/src/com/badlogic/gdx/math/Vector3.java", "func_code": "  public float dst2(float x, float y, float z) {\r\n    final float a = x - this.x;\r\n    final float b = y - this.y;\r\n    final float c = z - this.z;\r\n\r\n    return a * a + b * b + c * c;\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 390, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9999498128934114}, {"buggy": false, "line_num": -1, "prob": 5.113854517105976e-09}, {"buggy": true, "line_num": 1, "prob": 3.6931124966702095e-10}]}
{"project": "OpenRefine.OpenRefine", "commit": "b4bcf7a1b64f8951f3e9764b1981eeb1e885cc00", "file_path": "main/src/com/google/refine/operations/recon/ReconMatchSpecificTopicOperation.java", "func_code": "  public static AbstractOperation reconstruct(Project project, JSONObject obj) throws Exception {\n    JSONObject engineConfig = obj.getJSONObject(\"engineConfig\");\n\n    JSONObject match = obj.getJSONObject(\"match\");\n\n    JSONArray types = match.getJSONArray(\"types\");\n    String[] typeIDs = new String[types.length()];\n    for (int i = 0; i < typeIDs.length; i++) {\n      typeIDs[i] = types.getString(i);\n    }\n\n    return new ReconMatchSpecificTopicOperation(\n        engineConfig,\n        obj.getString(\"columnName\"),\n        new ReconCandidate(match.getString(\"id\"), match.getString(\"name\"), typeIDs, 100),\n        obj.getString(\"identifierSpace\"),\n        obj.getString(\"schemaSpace\"));\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 108, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999960660934519}, {"buggy": true, "line_num": 8, "prob": 3.920485562119328e-06}, {"buggy": true, "line_num": 1, "prob": 1.2398499448061071e-08}, {"buggy": true, "line_num": 5, "prob": 8.299334507725941e-10}, {"buggy": true, "line_num": 3, "prob": 3.268723906074135e-13}, {"buggy": true, "line_num": 7, "prob": 7.803003434195422e-14}, {"buggy": true, "line_num": 16, "prob": 4.2633232111297383e-14}]}
{"project": "gradle.gradle", "commit": "41bf9d3787a8959d68c64aa9e816f68d6c768295", "file_path": "subprojects/ide/src/main/groovy/org/gradle/plugins/ide/eclipse/model/Project.java", "func_code": "  private void readLinkedResources() {\n    for (Node linkNode : getChildren(findFirstChildNamed(getXml(), \"linkedResources\"), \"link\")) {\n      Node nameNode = findFirstChildNamed(linkNode, \"name\");\n      Node typeNode = findFirstChildNamed(linkNode, \"type\");\n      Node locationNode = findFirstChildNamed(linkNode, \"location\");\n      Node locationUriNode = findFirstChildNamed(linkNode, \"locationURI\");\n      linkedResources.add(\n          new Link(\n              nameNode != null ? nameNode.text() : null,\n              typeNode != null ? typeNode.text() : null,\n              locationNode != null ? locationNode.text() : null,\n              locationUriNode != null ? locationUriNode.text() : null));\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 342, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8336341745055791}, {"buggy": true, "line_num": 6, "prob": 7.168119888019089e-06}, {"buggy": true, "line_num": 5, "prob": 2.998223219132842e-07}, {"buggy": true, "line_num": 4, "prob": 3.907050210421332e-09}, {"buggy": true, "line_num": 11, "prob": 4.671177027560842e-10}, {"buggy": true, "line_num": 1, "prob": 7.672551960330711e-11}, {"buggy": true, "line_num": 3, "prob": 5.7569307858694044e-11}, {"buggy": true, "line_num": 10, "prob": 4.946398027504638e-11}]}
{"project": "jMonkeyEngine.jmonkeyengine", "commit": "2aa6f9f5212451ebb6f9e5460736e95f90e7da36", "file_path": "jme3-networking/src/main/java/com/jme3/network/serializing/serializers/SavableSerializer.java", "func_code": "  public int read(byte[] b, int off, int len) {\n    int toRead = len > input.remaining() ? input.remaining() : len;\n    input.get(b, off, toRead);\n    return toRead;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 370, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7196750835213284}, {"buggy": true, "line_num": 2, "prob": 1.7323375185738846e-06}, {"buggy": true, "line_num": 3, "prob": 2.4215647163587133e-09}, {"buggy": true, "line_num": 1, "prob": 1.2355680335508826e-11}]}
{"project": "JetBrains.intellij-community", "commit": "faae0878485aad04dac961e41fd2f00f4721e551", "file_path": "source/com/intellij/xml/impl/schema/XmlAttributeDescriptorImpl.java", "func_code": "  private boolean hasSimpleSchemaType(String type) {\n    final String attributeValue = myTag.getAttributeValue(\"type\");\n\n    if (attributeValue != null) {\n      if (attributeValue.endsWith(type)) {\n        final String namespacePrefix = myTag.getNamespacePrefix();\n\n        if (namespacePrefix.length() > 0) {\n          return attributeValue.equals(namespacePrefix + \":\" + type);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 85, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5340659164237594}, {"buggy": true, "line_num": 8, "prob": 1.822285162857151e-05}, {"buggy": true, "line_num": 4, "prob": 3.0526056342285865e-11}, {"buggy": true, "line_num": 3, "prob": 3.0296763028331705e-11}]}
{"project": "gradle.gradle", "commit": "160fdddb80a4ab6ff6207481b854b25c8bbf4dfc", "file_path": "subprojects/core-impl/src/main/groovy/org/gradle/api/internal/artifacts/mvnsettings/DefaultLocalMavenRepositoryLocator.java", "func_code": "  private String resolvePlaceholders(String value) {\n    StringBuffer result = new StringBuffer();\n    Matcher matcher = PLACEHOLDER_PATTERN.matcher(value);\n\n    while (matcher.find()) {\n      String placeholder = matcher.group(1);\n      String replacement =\n          placeholder.startsWith(\"env.\")\n              ? environmentVariables.get(placeholder.substring(4))\n              : systemProperties.get(placeholder);\n      if (replacement == null) {\n        throw new CannotLocateLocalMavenRepositoryException(\n            String.format(\"Cannot resolve placeholder '%s' in value '%s'\", placeholder, value));\n      }\n      matcher.appendReplacement(result, Matcher.quoteReplacement(replacement));\n    }\n    matcher.appendTail(result);\n\n    return result.toString();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 344, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9969879496245534}, {"buggy": true, "line_num": 12, "prob": 0.0029225506368720264}, {"buggy": true, "line_num": 8, "prob": 2.1134711780621e-10}, {"buggy": true, "line_num": 1, "prob": 9.75941237133729e-12}, {"buggy": true, "line_num": 14, "prob": 1.0397359106742791e-12}, {"buggy": true, "line_num": 10, "prob": 4.2701614393563735e-13}]}
{"project": "apache.maven", "commit": "9f0c44d7eb5aecf119eb9b147f277aebd8aec396", "file_path": "maven-reporting/maven-reporting-impl/src/main/java/org/apache/maven/reporting/AbstractMavenMultiPageReport.java", "func_code": "  protected void closeReport() {\r\n    int counter = 1;\r\n\r\n    if (!sinks.isEmpty()) {\r\n      for (Iterator i = sinks.iterator(); i.hasNext(); ) {\r\n        MultiPageSink currentSink = (MultiPageSink) i.next();\r\n\r\n        currentSink.paragraph();\r\n        for (Iterator j = sinks.iterator(); i.hasNext(); ) {\r\n          if (counter > 1) {\r\n            currentSink.text(\"&nbsp;\");\r\n          }\r\n          MultiPageSink sink = (MultiPageSink) i.next();\r\n          sink.link(sink.getOutputName() + \".html\");\r\n          sink.text(String.valueOf(counter++));\r\n          sink.link_();\r\n        }\r\n        currentSink.paragraph_();\r\n        currentSink.closeSink();\r\n      }\r\n    }\r\n  }\r\n", "line_num": 12, "charoffset": 57, "length": 8, "error": "i.next()", "repair": "j.next()", "task_id": 223, "predictions": [{"buggy": true, "line_num": 8, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 3.660380061084567e-12}, {"buggy": true, "line_num": 13, "prob": 1.6138043344787685e-14}, {"buggy": true, "line_num": 12, "prob": 4.600440387018299e-18}, {"buggy": true, "line_num": 4, "prob": 1.6964002406981675e-20}, {"buggy": true, "line_num": 14, "prob": 5.355868618236482e-21}, {"buggy": true, "line_num": 10, "prob": 6.982138894461137e-23}, {"buggy": true, "line_num": 5, "prob": 1.1623676830312667e-23}, {"buggy": true, "line_num": 17, "prob": 7.953676971730999e-24}, {"buggy": true, "line_num": 7, "prob": 7.025712012191781e-24}]}
{"project": "JetBrains.intellij-community", "commit": "aa512759b317151b21c2279fc702f4e8ffcb5c9b", "file_path": "python/src/com/jetbrains/python/psi/resolve/QualifiedNameResolver.java", "func_code": "  public boolean visitRoot(final VirtualFile root, @Nullable Module module, @Nullable Sdk sdk) {\n    if (!root.isValid()) {\n      return true;\n    }\n    PsiFileSystemItem resolveResult = resolveInRoot(root, sdk);\n    if (resolveResult != null) {\n      results.add(resolveResult);\n    }\n\n    if (myAcceptRootAsTopLevelPackage\n        && myQualifiedName.matchesPrefix(PyQualifiedName.fromDottedString(root.getName()))) {\n      resolveResult = resolveInRoot(root.getParent(), sdk);\n      if (module != null) {\n        results.add(resolveResult);\n      }\n    }\n\n    return true;\n  }\n", "line_num": 12, "charoffset": 10, "length": 14, "error": "module != null", "repair": "resolveResult != null", "task_id": 58, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.9996470267053879}, {"buggy": false, "line_num": -1, "prob": 0.00034691189194278714}, {"buggy": true, "line_num": 11, "prob": 8.06117456851797e-07}, {"buggy": true, "line_num": 12, "prob": 2.532141654829378e-08}, {"buggy": true, "line_num": 10, "prob": 2.0884450687586465e-11}]}
{"project": "JetBrains.intellij-community", "commit": "8e065410f35376099d0b3933e981cefc55f52cf5", "file_path": "java/java-impl/src/com/intellij/refactoring/util/LambdaRefactoringUtil.java", "func_code": "  public static String createLambdaParameterListWithFormalTypes(\n      PsiType functionalInterfaceType,\n      PsiLambdaExpression lambdaExpression,\n      boolean checkApplicability) {\n    final PsiClassType.ClassResolveResult resolveResult =\n        PsiUtil.resolveGenericsClassInType(functionalInterfaceType);\n    final StringBuilder buf = new StringBuilder();\n    buf.append(\"(\");\n    final PsiMethod interfaceMethod =\n        LambdaUtil.getFunctionalInterfaceMethod(functionalInterfaceType);\n    LOG.assertTrue(interfaceMethod != null);\n    final PsiParameter[] parameters = interfaceMethod.getParameterList().getParameters();\n    final PsiParameter[] lambdaParameters = lambdaExpression.getParameterList().getParameters();\n    if (parameters.length != lambdaParameters.length) return null;\n    final PsiSubstitutor substitutor = LambdaUtil.getSubstitutor(interfaceMethod, resolveResult);\n    for (int i = 0; i < parameters.length; i++) {\n      PsiType psiType = substitutor.substitute(parameters[i].getType());\n      if (psiType == null) return null;\n      if (!PsiTypesUtil.isDenotableType(psiType, interfaceMethod)) {\n        return null;\n      }\n\n      buf.append(checkApplicability ? psiType.getPresentableText() : psiType.getCanonicalText())\n          .append(\" \")\n          .append(lambdaParameters[i].getName());\n      if (i < parameters.length - 1) {\n        buf.append(\", \");\n      }\n    }\n    buf.append(\")\");\n    return buf.toString();\n  }\n", "line_num": 18, "charoffset": 11, "length": 54, "error": "PsiTypesUtil.isDenotableType(psiType,interfaceMethod)", "repair": "PsiTypesUtil.isDenotableType(psiType,lambdaExpression)", "task_id": 31, "predictions": [{"buggy": true, "line_num": 18, "prob": 0.3316797571639867}, {"buggy": false, "line_num": -1, "prob": 0.04317797197119313}, {"buggy": true, "line_num": 25, "prob": 3.1471910135360717e-09}, {"buggy": true, "line_num": 13, "prob": 2.8789226700835013e-09}, {"buggy": true, "line_num": 15, "prob": 2.2886674305716894e-09}, {"buggy": true, "line_num": 14, "prob": 3.782812793004191e-10}, {"buggy": true, "line_num": 11, "prob": 1.0294049213779744e-10}]}
{"project": "oracle.graal", "commit": "e3e5e3b20700154e3132f1aefa91be66a1bc16d4", "file_path": "graal/com.oracle.graal.truffle.hotspot/src/com/oracle/graal/truffle/hotspot/HotSpotTruffleRuntime.java", "func_code": "  public boolean cancelInstalledTask(OptimizedCallTarget optimizedCallTarget) {\n    Future<?> codeTask = this.compilations.get(optimizedCallTarget);\n    if (codeTask != null && isCompiling(optimizedCallTarget)) {\n      this.compilations.remove(codeTask);\n      return codeTask.cancel(true);\n    }\n    return false;\n  }\n", "line_num": 3, "charoffset": 12, "length": 34, "error": "this.compilations.remove(codeTask)", "repair": "this.compilations.remove(optimizedCallTarget)", "task_id": 467, "predictions": [{"buggy": true, "line_num": 3, "prob": 1.0}, {"buggy": true, "line_num": 2, "prob": 2.3596684968449154e-10}, {"buggy": false, "line_num": -1, "prob": 1.6921819258976486e-10}, {"buggy": true, "line_num": 4, "prob": 3.632758458848467e-17}, {"buggy": true, "line_num": 1, "prob": 6.548993455597674e-21}]}
{"project": "ethereum.ethereumj", "commit": "241c2e9f0c849e8bcaa94c9d1432440f5ffa8886", "file_path": "ethereumj-core/src/main/java/org/ethereum/core/CallTransaction.java", "func_code": "  public static Function fromSignature(String funcName, String[] paramTypes, String[] resultTypes) {\n    Function ret = new Function();\n    ret.name = funcName;\n    ret.constant = false;\n    ret.type = FunctionType.function;\n    ret.inputs = new Param[paramTypes.length];\n    for (int i = 0; i < paramTypes.length; i++) {\n      ret.inputs[i] = new Param();\n      ret.inputs[i].name = \"param\" + i;\n      ret.inputs[i].type = Type.getType(paramTypes[i]);\n    }\n    ret.outputs = new Param[resultTypes.length];\n    for (int i = 0; i < resultTypes.length; i++) {\n      ret.outputs[i] = new Param();\n      ret.outputs[i].name = \"res\" + i;\n      ret.outputs[i].type = Type.getType(resultTypes[i]);\n    }\n    return ret;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 301, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.9258782302331575}, {"buggy": false, "line_num": -1, "prob": 0.013134895459684152}, {"buggy": true, "line_num": 8, "prob": 9.476316618349652e-09}, {"buggy": true, "line_num": 12, "prob": 2.9869309336782064e-14}]}
{"project": "apache.cordova-android", "commit": "6c594b6f5f22a3718b9f59c95854ef4cdd4ad614", "file_path": "framework/src/org/apache/cordova/FileUtils.java", "func_code": "  private void notifyDelete(String filePath) {\n    String newFilePath = stripFileProtocol(filePath);\n    int result =\n        this.cordova\n            .getActivity()\n            .getContentResolver()\n            .delete(\n                MediaStore.Images.Media.EXTERNAL_CONTENT_URI,\n                MediaStore.Images.Media.DATA + \" = ?\",\n                new String[] {filePath});\n  }\n", "line_num": 9, "charoffset": 25, "length": 12, "error": "{filePath}", "repair": "{newFilePath}", "task_id": 177, "predictions": [{"buggy": true, "line_num": 9, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 1.2060877652450258e-11}, {"buggy": true, "line_num": 1, "prob": 1.1554948608215695e-20}, {"buggy": true, "line_num": 3, "prob": 1.6548155811373791e-21}, {"buggy": true, "line_num": 2, "prob": 5.166743891334705e-22}]}
{"project": "openmrs.openmrs-core", "commit": "e2efffc72002968f835a0ea6a70f8e7762752b15", "file_path": "api/src/test/java/org/openmrs/validator/ConceptValidatorTest.java", "func_code": "  public void validate_shouldPassIfTheConceptWithADuplicateNameIsRetired() throws Exception {\r\n    Context.setLocale(new Locale(\"en\"));\r\n    Concept concept = Context.getConceptService().getConcept(5497);\r\n    concept.setRetired(true);\r\n    Context.getConceptService().saveConcept(concept);\r\n\r\n    String duplicateName = concept.getFullySpecifiedName(Context.getLocale()).getName();\r\n    Concept newConcept = ConceptTest.createMockConcept(2, Context.getLocale());\r\n    ConceptName anotherConceptName =\r\n        ConceptNameTest.createMockConceptName(3, Context.getLocale(), null, true);\r\n    anotherConceptName.setName(duplicateName);\r\n    newConcept.addName(anotherConceptName);\r\n    Errors errors = new BindException(newConcept, \"concept\");\r\n    new ConceptValidator().validate(newConcept, errors);\r\n    Assert.assertEquals(false, errors.hasErrors());\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 454, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8949885109227328}, {"buggy": true, "line_num": 13, "prob": 0.0016336043654104483}, {"buggy": true, "line_num": 11, "prob": 9.722422225013871e-08}, {"buggy": true, "line_num": 12, "prob": 3.208243351592931e-08}, {"buggy": true, "line_num": 6, "prob": 4.502394187817259e-09}, {"buggy": true, "line_num": 7, "prob": 3.929391668532429e-11}, {"buggy": true, "line_num": 10, "prob": 8.782872297372779e-12}]}
{"project": "JetBrains.intellij-community", "commit": "55e6750f731393606f0183f76bbd4b9628b62111", "file_path": "platform/lang-api/src/com/intellij/util/FileContentUtil.java", "func_code": "  public static void reparseFiles(\n      @NotNull final Project project,\n      @NotNull final Collection<VirtualFile> files,\n      final boolean includeOpenFiles) {\n    LinkedHashSet<VirtualFile> fileSet = new LinkedHashSet<VirtualFile>(files);\n    if (includeOpenFiles) {\n      for (VirtualFile open : FileEditorManager.getInstance(project).getOpenFiles()) {\n        if (!fileSet.contains(open)) {\n          fileSet.add(open);\n        }\n      }\n    }\n    FileContentUtilCore.reparseFiles(fileSet);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 50, "predictions": [{"buggy": true, "line_num": 7, "prob": 0.6474161675560267}, {"buggy": false, "line_num": -1, "prob": 0.19793817042659678}, {"buggy": true, "line_num": 12, "prob": 2.749180018692479e-08}, {"buggy": true, "line_num": 6, "prob": 4.000356822070048e-14}, {"buggy": true, "line_num": 3, "prob": 2.415437215991226e-14}, {"buggy": true, "line_num": 5, "prob": 1.2795715774770489e-14}]}
{"project": "JetBrains.intellij-community", "commit": "db82e7843db7b7d1c57570a440ea82ceab6d39df", "file_path": "plugins/groovy/src/org/jetbrains/plugins/groovy/util/LibrariesUtil.java", "func_code": "  private static void populateOrderEntries(\n      Module module,\n      Condition<Library> condition,\n      ArrayList<Library> libraries,\n      boolean exportedOnly,\n      Set<Module> visited) {\n    if (!visited.add(module)) {\n      return;\n    }\n\n    for (OrderEntry entry : ModuleRootManager.getInstance(module).getOrderEntries()) {\n      if (entry instanceof LibraryOrderEntry) {\n        LibraryOrderEntry libEntry = (LibraryOrderEntry) entry;\n        if (exportedOnly && !libEntry.isExported()) {\n          continue;\n        }\n\n        Library library = libEntry.getLibrary();\n        if (condition.value(library)) {\n          libraries.add(library);\n        }\n      } else if (entry instanceof ModuleOrderEntry) {\n        final Module dep = ((ModuleOrderEntry) entry).getModule();\n        if (module != null) {\n          populateOrderEntries(dep, condition, libraries, true, visited);\n        }\n      }\n    }\n  }\n", "line_num": 23, "charoffset": 12, "length": 14, "error": "module != null", "repair": "dep != null", "task_id": 72, "predictions": [{"buggy": true, "line_num": 23, "prob": 0.9999872446064237}, {"buggy": true, "line_num": 10, "prob": 6.360759276555562e-14}, {"buggy": false, "line_num": -1, "prob": 1.1348447612460096e-14}, {"buggy": true, "line_num": 18, "prob": 7.484025674826479e-24}, {"buggy": true, "line_num": 6, "prob": 6.053539567756343e-24}, {"buggy": true, "line_num": 24, "prob": 4.426077397298968e-24}]}
{"project": "JetBrains.intellij-community", "commit": "e494b90fcaa295e8f648973a8a13e81694a6933b", "file_path": "platform/lang-impl/src/com/intellij/ide/util/gotoByName/ChooseByNameBase.java", "func_code": "  public static Component renderNonPrefixSeparatorComponent(Color backgroundColor) {\n    final JPanel panel = new JPanel(new BorderLayout());\n    final JSeparator separator = new JSeparator(SwingConstants.HORIZONTAL);\n    panel.add(separator, BorderLayout.CENTER);\n    if (!UIUtil.isUnderAquaBasedLookAndFeel()) {\n      panel.setBorder(new EmptyBorder(3, 0, 2, 0));\n    }\n    panel.setBackground(backgroundColor);\n    return panel;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 53, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9994134902976615}, {"buggy": true, "line_num": 3, "prob": 1.1318315386436093e-10}, {"buggy": true, "line_num": 1, "prob": 9.071168963989607e-11}, {"buggy": true, "line_num": 5, "prob": 4.149542323385997e-12}, {"buggy": true, "line_num": 7, "prob": 3.771965735127553e-12}, {"buggy": true, "line_num": 8, "prob": 8.307478140150334e-13}]}
{"project": "apache.groovy", "commit": "d0af94fe7b555f839941b323936badd46500186b", "file_path": "src/main/groovy/util/GroovyTestCase.java", "func_code": "  protected void assertArrayEquals(Object[] expected, Object[] value) {\n    String message =\n        \"expected array: \"\n            + InvokerHelper.toString(expected)\n            + \" value array: \"\n            + InvokerHelper.toString(value);\n    assertNotNull(message + \": expected should not be null\", value);\n    assertNotNull(message + \": value should not be null\", value);\n    assertEquals(message, expected.length, value.length);\n    for (int i = 0, size = expected.length; i < size; i++) {\n      assertEquals(\"value[\" + i + \"] when \" + message, expected[i], value[i]);\n    }\n  }\n", "line_num": 6, "charoffset": 8, "length": 63, "error": "assertNotNull(message + \": expected should not be null\",value)", "repair": "assertNotNull(message + \": expected should not be null\",expected)", "task_id": 199, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9999891520726072}, {"buggy": true, "line_num": 8, "prob": 1.0351113672113568e-05}, {"buggy": false, "line_num": -1, "prob": 3.248507621727994e-08}, {"buggy": true, "line_num": 6, "prob": 1.2031053465974723e-15}, {"buggy": true, "line_num": 10, "prob": 1.717710372446206e-16}, {"buggy": true, "line_num": 7, "prob": 7.243644087881533e-17}]}
{"project": "spring-projects.spring-boot", "commit": "17bcd1c3598c5eb22f705e5c523a3deb66f54ea2", "file_path": "spring-boot-project/spring-boot-test/src/main/java/org/springframework/boot/test/web/reactive/server/WebTestClientContextCustomizer.java", "func_code": "  private void registerWebTestClient(ConfigurableApplicationContext context) {\n    ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();\n    if (beanFactory instanceof BeanDefinitionRegistry) {\n      registerWebTestClient((BeanDefinitionRegistry) beanFactory);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 506, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5329318686865767}, {"buggy": true, "line_num": 3, "prob": 2.210654045540995e-09}, {"buggy": true, "line_num": 2, "prob": 6.399606595231285e-13}]}
{"project": "sk89q.WorldEdit", "commit": "124308c4ce5c475519c9f2f53686b86ec4be81a7", "file_path": "worldedit-core/src/main/java/com/sk89q/worldedit/extent/ChangeSetExtent.java", "func_code": "  public Entity createEntity(Location location, BaseEntity state) {\n    Entity entity = super.createEntity(location, state);\n    if (entity != null) {\n      changeSet.add(new EntityCreate(location, state, entity));\n    }\n    return entity;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 502, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9966596042834287}, {"buggy": true, "line_num": 3, "prob": 0.0006145080024987852}, {"buggy": true, "line_num": 2, "prob": 3.896090146633138e-12}, {"buggy": true, "line_num": 5, "prob": 7.898496195007092e-13}, {"buggy": true, "line_num": 1, "prob": 6.371180455637869e-13}]}
{"project": "mongodb.mongo-java-driver", "commit": "2894ab4fc761d7324d364132615bf695d8c4b009", "file_path": "src/main/com/mongodb/DBCollection.java", "func_code": "  public final DBObject findOne(DBObject o, DBObject fields) {\n    Iterator<DBObject> i = __find(o, fields, 0, -1, 0, getOptions());\n    DBObject obj = (i == null ? null : i.next());\n    if (obj != null && (fields != null && fields.keySet().size() > 0)) {\n      obj.markAsPartialObject();\n    }\n    return obj;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 431, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.6324289470979588}, {"buggy": false, "line_num": -1, "prob": 0.036552916790787704}, {"buggy": true, "line_num": 4, "prob": 6.3055156486952345e-06}, {"buggy": true, "line_num": 1, "prob": 6.731529813887249e-07}, {"buggy": true, "line_num": 6, "prob": 1.2132263380447454e-11}, {"buggy": true, "line_num": 2, "prob": 2.3592643663357415e-13}]}
{"project": "oracle.graal", "commit": "00c8519654f77a8216ce3032bfa774b495213e35", "file_path": "graal/com.oracle.graal.phases.common/src/com/oracle/graal/phases/common/LoweringPhase.java", "func_code": "  private boolean checkPostLowering(StructuredGraph graph, PhaseContext context) {\n    Mark expectedMark = graph.getMark();\n    lower(graph, context, 1);\n    Mark mark = graph.getMark();\n    assert mark.equals(expectedMark)\n        : graph\n            + \": a second round in the current lowering phase introduced these new nodes: \"\n            + graph.getNewNodes(expectedMark).snapshot();\n    return true;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 469, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9824299815003674}, {"buggy": false, "line_num": -1, "prob": 0.00020806040460927917}, {"buggy": true, "line_num": 4, "prob": 8.296845391540223e-11}, {"buggy": true, "line_num": 3, "prob": 3.514929784092327e-14}, {"buggy": true, "line_num": 2, "prob": 1.2478103266252335e-14}]}
{"project": "JetBrains.intellij-community", "commit": "4eb0ec4596e84bd4c86e89bf5af79d108e5fd91d", "file_path": "java/compiler/impl/src/com/intellij/compiler/backwardRefs/CompilerReferenceServiceImpl.java", "func_code": "  public boolean areReferencesUsageCorrelated(\n      @NotNull LightRef ref1, @NotNull LightRef ref2, int correlationThreshold) {\n    try {\n      myReadDataLock.lock();\n      if (myReader == null) throw new ReferenceIndexUnavailableException();\n      try {\n        final TIntHashSet ids1 = myReader.getAllContainingFileIds(ref1);\n        final TIntHashSet ids2 = myReader.getAllContainingFileIds(ref2);\n        final TIntHashSet intersection = intersection(ids1, ids2);\n        if ((ids1.size() - intersection.size()) * correlationThreshold < intersection.size()) {\n          return true;\n        }\n        if ((ids1.size() - intersection.size()) * correlationThreshold < intersection.size()) {\n          return true;\n        }\n        return false;\n      } catch (Exception e) {\n        //noinspection ConstantConditions\n        return onException(e, \"correlation\");\n      }\n    } finally {\n      myReadDataLock.unlock();\n    }\n  }\n", "line_num": 12, "charoffset": 13, "length": 11, "error": "ids1.size()", "repair": "ids2.size()", "task_id": 37, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5855476309168663}, {"buggy": true, "line_num": 12, "prob": 0.0032427895906671496}, {"buggy": true, "line_num": 8, "prob": 1.6200390103640494e-08}, {"buggy": true, "line_num": 9, "prob": 8.394890427165006e-10}, {"buggy": true, "line_num": 18, "prob": 1.3425503454431457e-11}, {"buggy": true, "line_num": 6, "prob": 1.9299004322362757e-12}, {"buggy": true, "line_num": 21, "prob": 1.3617371665101437e-12}, {"buggy": true, "line_num": 7, "prob": 1.2067912882127178e-12}, {"buggy": true, "line_num": 5, "prob": 1.0754736314440233e-12}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "a4f0127fbb39dd4cf6d8bad61f8f7224fdc9153a", "file_path": "packages/SettingsLib/src/com/android/settingslib/bluetooth/PbapClientProfile.java", "func_code": "  public boolean connect(BluetoothDevice device) {\n    if (V) {\n      Log.d(TAG, \"PBAPClientProfile got connect request\");\n    }\n    if (mService == null) {\n      return false;\n    }\n    List<BluetoothDevice> srcs = getConnectedDevices();\n    if (srcs != null) {\n      for (BluetoothDevice src : srcs) {\n        if (src.equals(device)) {\n          // Connect to same device, Ignore it\n          Log.d(TAG, \"Ignoring Connect\");\n          return true;\n        }\n      }\n      for (BluetoothDevice src : srcs) {\n        mService.disconnect(src);\n      }\n    }\n    Log.d(TAG, \"PBAPClientProfile attempting to connect to \" + device.getAddress());\n\n    return mService.connect(device);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 141, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9997881654427698}, {"buggy": true, "line_num": 1, "prob": 1.6591849429432916e-06}, {"buggy": true, "line_num": 16, "prob": 2.2719301437401978e-10}, {"buggy": true, "line_num": 22, "prob": 4.524977720096258e-12}, {"buggy": true, "line_num": 20, "prob": 1.4817931507070341e-12}, {"buggy": true, "line_num": 8, "prob": 1.2029649172962367e-12}, {"buggy": true, "line_num": 10, "prob": 2.965141082872417e-13}, {"buggy": true, "line_num": 17, "prob": 1.163686833201825e-13}, {"buggy": true, "line_num": 2, "prob": 6.720543567894935e-14}, {"buggy": true, "line_num": 4, "prob": 4.3453952315201254e-14}, {"buggy": true, "line_num": 12, "prob": 2.5021086523904344e-14}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "9decd5ab3b2c8d6742c3a4cb10a107fa9cf43afc", "file_path": "services/core/java/com/android/server/am/ActiveServices.java", "func_code": "  public void setServiceForegroundLocked(\n      ComponentName className, IBinder token, int id, Notification notification, int flags) {\n    final int userId = UserHandle.getCallingUserId();\n    final long origId = Binder.clearCallingIdentity();\n    try {\n      ServiceRecord r = findServiceLocked(className, token, userId);\n      if (r != null) {\n        setServiceForegroundInnerLocked(r, id, notification, flags);\n      }\n    } finally {\n      Binder.restoreCallingIdentity(origId);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 140, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999208450723729}, {"buggy": true, "line_num": 2, "prob": 4.496940339306413e-07}, {"buggy": true, "line_num": 5, "prob": 4.338765880427429e-12}, {"buggy": true, "line_num": 7, "prob": 1.8473602042488076e-12}, {"buggy": true, "line_num": 10, "prob": 3.233286682089251e-13}, {"buggy": true, "line_num": 6, "prob": 2.508398287374626e-13}]}
{"project": "vespa-engine.vespa", "commit": "b10d67353d114385411cfeac3515797b5bb40fd8", "file_path": "jdisc_http_service/src/main/java/com/yahoo/jdisc/http/server/jetty/MetricReporter.java", "func_code": "  public void setBindingMatch(BindingMatch<?> bindingMatch) {\n    if (bindingMatch == null) return;\n    UriPattern pattern = bindingMatch.matched();\n    if (pattern == null) return;\n    Map<String, Object> combinedDimensions = new HashMap<>(requestDimensions);\n    combinedDimensions.put(Metrics.HANDLER_DIMENSION, bindingMatch.toString());\n    this.context = metric.createContext(combinedDimensions);\n  }\n", "line_num": 5, "charoffset": 58, "length": 23, "error": "bindingMatch.toString()", "repair": "pattern.toString()", "task_id": 525, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.8737013254153796}, {"buggy": false, "line_num": -1, "prob": 0.09611874221682587}, {"buggy": true, "line_num": 4, "prob": 0.0017321295344262507}, {"buggy": true, "line_num": 5, "prob": 2.629399642321849e-10}, {"buggy": true, "line_num": 2, "prob": 3.574089205382e-11}, {"buggy": true, "line_num": 3, "prob": 2.4909531497198103e-13}]}
{"project": "JetBrains.intellij-community", "commit": "a587d920f8aedd0a6550d8a038d118131fc4a06b", "file_path": "python/psi-api/src/com/jetbrains/python/psi/impl/PyQualifiedName.java", "func_code": "  public PyQualifiedName append(PyQualifiedName qName) {\n    PyQualifiedName result = new PyQualifiedName(myComponents.size() + qName.getComponentCount());\n    result.myComponents.addAll(myComponents);\n    result.myComponents.addAll(result.getComponents());\n    return result;\n  }\n", "line_num": 3, "charoffset": 31, "length": 22, "error": "result.getComponents()", "repair": "qName.getComponents()", "task_id": 54, "predictions": [{"buggy": true, "line_num": 3, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 2.4617908598928364e-10}, {"buggy": true, "line_num": 4, "prob": 3.095758205049166e-20}, {"buggy": true, "line_num": 2, "prob": 5.198948090775344e-23}]}
{"project": "querydsl.querydsl", "commit": "4d90ccdf601f81ec75794f50cccaf1ff472de3cd", "file_path": "querydsl-sql/src/test/java/com/mysema/query/sql/KeyTest.java", "func_code": "  public void test() {\n    QUser user = new QUser(\"user\");\n    QUser user2 = new QUser(\"user2\");\n    QDepartment department = new QDepartment(\"department\");\n    QCompany company = new QCompany(\"company\");\n\n    // superiorId -> id\n    query().from(user).innerJoin(user.superiorId(), user.id());\n\n    // superiorId -> superiorId\n    query().from(user).innerJoin(user.superiorId(), user2.superiorId());\n\n    // department -> id / company -> id\n    query()\n        .from(user)\n        .innerJoin(user.department(), department.id())\n        .innerJoin(department.company(), company.id());\n  }\n", "line_num": 7, "charoffset": 56, "length": 9, "error": "user.id()", "repair": "user2.id()", "task_id": 492, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9985555461445026}, {"buggy": true, "line_num": 16, "prob": 0.00011706032481132848}, {"buggy": true, "line_num": 14, "prob": 1.0090426891312388e-05}, {"buggy": true, "line_num": 10, "prob": 1.2175823863496145e-07}, {"buggy": true, "line_num": 15, "prob": 2.356753838027684e-10}, {"buggy": true, "line_num": 7, "prob": 1.1319330066664882e-10}]}
{"project": "apache.cxf", "commit": "5c999360016e11d9173888936e08b185a89e009a", "file_path": "rt/rs/security/oauth-parent/oauth2/src/test/java/org/apache/cxf/rs/security/oauth2/provider/JPAOAuthDataProviderTest.java", "func_code": "  public void testAddGetDeleteClient() {\n    Client c = addClient(\"12345\", \"alice\");\n    Client c2 = provider.getClient(c.getClientId());\n    compareClients(c, c2);\n\n    c2.setClientSecret(\"567\");\n    provider.setClient(c2);\n    Client c22 = provider.getClient(c.getClientId());\n    compareClients(c2, c22);\n\n    provider.removeClient(c.getClientId());\n    Client c3 = provider.getClient(c.getClientId());\n    assertNull(c3);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 179, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8661537841258748}, {"buggy": true, "line_num": 10, "prob": 2.456895206555249e-05}, {"buggy": true, "line_num": 8, "prob": 3.326292314807795e-08}, {"buggy": true, "line_num": 11, "prob": 6.69913679677816e-09}, {"buggy": true, "line_num": 6, "prob": 3.959949935360378e-09}, {"buggy": true, "line_num": 7, "prob": 4.601209115166691e-12}, {"buggy": true, "line_num": 5, "prob": 2.1310001279735416e-12}, {"buggy": true, "line_num": 2, "prob": 2.052695842186298e-12}, {"buggy": true, "line_num": 3, "prob": 3.4106309409154944e-13}]}
{"project": "oracle.graal", "commit": "7b81d2dd41089c8ae19937d12f9500e3d4a9045b", "file_path": "graal/com.oracle.graal.replacements/src/com/oracle/graal/replacements/BoxingSnippets.java", "func_code": "  public static FloatingNode canonicalizeBoxing(\n      BoxNode box, MetaAccessProvider metaAccess, ConstantReflectionProvider constantReflection) {\n    ValueNode value = box.getValue();\n    if (value.isConstant()) {\n      JavaConstant sourceConstant = value.asJavaConstant();\n      JavaConstant boxedConstant = constantReflection.boxPrimitive(sourceConstant);\n      if (boxedConstant != null && boxedConstant.getKind() == box.getBoxingKind()) {\n        return ConstantNode.forConstant(boxedConstant, metaAccess, box.graph());\n      }\n    }\n    return null;\n  }\n", "line_num": 6, "charoffset": 41, "length": 23, "error": "boxedConstant.getKind()", "repair": "sourceConstant.getKind()", "task_id": 465, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.9996515512875154}, {"buggy": false, "line_num": -1, "prob": 3.233967182913344e-08}, {"buggy": true, "line_num": 7, "prob": 4.3632120227115977e-13}, {"buggy": true, "line_num": 2, "prob": 4.5693107954103125e-17}, {"buggy": true, "line_num": 3, "prob": 5.0605424974860515e-18}]}
{"project": "apache.lucene-solr", "commit": "ae59294e1246509bc04f323b19d64a792b1dfa49", "file_path": "lucene/core/src/java/org/apache/lucene/codecs/lucene41/Lucene41SimpleDocValuesFormat.java", "func_code": "  public SortedDocValues getSorted(FieldInfo field) throws IOException {\n    final BinaryDocValues binary = getBinary(field);\n    final NumericDocValues ordinals = getNumeric(field, ords.get(field.number));\n    return new SortedDocValues() {\n\n      @Override\n      public int getOrd(int docID) {\n        return (int) ordinals.get(docID);\n      }\n\n      @Override\n      public void lookupOrd(int ord, BytesRef result) {\n        binary.get(ord, result);\n      }\n\n      @Override\n      public int getValueCount() {\n        return binary.size();\n      }\n\n      @Override\n      public int size() {\n        return ordinals.size();\n      }\n    };\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 214, "predictions": [{"buggy": true, "line_num": 2, "prob": 0.9821754874532405}, {"buggy": true, "line_num": 12, "prob": 1.977091127282525e-05}, {"buggy": false, "line_num": -1, "prob": 9.141718683203319e-08}, {"buggy": true, "line_num": 7, "prob": 1.9591416771474645e-11}, {"buggy": true, "line_num": 17, "prob": 5.924256226457167e-14}]}
{"project": "liferay.liferay-portal", "commit": "39f87a76a036014ce71d48ac849aefd8d1f2f280", "file_path": "portal-impl/src/com/liferay/portal/tools/servicebuilder/ServiceBuilder.java", "func_code": "  private void _resolveEntity(Entity entity) throws IOException {\n    if (entity.isResolved()) {\n      return;\n    }\n\n    for (String referenceName : entity.getUnresolvedReferenceList()) {\n      Entity referenceEntity = getEntity(referenceName);\n\n      if (referenceEntity == null) {\n        throw new RuntimeException(\n            \"Unable to resolve reference \"\n                + referenceName\n                + \" in \"\n                + ListUtil.toString(_ejbList, Entity.NAME_ACCESSOR));\n      }\n\n      entity.addReference(referenceEntity);\n    }\n\n    entity.setResolved();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 412, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9996589466688384}, {"buggy": true, "line_num": 16, "prob": 7.707663976180435e-06}, {"buggy": true, "line_num": 13, "prob": 5.122575109006077e-06}, {"buggy": true, "line_num": 8, "prob": 2.5162953671519785e-13}]}
{"project": "oracle.graal", "commit": "055dbc51c70ff65872840d4dadfc56061f8e708b", "file_path": "graal/com.oracle.graal.options/src/com/oracle/graal/options/OptionProcessor.java", "func_code": "  private static Element topDeclaringType(Element element) {\n    Element enclosing = element.getEnclosingElement();\n    if (enclosing == null || enclosing.getKind() == ElementKind.PACKAGE) {\n      assert element.getKind() == ElementKind.CLASS || element.getKind() == ElementKind.INTERFACE;\n      return element;\n    }\n    return topDeclaringType(enclosing);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 468, "predictions": [{"buggy": true, "line_num": 2, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 1.4994038097825978e-11}, {"buggy": true, "line_num": 4, "prob": 1.5957862041139963e-20}, {"buggy": true, "line_num": 3, "prob": 3.1242960065452672e-24}, {"buggy": true, "line_num": 6, "prob": 2.590982231731315e-24}]}
{"project": "capitalone.Hygieia", "commit": "10d7c1c91b44c0fda2fe46fc4647deadaff0f441", "file_path": "collectors/build/sonar/src/main/java/com/capitalone/dashboard/collector/DefaultSonar6Client.java", "func_code": "  public JSONArray getQualityProfileConfigurationChanges(String instanceUrl, String qualityProfile)\n      throws ParseException {\n    String url = instanceUrl + URL_QUALITY_PROFILE_CHANGES + qualityProfile;\n    try {\n      JSONArray qualityProfileConfigChanges = this.parseAsArray(instanceUrl, \"events\");\n      return qualityProfileConfigChanges;\n    } catch (ParseException e) {\n      LOG.error(\"Could not parse response from: \" + url, e);\n      throw e;\n    } catch (RestClientException rce) {\n      LOG.error(rce);\n      throw rce;\n    }\n  }\n", "line_num": 4, "charoffset": 46, "length": 40, "error": "this.parseAsArray(instanceUrl,\"events\")", "repair": "this.parseAsArray(url,\"events\")", "task_id": 255, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.9999986886995842}, {"buggy": false, "line_num": -1, "prob": 1.2901206676368253e-06}, {"buggy": true, "line_num": 2, "prob": 9.275319912049042e-09}, {"buggy": true, "line_num": 7, "prob": 1.7007696431782846e-10}, {"buggy": true, "line_num": 8, "prob": 5.600572656640628e-17}, {"buggy": true, "line_num": 5, "prob": 1.3396167586994482e-18}, {"buggy": true, "line_num": 10, "prob": 8.633030901614807e-19}]}
{"project": "bigbluebutton.bigbluebutton", "commit": "8a013304b65f2dbe7cf5a9d71a14e9d555e10e20", "file_path": "bigbluebutton-web/src/java/org/bigbluebutton/api/ParamsProcessorUtil.java", "func_code": "  private String substituteKeywords(\r\n      String message, String dialNumber, String telVoice, String meetingName) {\r\n    String welcomeMessage = message;\r\n\r\n    String DIAL_NUM = \"%%DIALNUM%%\";\r\n    String CONF_NUM = \"%%CONFNUM%%\";\r\n    String CONF_NAME = \"%%CONFNAME%%\";\r\n    ArrayList<String> keywordList = new ArrayList<String>();\r\n    keywordList.add(DIAL_NUM);\r\n    keywordList.add(CONF_NUM);\r\n    keywordList.add(CONF_NAME);\r\n\r\n    Iterator<String> itr = keywordList.iterator();\r\n    while (itr.hasNext()) {\r\n      String keyword = (String) itr.next();\r\n      if (keyword.equals(DIAL_NUM)) {\r\n        welcomeMessage = welcomeMessage.replaceAll(DIAL_NUM, dialNumber);\r\n      } else if (keyword.equals(CONF_NUM)) {\r\n        welcomeMessage = welcomeMessage.replaceAll(CONF_NUM, telVoice);\r\n      } else if (keyword.equals(CONF_NAME)) {\r\n        welcomeMessage = welcomeMessage.replaceAll(CONF_NAME, meetingName);\r\n      }\r\n    }\r\n    return welcomeMessage;\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 251, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.27893328939171463}, {"buggy": true, "line_num": 20, "prob": 0.0032574411460415125}, {"buggy": true, "line_num": 8, "prob": 0.001105934573904313}, {"buggy": true, "line_num": 10, "prob": 3.834583047548398e-06}]}
{"project": "bazelbuild.bazel", "commit": "e03758bb808f37f7de9f07a8eb51081bbe95ae8b", "file_path": "src/main/java/com/google/devtools/build/lib/actions/ActionCacheChecker.java", "func_code": "  public void afterExecution(Action action, Token token, MetadataHandler metadataHandler)\n      throws IOException {\n    Preconditions.checkArgument(token != null);\n    String key = token.cacheKey;\n    if (actionCache.get(key) != null) {\n      // This cache entry has already been updated by a shared action. We don't need to do it again.\n      return;\n    }\n    ActionCache.Entry entry = actionCache.createEntry(action.getKey());\n    for (Artifact output : action.getOutputs()) {\n      // Remove old records from the cache if they used different key.\n      String execPath = output.getExecPathString();\n      if (!key.equals(execPath)) {\n        actionCache.remove(key);\n      }\n      if (!metadataHandler.artifactOmitted(output)) {\n        // Output files *must* exist and be accessible after successful action execution.\n        Metadata metadata = metadataHandler.getMetadata(output);\n        Preconditions.checkState(metadata != null);\n        entry.addFile(output.getExecPath(), metadata);\n      }\n    }\n    for (Artifact input : action.getInputs()) {\n      entry.addFile(input.getExecPath(), metadataHandler.getMetadataMaybe(input));\n    }\n    entry.getFileDigest();\n    actionCache.put(key, entry);\n  }\n", "line_num": 13, "charoffset": 8, "length": 23, "error": "actionCache.remove(key)", "repair": "actionCache.remove(execPath)", "task_id": 247, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.6560978693288733}, {"buggy": false, "line_num": -1, "prob": 0.20418917207674803}, {"buggy": true, "line_num": 15, "prob": 0.0002598499056251258}, {"buggy": true, "line_num": 12, "prob": 6.170477831405319e-08}, {"buggy": true, "line_num": 19, "prob": 2.5186353900699073e-08}, {"buggy": true, "line_num": 22, "prob": 2.5337491588971687e-09}, {"buggy": true, "line_num": 13, "prob": 1.7299245111274774e-09}, {"buggy": true, "line_num": 23, "prob": 1.0158108675982796e-09}]}
{"project": "keycloak.keycloak", "commit": "f63c60855efd71427f678dc5ce73691937e3a6fb", "file_path": "saml-core/src/test/java/org/keycloak/saml/processing/core/parsers/saml/SAMLParserTest.java", "func_code": "  public void testSaml20EncryptedAssertionWithNewlines() throws Exception {\n    try (InputStream st =\n        SAMLParserTest.class.getResourceAsStream(\n            \"KEYCLOAK-4489-encrypted-assertion-with-newlines.xml\")) {\n      Object parsedObject = parser.parse(st);\n      assertThat(parsedObject, instanceOf(ResponseType.class));\n\n      ResponseType resp = (ResponseType) parsedObject;\n      assertThat(resp.getAssertions().size(), is(1));\n\n      ResponseType.RTChoiceType rtChoiceType = resp.getAssertions().get(0);\n      assertNull(rtChoiceType.getAssertion());\n      assertNotNull(rtChoiceType.getEncryptedAssertion());\n\n      PrivateKey privateKey = DerUtils.decodePrivateKey(Base64.decode(PRIVATE_KEY));\n      AssertionUtil.decryptAssertion(resp, privateKey);\n\n      rtChoiceType = resp.getAssertions().get(0);\n      assertNotNull(rtChoiceType.getAssertion());\n      assertNull(rtChoiceType.getEncryptedAssertion());\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 380, "predictions": [{"buggy": true, "line_num": 17, "prob": 0.8125068998213876}, {"buggy": false, "line_num": -1, "prob": 0.17428624490047978}, {"buggy": true, "line_num": 15, "prob": 1.1065014089427274e-09}, {"buggy": true, "line_num": 4, "prob": 4.29018116648386e-12}, {"buggy": true, "line_num": 14, "prob": 1.8158218224889104e-12}, {"buggy": true, "line_num": 10, "prob": 7.249878781702661e-13}, {"buggy": true, "line_num": 19, "prob": 4.4442137038689847e-13}, {"buggy": true, "line_num": 7, "prob": 3.3494960904337033e-13}, {"buggy": true, "line_num": 5, "prob": 7.394925066006723e-14}, {"buggy": true, "line_num": 8, "prob": 5.023661932465232e-14}]}
{"project": "ReactiveX.RxJava", "commit": "5f4ca71ea83741cb384f99c8e22500f4d40e3994", "file_path": "rxjava-core/src/main/java/rx/operators/OperationMergeDelayError.java", "func_code": "  public Subscription onSubscribe(Observer<? super T> actualObserver) {\n    CompositeSubscription completeSubscription = new CompositeSubscription();\n\n    /**\n     * We must synchronize a merge because we subscribe to multiple sequences in parallel that will\n     * each be emitting.\n     *\n     * <p>The calls from each sequence must be serialized.\n     *\n     * <p>Bug report: https://github.com/Netflix/RxJava/issues/614\n     */\n    SafeObservableSubscription subscription = new SafeObservableSubscription(ourSubscription);\n    completeSubscription.add(subscription);\n    SynchronizedObserver<T> synchronizedObserver =\n        new SynchronizedObserver<T>(actualObserver, subscription);\n\n    /** Subscribe to the parent Observable to get to the children Observables */\n    completeSubscription.add(sequences.subscribe(new ParentObserver(synchronizedObserver)));\n\n    /* return our subscription to allow unsubscribing */\n    return completeSubscription;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 114, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9999185270875267}, {"buggy": false, "line_num": -1, "prob": 8.145408449010928e-05}, {"buggy": true, "line_num": 14, "prob": 8.322325717590594e-16}, {"buggy": true, "line_num": 17, "prob": 1.0099323708009424e-16}, {"buggy": true, "line_num": 12, "prob": 8.019141381710287e-18}]}
{"project": "undertow-io.undertow", "commit": "2dcb1802afedba37db6e43c0c2bd9bb48b0c9e33", "file_path": "core/src/main/java/io/undertow/server/HttpServerExchange.java", "func_code": "  public StreamSinkChannel create() {\n    final ChannelWrapper[] wrappers = wrappersUpdater.getAndSet(this, null);\n    if (wrappers == null) {\n      return null;\n    }\n    StreamSinkChannel oldChannel = firstChannel;\n    StreamSinkChannel channel = oldChannel;\n    for (ChannelWrapper wrapper : wrappers) {\n      channel = ((ChannelWrapper<StreamSinkChannel>) wrapper).wrap(oldChannel, exchange);\n      if (channel == null) {\n        channel = oldChannel;\n      }\n    }\n    exchange.startResponse();\n    return channel;\n  }\n", "line_num": 8, "charoffset": 26, "length": 72, "error": "((ChannelWrapper<StreamSinkChannel>)wrapper).wrap(oldChannel,exchange)", "repair": "((ChannelWrapper<StreamSinkChannel>)wrapper).wrap(channel,exchange)", "task_id": 524, "predictions": [{"buggy": true, "line_num": 8, "prob": 0.9984108470433751}, {"buggy": true, "line_num": 10, "prob": 0.001499785321647224}, {"buggy": false, "line_num": -1, "prob": 8.448208145679066e-05}, {"buggy": true, "line_num": 6, "prob": 2.5083233353869076e-08}, {"buggy": true, "line_num": 14, "prob": 1.2553976051916949e-13}, {"buggy": true, "line_num": 5, "prob": 9.662167227370397e-17}, {"buggy": true, "line_num": 1, "prob": 3.931276288512264e-17}]}
{"project": "spring-projects.spring-boot", "commit": "49a5587558d8183f5a054156f59a8bd5bacc9c67", "file_path": "spring-boot-cli/src/main/java/org/springframework/boot/cli/command/options/OptionHandler.java", "func_code": "  public final ExitStatus run(String... args) throws Exception {\n    String[] argsToUse = args.clone();\n    for (int i = 0; i < argsToUse.length; i++) {\n      if (\"-cp\".equals(argsToUse[i])) {\n        argsToUse[i] = \"--cp\";\n      }\n    }\n    OptionSet options = getParser().parse(argsToUse);\n    return run(options);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 509, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5500097199320205}, {"buggy": true, "line_num": 7, "prob": 0.0040051241419145865}, {"buggy": true, "line_num": 8, "prob": 3.40366961982413e-10}]}
{"project": "druid-io.druid", "commit": "db556102db1b01327240df5c6265df1912104ec3", "file_path": "server/src/main/java/com/metamx/druid/master/SegmentReplicantLookup.java", "func_code": "  public static SegmentReplicantLookup make(DruidCluster cluster) {\n    final Table<String, String, Integer> segmentsInCluster = HashBasedTable.create();\n    final Table<String, String, Integer> loadingSegments = HashBasedTable.create();\n\n    for (MinMaxPriorityQueue<ServerHolder> serversByType : cluster.getSortedServersByTier()) {\n      for (ServerHolder serverHolder : serversByType) {\n        DruidServer server = serverHolder.getServer();\n\n        for (DataSegment segment : server.getSegments().values()) {\n          Integer numReplicants = segmentsInCluster.get(segment.getIdentifier(), server.getTier());\n          if (numReplicants == null) {\n            numReplicants = 0;\n          }\n          segmentsInCluster.put(segment.getIdentifier(), server.getTier(), ++numReplicants);\n        }\n\n        // Also account for queued segments\n        for (DataSegment segment : serverHolder.getPeon().getSegmentsToLoad()) {\n          Integer numReplicants = loadingSegments.get(segment.getIdentifier(), server.getTier());\n          if (numReplicants == null) {\n            numReplicants = 0;\n          }\n          loadingSegments.put(segment.getIdentifier(), server.getTier(), ++numReplicants);\n        }\n      }\n    }\n\n    return new SegmentReplicantLookup(segmentsInCluster, loadingSegments);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 283, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9094946697517681}, {"buggy": true, "line_num": 17, "prob": 0.004150946622188714}, {"buggy": true, "line_num": 22, "prob": 1.0494500016429436e-06}, {"buggy": true, "line_num": 9, "prob": 5.6956866110053e-07}, {"buggy": true, "line_num": 18, "prob": 3.7973090259657686e-07}, {"buggy": true, "line_num": 13, "prob": 1.238896655705537e-09}]}
{"project": "apache.groovy", "commit": "27ccb51398842a837e8039de56c8818f928f88c3", "file_path": "src/main/org/codehaus/groovy/classgen/asm/sc/StaticTypesTypeChooser.java", "func_code": "  public ClassNode resolveType(final Expression exp, final ClassNode current) {\n    Expression target =\n        exp instanceof VariableExpression ? getTarget((VariableExpression) exp) : exp;\n    ClassNode dif = (ClassNode) target.getNodeMetaData(StaticTypesMarker.DECLARATION_INFERRED_TYPE);\n    if (dif != null) return dif;\n    ClassNode inferredType = (ClassNode) target.getNodeMetaData(StaticTypesMarker.INFERRED_TYPE);\n    if (inferredType != null) {\n      return inferredType;\n    }\n    return super.resolveType(exp, current);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 195, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9151349081186968}, {"buggy": true, "line_num": 9, "prob": 1.4856052563065708e-08}, {"buggy": true, "line_num": 2, "prob": 3.671639615298407e-11}, {"buggy": true, "line_num": 5, "prob": 2.0615239866484306e-12}, {"buggy": true, "line_num": 3, "prob": 3.7016470538866774e-13}, {"buggy": true, "line_num": 4, "prob": 1.7081467909460656e-13}]}
{"project": "apache.groovy", "commit": "6a5eda43e537077c910d3eb4fbeba0136d600ba7", "file_path": "src/main/groovy/swing/SwingBuilder.java", "func_code": "  protected Object createBoxLayout(Map properties) {\n    Object parent = getCurrent();\n    if (parent instanceof Container) {\n      Object axisObject = properties.remove(\"axis\");\n      int axis = BoxLayout.X_AXIS;\n      if (axisObject != null) {\n        Integer i = (Integer) axisObject;\n        axis = i.intValue();\n      }\n\n      Container target = (Container) parent;\n      if (target instanceof RootPaneContainer) {\n        target = ((RootPaneContainer) target).getContentPane();\n      }\n      BoxLayout answer = new BoxLayout(target, axis);\n\n      // now let's try to set the layout property\n      InvokerHelper.setProperty(parent, \"layout\", answer);\n      return answer;\n    } else {\n      throw new RuntimeException(\"Must be nested inside a Container\");\n    }\n  }\n", "line_num": 17, "charoffset": 12, "length": 51, "error": "InvokerHelper.setProperty(parent,\"layout\",answer)", "repair": "InvokerHelper.setProperty(target,\"layout\",answer)", "task_id": 197, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8607883784122088}, {"buggy": true, "line_num": 4, "prob": 0.13838462219613554}, {"buggy": true, "line_num": 17, "prob": 2.52500878988832e-06}, {"buggy": true, "line_num": 12, "prob": 1.1415630427977947e-06}, {"buggy": true, "line_num": 14, "prob": 1.0297855058121171e-07}, {"buggy": true, "line_num": 7, "prob": 6.437967462980764e-08}, {"buggy": true, "line_num": 5, "prob": 1.3993638405593043e-11}, {"buggy": true, "line_num": 11, "prob": 4.715978116366986e-12}]}
{"project": "todoroo.astrid", "commit": "aa79cd724618f87122ff25ff2dc2e95782d50f7a", "file_path": "api/src/com/todoroo/astrid/sync/SyncProvider.java", "func_code": "  protected void sendLocallyUpdated(SyncData<TYPE> data) throws IOException {\n    int length;\n    length = data.localUpdated.getCount();\n    for (int i = 0; i < length; i++) {\n      data.localUpdated.moveToNext();\n      TYPE local = read(data.localUpdated);\n      try {\n        if (local.task == null) continue;\n\n        // if there is a conflict, merge\n        int remoteIndex = matchTask((ArrayList<TYPE>) data.remoteUpdated, local);\n        if (remoteIndex != -1) {\n          TYPE remote = data.remoteUpdated.get(remoteIndex);\n          push(local, remote);\n\n          // re-read remote task after merge\n          remote = pull(remote);\n          remote.task.setId(local.task.getId());\n          data.remoteUpdated.set(remoteIndex, remote);\n        } else {\n          push(local, null);\n        }\n      } catch (Exception e) {\n        handleException(\"sync-local-updated\", e, false); // $NON-NLS-1$\n      }\n      write(local);\n    }\n  }\n", "line_num": 16, "charoffset": 29, "length": 12, "error": "pull(remote)", "repair": "pull(local)", "task_id": 519, "predictions": [{"buggy": true, "line_num": 17, "prob": 0.9933759823055547}, {"buggy": false, "line_num": -1, "prob": 0.0006312552656736356}, {"buggy": true, "line_num": 25, "prob": 4.5039934869891175e-12}, {"buggy": true, "line_num": 18, "prob": 2.1167356829457632e-13}, {"buggy": true, "line_num": 16, "prob": 1.4427946730743797e-13}, {"buggy": true, "line_num": 13, "prob": 1.7445159053612614e-14}, {"buggy": true, "line_num": 4, "prob": 4.93680238770139e-15}]}
{"project": "antlr.antlr4", "commit": "664d66d9373b77995163d37c1391da43b526beb0", "file_path": "tool/src/org/antlr/v4/codegen/model/RuleFunction.java", "func_code": "  protected static FrequencySet<String> combineMax(FrequencySet<String> a, FrequencySet<String> b) {\n    FrequencySet<String> result = combineAndClip(a, b, 1);\n    for (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n      result.get(entry.getKey()).v = entry.getValue().v;\n    }\n\n    for (Map.Entry<String, MutableInt> entry : a.entrySet()) {\n      MutableInt slot = result.get(entry.getKey());\n      slot.v = Math.max(slot.v, entry.getValue().v);\n    }\n\n    return result;\n  }\n", "line_num": 6, "charoffset": 46, "length": 12, "error": "a.entrySet()", "repair": "b.entrySet()", "task_id": 128, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5348996629913065}, {"buggy": true, "line_num": 3, "prob": 0.3929283784596137}, {"buggy": true, "line_num": 6, "prob": 7.432969894512952e-05}, {"buggy": true, "line_num": 7, "prob": 1.6477619988155133e-08}, {"buggy": true, "line_num": 2, "prob": 3.431580381123208e-11}, {"buggy": true, "line_num": 1, "prob": 2.5302259626353294e-11}, {"buggy": true, "line_num": 8, "prob": 9.861033703301536e-12}]}
{"project": "igniterealtime.Smack", "commit": "865168688d793dbe9b8c03be179cbad75084cd04", "file_path": "extensions/src/main/java/org/jivesoftware/smackx/iqprivate/PrivateDataManager.java", "func_code": "  public static synchronized PrivateDataManager getInstanceFor(XMPPConnection connection) {\n    PrivateDataManager privateDataManager = instances.get(connection);\n    if (connection == null) {\n      privateDataManager = new PrivateDataManager(connection);\n    }\n    return privateDataManager;\n  }\n", "line_num": 2, "charoffset": 12, "length": 18, "error": "connection == null", "repair": "privateDataManager == null", "task_id": 368, "predictions": [{"buggy": true, "line_num": 2, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 4.389442683728642e-15}, {"buggy": true, "line_num": 3, "prob": 1.6088089557181043e-23}, {"buggy": true, "line_num": 1, "prob": 2.83545955766323e-26}]}
{"project": "facebook.presto", "commit": "28db1cc9efa95eb3db21a27872101e24f849ed34", "file_path": "presto-main/src/main/java/com/facebook/presto/connector/ConnectorManager.java", "func_code": "  public synchronized void createConnection(\n      String catalogName, String connectorName, Map<String, String> properties) {\n    checkNotNull(catalogName, \"catalogName is null\");\n    checkNotNull(connectorName, \"connectorName is null\");\n    checkNotNull(properties, \"properties is null\");\n\n    // for now connectorId == catalogName\n    String connectorId = catalogName;\n    checkState(!connectors.containsKey(connectorId), \"A connector %s already exists\", connectorId);\n\n    ConnectorFactory connectorFactory = connectorFactories.get(connectorName);\n    Preconditions.checkArgument(\n        connectorFactory != null, \"No factory for connector %s\", connectorName);\n\n    Connector connector = connectorFactory.create(connectorId, properties);\n    connectors.put(connectorName, connector);\n\n    addConnector(catalogName, connectorId, connector);\n  }\n", "line_num": 15, "charoffset": 8, "length": 40, "error": "connectors.put(connectorName,connector)", "repair": "connectors.put(connectorId,connector)", "task_id": 315, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9743474210054994}, {"buggy": true, "line_num": 17, "prob": 0.0038182971593377565}, {"buggy": true, "line_num": 15, "prob": 0.0006902483675889621}, {"buggy": true, "line_num": 7, "prob": 5.2153435802737715e-05}, {"buggy": true, "line_num": 14, "prob": 1.3013464264037329e-05}, {"buggy": true, "line_num": 2, "prob": 1.1330098478954071e-08}, {"buggy": true, "line_num": 12, "prob": 5.787838578827297e-10}]}
{"project": "fabric8io.fabric8", "commit": "890789d54b538afc7db15e33ead0ab55fc2b41f3", "file_path": "fabric/fabric-zookeeper/src/main/java/org/fusesource/fabric/zookeeper/utils/ZooKeeperUtils.java", "func_code": "  public static void remove(CuratorFramework curator, String path, String value) throws Exception {\n    if (curator.checkExists().forPath(path) != null) {\n      List<String> parts = new LinkedList<String>();\n      String data = getStringData(curator, path);\n      if (data != null) {\n        parts = new ArrayList<String>(Arrays.asList(data.trim().split(\" +\")));\n      }\n      boolean changed = false;\n      StringBuilder sb = new StringBuilder();\n      for (Iterator<String> it = parts.iterator(); it.hasNext(); ) {\n        String v = it.next();\n        if (v.matches(value)) {\n          it.remove();\n          changed = true;\n        }\n      }\n      if (changed) {\n        sb.delete(0, sb.length());\n        for (String part : parts) {\n          if (sb.length() > 0) {\n            sb.append(\" \");\n          }\n          sb.append(part);\n        }\n        setData(curator, path, sb.toString());\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 303, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.975567202291417}, {"buggy": true, "line_num": 24, "prob": 2.5086344911545944e-06}, {"buggy": true, "line_num": 1, "prob": 2.2392493717391236e-06}, {"buggy": true, "line_num": 2, "prob": 9.936589900540606e-07}, {"buggy": true, "line_num": 3, "prob": 1.0771823564280558e-07}]}
{"project": "apache.cxf", "commit": "f64917edc091ac92617776162cceeb875d116f0b", "file_path": "core/src/main/java/org/apache/cxf/common/util/ProxyHelper.java", "func_code": "  private boolean canSeeAllInterfaces(ClassLoader loader, Class<?>[] interfaces) {\n    for (Class<?> currentInterface : interfaces) {\n      String ifName = currentInterface.getName();\n      try {\n        Class<?> ifClass = Class.forName(ifName, true, loader);\n        if (ifClass != currentInterface) {\n          return false;\n        }\n        // we need to check all the params/returns as well as the Proxy creation\n        // will try to create methods for all of this even if they aren't used\n        // by the client and not available in the clients classloader\n        for (Method m : ifClass.getMethods()) {\n          Class<?> returnType = m.getReturnType();\n          if (!returnType.isPrimitive()) {\n            Class.forName(returnType.getName(), true, loader);\n          }\n          for (Class<?> p : m.getParameterTypes()) {\n            if (!returnType.isPrimitive()) {\n              Class.forName(p.getName(), true, loader);\n            }\n          }\n        }\n      } catch (NoClassDefFoundError e) {\n        return false;\n      } catch (ClassNotFoundException e) {\n        return false;\n      }\n    }\n    return true;\n  }\n", "line_num": 17, "charoffset": 29, "length": 24, "error": "returnType.isPrimitive()", "repair": "p.isPrimitive()", "task_id": 181, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.8572876193483341}, {"buggy": false, "line_num": -1, "prob": 0.13728120671451716}, {"buggy": true, "line_num": 17, "prob": 0.004736957397862929}, {"buggy": true, "line_num": 18, "prob": 2.135734631636804e-10}, {"buggy": true, "line_num": 14, "prob": 4.877063774648189e-11}]}
{"project": "looly.hutool", "commit": "38329adb8f2b5ac6933e0dc541281c37babfa5ce", "file_path": "hutool-core/src/main/java/cn/hutool/core/util/NumberUtil.java", "func_code": "  public static int partValue(int total, int partCount, boolean isPlusOneWhenHasRem) {\r\n    int partValue = 0;\r\n    if (total % partCount == 0) {\r\n      total = total / partCount;\r\n    } else {\r\n      partValue = (int) Math.floor(total / partCount);\r\n      if (isPlusOneWhenHasRem) {\r\n        partValue += 1;\r\n      }\r\n    }\r\n    return partValue;\r\n  }\r\n", "line_num": 3, "charoffset": 3, "length": 25, "error": "total=total / partCount", "repair": "partValue=total / partCount", "task_id": 425, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999660850229316}, {"buggy": true, "line_num": 3, "prob": 1.3084912270302249e-12}, {"buggy": true, "line_num": 6, "prob": 8.820068803482737e-13}, {"buggy": true, "line_num": 2, "prob": 7.847649842271085e-13}, {"buggy": true, "line_num": 10, "prob": 3.665764985457984e-13}, {"buggy": true, "line_num": 1, "prob": 2.143239934731752e-13}, {"buggy": true, "line_num": 5, "prob": 6.512780332514358e-14}]}
{"project": "google.guice", "commit": "1e5fc1daab8364f1d16614e9013135a115e66e2c", "file_path": "core/test/com/google/inject/MethodInterceptionTest.java", "func_code": "  public void testInterceptedMethodThrows() throws Exception {\n    Injector injector =\n        Guice.createInjector(\n            new AbstractModule() {\n              protected void configure() {\n                bindInterceptor(Matchers.any(), Matchers.any(), new CountingInterceptor());\n                bindInterceptor(Matchers.any(), Matchers.any(), new CountingInterceptor());\n              }\n            });\n\n    Interceptable interceptable = injector.getInstance(Interceptable.class);\n    try {\n      interceptable.explode();\n      fail();\n    } catch (Exception e) {\n      // validate all causes.\n      for (Throwable t = e; t != null; t = e.getCause()) {\n        StackTraceElement[] stackTraceElement = t.getStackTrace();\n        assertEquals(\"explode\", stackTraceElement[0].getMethodName());\n        assertEquals(\"invoke\", stackTraceElement[1].getMethodName());\n        assertEquals(\"invoke\", stackTraceElement[2].getMethodName());\n        assertEquals(\"testInterceptedMethodThrows\", stackTraceElement[3].getMethodName());\n      }\n    }\n  }\n", "line_num": 16, "charoffset": 43, "length": 12, "error": "e.getCause()", "repair": "t.getCause()", "task_id": 334, "predictions": [{"buggy": true, "line_num": 16, "prob": 0.9030083601423885}, {"buggy": false, "line_num": -1, "prob": 7.700855913326463e-09}, {"buggy": true, "line_num": 17, "prob": 4.288049235347001e-18}, {"buggy": true, "line_num": 20, "prob": 7.518690324823593e-21}, {"buggy": true, "line_num": 12, "prob": 1.5357352290004314e-21}]}
{"project": "journeyapps.zxing-android-embedded", "commit": "d1586bc96cbfa49e058389cc5eb3d1cb04856776", "file_path": "src/com/google/zxing/client/android/ViewfinderView.java", "func_code": "  public void addPossibleResultPoint(ResultPoint point) {\n    List<ResultPoint> points = possibleResultPoints;\n    synchronized (points) {\n      points.add(point);\n      int size = points.size();\n      if (size > MAX_RESULT_POINTS) {\n        // trim it\n        points.subList(0, size - MAX_RESULT_POINTS / 2).clear();\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 376, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999660253511908}, {"buggy": true, "line_num": 1, "prob": 1.1148277667426153e-11}, {"buggy": true, "line_num": 3, "prob": 9.843176865747244e-13}, {"buggy": true, "line_num": 2, "prob": 1.3159214565420324e-13}]}
{"project": "apache.lucene-solr", "commit": "45aef9f26d21b1e09b1a14d35f32afd8ea198481", "file_path": "solr/core/src/java/org/apache/solr/search/facet/FacetRequest.java", "func_code": "  protected void parseCommonParams(Object o) {\n    if (o instanceof Map) {\n      Map<String, Object> m = (Map<String, Object>) o;\n      List<String> excludeTags = getStringList(m, \"excludeTags\");\n      if (excludeTags != null) {\n        getDomain().excludeTags = excludeTags;\n      }\n\n      Map<String, Object> domainMap = (Map<String, Object>) m.get(\"domain\");\n      if (domainMap != null) {\n        excludeTags = getStringList(domainMap, \"excludeTags\");\n        if (excludeTags != null) {\n          getDomain().excludeTags = excludeTags;\n        }\n\n        String blockParent = (String) domainMap.get(\"blockParent\");\n        String blockChildren = (String) domainMap.get(\"blockChildren\");\n\n        if (blockParent != null) {\n          getDomain().toParent = true;\n          getDomain().parents = blockParent;\n        } else if (blockChildren != null) {\n          getDomain().toChildren = true;\n          getDomain().parents = blockChildren;\n        }\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 212, "predictions": [{"buggy": true, "line_num": 10, "prob": 0.9990591326991424}, {"buggy": false, "line_num": -1, "prob": 0.0008877942060838478}, {"buggy": true, "line_num": 19, "prob": 6.4987476944828475e-06}, {"buggy": true, "line_num": 8, "prob": 5.966412993010711e-08}, {"buggy": true, "line_num": 18, "prob": 1.4474116825587673e-09}, {"buggy": true, "line_num": 20, "prob": 6.250534818295927e-10}, {"buggy": true, "line_num": 22, "prob": 6.345355527563512e-11}]}
{"project": "osmandapp.Osmand", "commit": "3b202f03c821915a1e365f7c1303e36d57a1cf32", "file_path": "DataExtractionOSM/src/net/osmand/map/TileSourceManager.java", "func_code": "  private static int parseInt(Map<String, String> attributes, String value, int def) {\n    String val = attributes.get(value);\n    if (val == null) {\n      return def;\n    }\n    try {\n      return Integer.parseInt(value);\n    } catch (NumberFormatException e) {\n      return def;\n    }\n  }\n", "line_num": 6, "charoffset": 10, "length": 23, "error": "Integer.parseInt(value)", "repair": "Integer.parseInt(val)", "task_id": 479, "predictions": [{"buggy": true, "line_num": 1, "prob": 0.5419001815218141}, {"buggy": true, "line_num": 6, "prob": 0.06328443568036349}, {"buggy": false, "line_num": -1, "prob": 0.004102285375364301}, {"buggy": true, "line_num": 2, "prob": 4.387497408842133e-24}]}
{"project": "actorapp.actor-platform", "commit": "b28110170a837292a206fe6844688d12fdbaf299", "file_path": "actor-apps/core-js/src/main/java/im/actor/model/js/JsFacade.java", "func_code": "  public JsPromise findUsers(final String query) {\n    return JsPromise.create(\n        new JsPromiseExecutor() {\n          @Override\n          public void execute() {\n            messenger\n                .findUsers(query)\n                .start(\n                    new CommandCallback<UserVM[]>() {\n                      @Override\n                      public void onResult(UserVM[] users) {\n                        JsArray<JsUser> jsUsers = JsArray.createArray().cast();\n\n                        for (UserVM user : users) {\n                          jsUsers.push(messenger.getJsUser(user.getId()).get());\n                        }\n\n                        resolve(jsUsers);\n                      }\n\n                      @Override\n                      public void onError(Exception e) {\n                        reject(e.getMessage());\n                      }\n                    });\n          }\n        });\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 125, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.3550243737719282}, {"buggy": true, "line_num": 13, "prob": 0.25948509757602634}, {"buggy": true, "line_num": 22, "prob": 0.004005324675096161}, {"buggy": true, "line_num": 14, "prob": 0.00010540770843980797}, {"buggy": true, "line_num": 6, "prob": 3.5565908191547764e-06}, {"buggy": true, "line_num": 5, "prob": 6.171012960987593e-10}]}
{"project": "looly.hutool", "commit": "84b97e15a34b1d61e87f7c65b7a91e1aef7c7612", "file_path": "hutool-json/src/main/java/cn/hutool/json/JSONArray.java", "func_code": "  public boolean addAll(int index, Collection<? extends Object> c) {\r\n    if (CollUtil.isEmpty(c)) {\r\n      return false;\r\n    }\r\n    final ArrayList<Object> list = new ArrayList<>(c.size());\r\n    for (Object object : list) {\r\n      list.add(JSONUtil.wrap(object, ignoreNullValue));\r\n    }\r\n    return rawList.addAll(index, list);\r\n  }\r\n", "line_num": 5, "charoffset": 2, "length": 87, "error": "for (Object object : list) {   list.add(JSONUtil.wrap(object,ignoreNullValue)); } ", "repair": "for (Object object : c) {   list.add(JSONUtil.wrap(object,ignoreNullValue)); } ", "task_id": 424, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9999767547297425}, {"buggy": true, "line_num": 6, "prob": 2.321514256849567e-05}, {"buggy": false, "line_num": -1, "prob": 9.510338581224084e-13}, {"buggy": true, "line_num": 8, "prob": 1.5845640826624432e-20}, {"buggy": true, "line_num": 1, "prob": 1.2475006446541727e-22}]}
{"project": "oracle.graal", "commit": "8b723a476cdd795b80d79c4bb78df4bdf878c4ee", "file_path": "projects/com.oracle.truffle.llvm.nodes/src/com/oracle/truffle/llvm/nodes/asm/LLVMAMD64IncNode.java", "func_code": "  protected long executeI64(VirtualFrame frame, long value) {\n    long result = value + 1;\n    boolean of = result == Long.MAX_VALUE;\n    flags.execute(frame, of, result);\n    return result;\n  }\n", "line_num": 2, "charoffset": 25, "length": 24, "error": "result == Long.MAX_VALUE", "repair": "value == Long.MAX_VALUE", "task_id": 459, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8279258826840358}, {"buggy": true, "line_num": 3, "prob": 0.14081807103569935}, {"buggy": true, "line_num": 2, "prob": 0.009482940587146622}, {"buggy": true, "line_num": 4, "prob": 3.3778936934198073e-12}]}
{"project": "deeplearning4j.deeplearning4j", "commit": "34cd755ff9dca6e77a2c62426755d7c6be5cc215", "file_path": "nd4j-api/src/main/java/org/nd4j/linalg/api/ops/executioner/DefaultOpExecutioner.java", "func_code": "  public INDArray execAndReturn(TransformOp op, int dimension) {\n    for (int i = 0; i < op.x().vectorsAlongDimension(dimension); i++) {\n      Op op2 = op.opForDimension(i, dimension);\n      exec(op2);\n      op.z().vectorAlongDimension(i, dimension).assign(op2.z());\n    }\n    return op.z();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 274, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9354998444542943}, {"buggy": true, "line_num": 1, "prob": 1.079571856115909e-08}, {"buggy": true, "line_num": 2, "prob": 1.3690468389042247e-09}, {"buggy": true, "line_num": 4, "prob": 1.5536066432985105e-10}, {"buggy": true, "line_num": 6, "prob": 3.2441109982183198e-12}, {"buggy": true, "line_num": 3, "prob": 1.6404606040508403e-13}]}
{"project": "linkedin.pinot", "commit": "dbc0654728c6175ba424716acc2dc7bae13f01f6", "file_path": "pinot-controller/src/main/java/com/linkedin/pinot/controller/api/restlet/resources/BasePinotControllerRestletResource.java", "func_code": "  protected static JSONObject getErrorMsgInJson(String errorMsg) {\n    JSONObject errorMsgJson = new JSONObject();\n    errorMsgJson.put(\"ERROR\", errorMsg);\n    return errorMsgJson;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 421, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9977054000444617}, {"buggy": true, "line_num": 3, "prob": 5.153399391355855e-14}, {"buggy": true, "line_num": 2, "prob": 2.763861431697971e-14}]}
{"project": "neo4j.neo4j", "commit": "2e87cf7e8eba0f34f35f89869eabd4815874d607", "file_path": "packaging/src/main/java/org/neo4j/examples/server/CreateSimpleGraph.java", "func_code": "  public static void main(String[] args) throws URISyntaxException {\n    checkDatabaseIsRunning();\n\n    // START SNIPPET: nodesAndProps\n    URI firstNode = createNode();\n    addProperty(firstNode, \"name\", \"Joe Strummer\");\n    URI secondNode = createNode();\n    addProperty(secondNode, \"band\", \"The Clash\");\n    // END SNIPPET: nodesAndProps\n\n    // START SNIPPET: addRel\n    URI relationshipUri =\n        addRelationship(\n            firstNode, secondNode, \"singer\", \"{ \\\"from\\\" : \\\"1976\\\", \\\"until\\\" : \\\"1986\\\" }\");\n    // END SNIPPET: addRel\n\n    // START SNIPPET: addMetaToRel\n    addMetadataToProperty(relationshipUri, \"stars\", \"5\");\n    // END SNIPPET: addMetaToRel\n\n    // START SNIPPET: queryForSingers\n    findSingersInBands(firstNode);\n    // END SNIPPET: queryForSingers\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 438, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8515703305853566}, {"buggy": true, "line_num": 21, "prob": 0.14842834326575685}, {"buggy": true, "line_num": 13, "prob": 3.0382403972383133e-15}, {"buggy": true, "line_num": 5, "prob": 6.056049469973221e-19}, {"buggy": true, "line_num": 17, "prob": 4.770650664102133e-19}]}
{"project": "apache.drill", "commit": "0049f17331462e0c7940bb5b5b79eab8e75d2a86", "file_path": "contrib/storage-hive/core/src/main/java/org/apache/drill/exec/store/hive/HiveMetadataProvider.java", "func_code": "  private HiveStats getStatsFromProps(final Properties properties) {\n    long numRows = -1;\n    long sizeInBytes = -1;\n    try {\n      final String numRowsProp = properties.getProperty(StatsSetupConst.ROW_COUNT);\n      if (numRowsProp != null) {\n        numRows = Long.valueOf(numRowsProp);\n      }\n\n      final String sizeInBytesProp = properties.getProperty(StatsSetupConst.TOTAL_SIZE);\n      if (sizeInBytesProp != null) {\n        sizeInBytes = Long.valueOf(sizeInBytesProp);\n      }\n    } catch (final NumberFormatException e) {\n      logger.error(\"Failed to parse Hive stats in metastore.\", e);\n      // continue with the defaults.\n    }\n\n    return new HiveStats(numRows, sizeInBytes);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 188, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9892072410484284}, {"buggy": true, "line_num": 11, "prob": 1.4220787346634486e-07}, {"buggy": true, "line_num": 14, "prob": 5.168855228438104e-10}, {"buggy": true, "line_num": 6, "prob": 1.5754242643466664e-12}, {"buggy": true, "line_num": 10, "prob": 3.3215543084241545e-13}]}
{"project": "apache.cxf", "commit": "dd2ad753ca0980a3f83347016adff97aee5c09c2", "file_path": "rt/rs/security/oauth-parent/oauth2-saml/src/main/java/org/apache/cxf/rs/security/oauth2/grants/saml/Saml2BearerGrantHandler.java", "func_code": "  protected UserSubject getGrantSubject(Message message, SamlAssertionWrapper wrapper) {\n    SecurityContext sc = scProvider.getSecurityContext(message, wrapper);\n    if (sc instanceof SAMLSecurityContext) {\n      SAMLSecurityContext jaxrsSc = (SAMLSecurityContext) sc;\n      Set<Principal> rolesP = jaxrsSc.getUserRoles();\n      List<String> roles = new ArrayList<>();\n      if (roles != null) {\n        for (Principal p : rolesP) {\n          roles.add(p.getName());\n        }\n      }\n      return new SamlUserSubject(jaxrsSc.getUserPrincipal().getName(), roles, jaxrsSc.getClaims());\n    }\n    return new UserSubject(sc.getUserPrincipal().getName());\n  }\n", "line_num": 6, "charoffset": 16, "length": 13, "error": "roles != null", "repair": "rolesP != null", "task_id": 178, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.9998238682753608}, {"buggy": false, "line_num": -1, "prob": 5.628459134740205e-13}, {"buggy": true, "line_num": 13, "prob": 4.163693471321613e-16}, {"buggy": true, "line_num": 3, "prob": 5.88642361231052e-21}, {"buggy": true, "line_num": 11, "prob": 3.583567421474569e-24}, {"buggy": true, "line_num": 8, "prob": 3.1448867771412644e-24}, {"buggy": true, "line_num": 2, "prob": 2.8063330244989744e-24}]}
{"project": "JetBrains.intellij-community", "commit": "287e3efe94f650da39ab910c85d46a81083c0ea8", "file_path": "java/java-impl/src/com/intellij/codeInsight/intention/impl/BreakStringOnLineBreaksIntentionAction.java", "func_code": "  public boolean isAvailable(@NotNull Project project, Editor editor, @NotNull PsiElement element) {\n    if (!(element instanceof PsiJavaToken)) {\n      return false;\n    }\n\n    final PsiJavaToken token = (PsiJavaToken) element;\n\n    if (token.getTokenType() != JavaTokenType.STRING_LITERAL) {\n      return false;\n    }\n\n    final String text = token.getText();\n    if (text == null) {\n      return false;\n    }\n\n    final int indexOfSlashN = text.indexOf(\"\\\\n\");\n    final int indexOfSlashNSlashR = text.indexOf(\"\\\\n\\\\r\");\n\n    if (indexOfSlashN == -1\n        || Comparing.equal(text.substring(indexOfSlashN, text.length()), \"\\\\n\\\"\")) {\n      return false;\n    }\n\n    if (indexOfSlashNSlashR != -1\n        && Comparing.equal(text.substring(indexOfSlashNSlashR, text.length()), \"\\\\n\\\\r\\\"\")) {\n      return false;\n    }\n\n    return true;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 55, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7461119365379889}, {"buggy": true, "line_num": 25, "prob": 7.570775840848406e-08}, {"buggy": true, "line_num": 19, "prob": 2.8644953598349897e-09}, {"buggy": true, "line_num": 20, "prob": 1.8062183493716694e-09}, {"buggy": true, "line_num": 5, "prob": 1.82455854893808e-10}, {"buggy": true, "line_num": 1, "prob": 1.8385732085499255e-11}, {"buggy": true, "line_num": 16, "prob": 1.0726000461790367e-11}]}
{"project": "pxb1988.dex2jar", "commit": "f3333b3e7bacb0d5b76d487a73dfe52eeb01536b", "file_path": "dex-reader-api/src/main/java/com/googlecode/d2j/node/DexAnnotationNode.java", "func_code": "  public void accept(DexAnnotationAble av) {\r\n    DexAnnotationVisitor av1 = av.visitAnnotation(type, visibility);\r\n    if (av != null) {\r\n      for (Item item : items) {\r\n        acceptAnnotationItem(av1, item.name, item.value);\r\n      }\r\n      av1.visitEnd();\r\n    }\r\n  }\r\n", "line_num": 2, "charoffset": 12, "length": 10, "error": "av != null", "repair": "av1 != null", "task_id": 486, "predictions": [{"buggy": true, "line_num": 2, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 2.8297337321967927e-14}, {"buggy": true, "line_num": 1, "prob": 6.918343610007402e-17}, {"buggy": true, "line_num": 6, "prob": 2.7907041314111568e-24}, {"buggy": true, "line_num": 4, "prob": 5.880368383794628e-27}, {"buggy": true, "line_num": 3, "prob": 5.384714246363848e-28}]}
{"project": "nicolasgramlich.AndEngine", "commit": "25cb58c88059c219f8f5c36eebd13c5953243bdc", "file_path": "src/org/anddev/andengine/engine/FixedStepEngine.java", "func_code": "  public void onUpdate(final float pSecondsElapsed) {\r\n    this.mSecondsElapsedAccumulator += pSecondsElapsed;\r\n\r\n    final float stepLength = this.mStepLength;\r\n    while (this.mSecondsElapsedAccumulator >= stepLength) {\r\n      super.onUpdate(pSecondsElapsed);\r\n      this.mSecondsElapsedAccumulator -= stepLength;\r\n    }\r\n  }\r\n", "line_num": 5, "charoffset": 3, "length": 31, "error": "super.onUpdate(pSecondsElapsed)", "repair": "super.onUpdate(stepLength)", "task_id": 443, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999043345447897}, {"buggy": true, "line_num": 3, "prob": 4.224770280491832e-09}, {"buggy": true, "line_num": 6, "prob": 2.635370801136825e-09}, {"buggy": true, "line_num": 4, "prob": 1.2188259441950864e-10}, {"buggy": true, "line_num": 5, "prob": 4.8466753342096745e-11}, {"buggy": true, "line_num": 1, "prob": 8.078650784916304e-13}]}
{"project": "hazelcast.hazelcast", "commit": "5703c62d3fdc8cd660e661ef1de9cd21b7a33bf3", "file_path": "hazelcast/src/test/java/com/hazelcast/map/impl/nearcache/MapNearCacheSerializationCountTest.java", "func_code": "  protected <K, V> NearCacheTestContext<K, V, Data, String> createContext() {\n    Config configWithNearCache = getConfig(true);\n    Config config = getConfig(false);\n\n    HazelcastInstance nearCacheMember = hazelcastFactory.newHazelcastInstance(configWithNearCache);\n    HazelcastInstance dataMember = hazelcastFactory.newHazelcastInstance(config);\n\n    IMap<K, V> nearCacheMap = nearCacheMember.getMap(DEFAULT_NEAR_CACHE_NAME);\n    IMap<K, V> dataMap = dataMember.getMap(DEFAULT_NEAR_CACHE_NAME);\n\n    NearCacheManager nearCacheManager = getMapNearCacheManager(nearCacheMember);\n    NearCache<Data, String> nearCache = nearCacheManager.getNearCache(DEFAULT_NEAR_CACHE_NAME);\n\n    return new NearCacheTestContextBuilder<K, V, Data, String>(\n            nearCacheConfig, getSerializationService(dataMember))\n        .setNearCacheInstance(nearCacheMember)\n        .setDataInstance(dataMember)\n        .setNearCacheAdapter(new IMapDataStructureAdapter<K, V>(nearCacheMap))\n        .setDataAdapter(new IMapDataStructureAdapter<K, V>(dataMap))\n        .setNearCache(nearCache)\n        .setNearCacheManager(nearCacheManager)\n        .setHasLocalData(true)\n        .build();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 353, "predictions": [{"buggy": true, "line_num": 16, "prob": 0.9192441192279401}, {"buggy": true, "line_num": 11, "prob": 0.04250760689937946}, {"buggy": true, "line_num": 20, "prob": 0.0023009299543437036}, {"buggy": false, "line_num": -1, "prob": 0.0001091189844616477}, {"buggy": true, "line_num": 14, "prob": 1.5503557874848772e-07}, {"buggy": true, "line_num": 15, "prob": 1.1238416688320666e-07}]}
{"project": "reactor.reactor-core", "commit": "d0cea73e3c637ae61a614d826221677499a8ccb0", "file_path": "src/main/java/reactor/core/publisher/Operators.java", "func_code": "  public static <F> boolean setOnce(\n      AtomicReferenceFieldUpdater<F, Subscription> field, F instance, Subscription s) {\n    Subscription a = field.get(instance);\n    if (a == CancelledSubscription.INSTANCE) {\n      s.cancel();\n      return false;\n    }\n    if (a != null) {\n      s.cancel();\n      reportSubscriptionSet();\n      return false;\n    }\n\n    if (field.compareAndSet(instance, null, s)) {\n      return true;\n    }\n\n    a = field.get(instance);\n\n    if (a == CancelledSubscription.INSTANCE) {\n      s.cancel();\n      return false;\n    }\n\n    s.cancel();\n    reportSubscriptionSet();\n    return false;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 494, "predictions": [{"buggy": true, "line_num": 13, "prob": 0.9994019294824151}, {"buggy": false, "line_num": -1, "prob": 0.0005391933123433286}, {"buggy": true, "line_num": 24, "prob": 9.746725466306659e-12}, {"buggy": true, "line_num": 20, "prob": 1.8426270898263507e-12}, {"buggy": true, "line_num": 7, "prob": 3.856246546726123e-13}, {"buggy": true, "line_num": 2, "prob": 3.5911738560483406e-14}, {"buggy": true, "line_num": 17, "prob": 2.4250436034735765e-14}, {"buggy": true, "line_num": 4, "prob": 1.3728558468705644e-14}, {"buggy": true, "line_num": 8, "prob": 5.840365574193229e-15}, {"buggy": true, "line_num": 3, "prob": 2.5644531177845635e-16}]}
{"project": "unclebob.fitnesse", "commit": "6c09f4669b244cd5f5921da965ba98bb2c1d19a2", "file_path": "src/fitnesse/testsystems/slim/tables/DecisionTable.java", "func_code": "  private SlimAssertion callFunctionInRow(String functionName, int row) {\n    int col = funcStore.getColumnNumber(functionName);\n    String name = Disgracer.disgraceMethodName(functionName);\n    String assignedSymbol = ifSymbolAssignment(col, row);\n    SlimAssertion assertion;\n    if (assignedSymbol != null) {\n      assertion =\n          makeAssertion(\n              callAndAssign(assignedSymbol, \"scriptTable\" + \"Actor\", \"cloneSymbol\", \"$\" + name),\n              new ReturnedSymbolExpectation(col, row, name, assignedSymbol));\n    } else {\n      assertion =\n          makeAssertion(\n              Instruction.NOOP_INSTRUCTION, new ReturnedSymbolExpectation(col, row, name));\n    }\n    return assertion;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 521, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9847404050695556}, {"buggy": true, "line_num": 13, "prob": 1.893438728132917e-07}, {"buggy": true, "line_num": 8, "prob": 1.8438437551620208e-08}, {"buggy": true, "line_num": 3, "prob": 6.439081713483012e-09}, {"buggy": true, "line_num": 9, "prob": 2.038380318863115e-09}, {"buggy": true, "line_num": 1, "prob": 7.315668814887914e-12}, {"buggy": true, "line_num": 2, "prob": 3.908013139088142e-12}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "b07ce17328be90d61cde67e5ed43dd23f0c2fdd3", "file_path": "packages/SystemUI/src/com/android/systemui/BatteryMeterView.java", "func_code": "  public void setDarkIntensity(float darkIntensity) {\n    int backgroundColor = getBackgroundColor(darkIntensity);\n    int fillColor = getFillColor(darkIntensity);\n    mIconTint = fillColor;\n    mFramePaint.setColor(backgroundColor);\n    mBoltPaint.setColor(fillColor);\n    mChargeColor = fillColor;\n    invalidate();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 148, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9957621119599651}, {"buggy": true, "line_num": 6, "prob": 4.1305184212558944e-07}, {"buggy": true, "line_num": 2, "prob": 1.9464770376136937e-08}, {"buggy": true, "line_num": 5, "prob": 1.8899649367424706e-08}, {"buggy": true, "line_num": 3, "prob": 1.4535257479471033e-09}, {"buggy": true, "line_num": 4, "prob": 6.414910384451743e-12}, {"buggy": true, "line_num": 1, "prob": 5.080381205636523e-13}]}
{"project": "dangdangdotcom.sharding-jdbc", "commit": "d6c9b15cd12ffdd6025fddedbc18a36fa18cd109", "file_path": "sharding-core/src/main/java/io/shardingsphere/core/parsing/antler/phrase/visitor/ModifyColumnVisitor.java", "func_code": "  public void visit(final ParserRuleContext ancestorNode, final SQLStatement statement) {\n    AlterTableStatement alterStatement = (AlterTableStatement) statement;\n\n    List<ParserRuleContext> modifyColumnCtxs =\n        TreeUtils.getAllDescendantByRuleName(ancestorNode, RuleNameConstants.MODIFY_COLUMN);\n    if (null == modifyColumnCtxs) {\n      return;\n    }\n\n    for (ParserRuleContext each : modifyColumnCtxs) {\n      // it`s not columndefinition, but can call this method\n      ColumnDefinition column = VisitorUtils.visitColumnDefinition(each);\n      if (null != column) {\n        alterStatement.getUpdateColumns().put(column.getName(), column);\n        postVisitColumnDefinition(ancestorNode, statement, column.getName());\n      }\n    }\n  }\n", "line_num": 14, "charoffset": 16, "length": 68, "error": "postVisitColumnDefinition(ancestorNode,statement,column.getName())", "repair": "postVisitColumnDefinition(each,statement,column.getName())", "task_id": 261, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.9968081115646628}, {"buggy": false, "line_num": -1, "prob": 1.1817514926116934e-08}, {"buggy": true, "line_num": 1, "prob": 1.5024603242366713e-16}, {"buggy": true, "line_num": 4, "prob": 7.223265420695629e-21}, {"buggy": true, "line_num": 13, "prob": 4.701792759891326e-21}]}
{"project": "liferay.liferay-portal", "commit": "ea90c0cc7779fb3f04ca5bbaf6a0977e05c0d2b4", "file_path": "portal-impl/test/integration/com/liferay/portlet/polls/lar/PollsVoteStagedModelDataHandlerTest.java", "func_code": "  protected void validateImport(\n      Map<String, List<StagedModel>> dependentStagedModelsMap, Group group) throws Exception {\n\n    List<StagedModel> questions = dependentStagedModelsMap.get(PollsQuestion.class.getName());\n\n    Assert.assertEquals(1, questions.size());\n\n    PollsQuestion question = (PollsQuestion) questions.get(0);\n\n    PollsQuestionLocalServiceUtil.getPollsQuestionByUuidAndGroupId(\n        question.getUuid(), group.getGroupId());\n\n    List<StagedModel> choices = dependentStagedModelsMap.get(PollsChoice.class.getName());\n\n    Assert.assertEquals(1, questions.size());\n\n    PollsChoice choice = (PollsChoice) choices.get(0);\n\n    PollsChoiceLocalServiceUtil.getPollsChoiceByUuidAndGroupId(\n        choice.getUuid(), group.getGroupId());\n  }\n", "line_num": 14, "charoffset": 25, "length": 16, "error": "questions.size()", "repair": "choices.size()", "task_id": 415, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9539641136257853}, {"buggy": true, "line_num": 12, "prob": 9.522991460375687e-09}, {"buggy": true, "line_num": 19, "prob": 4.2505215820475825e-09}, {"buggy": true, "line_num": 3, "prob": 9.256700281180184e-11}, {"buggy": true, "line_num": 9, "prob": 5.479081055113313e-11}, {"buggy": true, "line_num": 10, "prob": 4.846940960126474e-12}, {"buggy": true, "line_num": 18, "prob": 4.485741001307766e-12}, {"buggy": true, "line_num": 14, "prob": 1.6999344196945473e-12}, {"buggy": true, "line_num": 1, "prob": 1.6830386651292302e-12}]}
{"project": "gradle.gradle", "commit": "76be0ab9c93b908ad840ab4517380b304a7854c1", "file_path": "subprojects/ide-native/src/integTest/groovy/org/gradle/ide/visualstudio/fixtures/MSBuildExecutor.java", "func_code": "  public List<ExecutionResult> succeeds(MSBuildAction action) {\n    withArgument(toTargetArgument(action));\n    ExecOutput result = findMSBuild().execute(args, buildEnvironment(workingDir));\n    System.out.println(result.getOut());\n    String output = trimLines(result.getOut());\n    String error = trimLines(result.getError());\n    List<ExecutionResult> results = new ArrayList<ExecutionResult>();\n    int first = output.indexOf(SEPARATOR);\n    if (first < 0) {\n      return Collections.emptyList();\n    }\n    output = output.substring(first + SEPARATOR.length());\n    while (output.length() > 0) {\n      int next = output.indexOf(SEPARATOR);\n      if (next < 0) {\n        results.add(OutputScrapingExecutionResult.from(output, error));\n        output = \"\";\n      } else {\n        results.add(OutputScrapingExecutionResult.from(output.substring(0, next), error));\n        output = output.substring(next + SEPARATOR.length());\n      }\n      error = \"\";\n    }\n    return results;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 339, "predictions": [{"buggy": true, "line_num": 2, "prob": 0.8664620379861971}, {"buggy": false, "line_num": -1, "prob": 3.135362189181184e-10}, {"buggy": true, "line_num": 12, "prob": 1.0482858089462294e-17}, {"buggy": true, "line_num": 21, "prob": 1.6695402947996155e-19}]}
{"project": "JetBrains.intellij-community", "commit": "660717544749044a024bad7b12aa5ac3bafec12a", "file_path": "jps/model-serialization/src/org/jetbrains/jps/model/serialization/PathMacroUtil.java", "func_code": "  public static String getModuleDir(@NotNull String moduleFilePath) {\n    String moduleDir = PathUtilRt.getParentPath(moduleFilePath);\n    if (StringUtil.isEmpty(moduleDir)) {\n      return null;\n    }\n\n    // hack so that, if a module is stored inside the .idea directory, the base directory\n    // rather than the .idea directory itself is considered the module root\n    // (so that a Ruby IDE project doesn't break if its directory is moved together with the .idea\n    // directory)\n    String moduleDirParent = PathUtilRt.getParentPath(moduleDir);\n    if (!StringUtil.isEmpty(moduleDirParent)\n        && PathUtilRt.getFileName(moduleDir).equals(DIRECTORY_STORE_NAME)) {\n      moduleDir = moduleDirParent;\n    }\n    moduleDir = toSystemIndependentName(moduleDir);\n    if (moduleDir.endsWith(\":/\")) {\n      moduleDir = moduleDir.substring(0, moduleDir.length() - 1);\n    }\n    return moduleDir;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 39, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9448189881880196}, {"buggy": true, "line_num": 15, "prob": 0.026385557617370357}, {"buggy": true, "line_num": 12, "prob": 1.9054649605359285e-07}, {"buggy": true, "line_num": 10, "prob": 2.957021416398379e-08}, {"buggy": true, "line_num": 16, "prob": 6.14031032840778e-10}, {"buggy": true, "line_num": 17, "prob": 5.573365767832153e-10}, {"buggy": true, "line_num": 13, "prob": 5.518173811506512e-13}, {"buggy": true, "line_num": 1, "prob": 4.6388579438972596e-14}, {"buggy": true, "line_num": 2, "prob": 3.8900641418390766e-14}]}
{"project": "liferay.liferay-portal", "commit": "58df139c3e7c3ee82505bcaa74e28fdb3e682485", "file_path": "modules/util/sync-engine/src/com/liferay/sync/engine/util/IODeltaUtil.java", "func_code": "  public static Path copyChecksums(SyncFile sourceSyncFile, SyncFile targetSyncFile) {\n\n    try {\n      Path sourceChecksumsFilePath = getChecksumsFilePath(sourceSyncFile);\n\n      if (Files.notExists(sourceChecksumsFilePath)) {\n        checksums(sourceSyncFile);\n      }\n\n      Path targetChecksumsFilePath = getChecksumsFilePath(targetSyncFile);\n\n      Files.copy(\n          sourceChecksumsFilePath, targetChecksumsFilePath, StandardCopyOption.REPLACE_EXISTING);\n\n      return targetChecksumsFilePath;\n    } catch (IOException ioe) {\n      _logger.error(ioe.getMessage(), ioe);\n\n      return null;\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 408, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.9995038587463098}, {"buggy": false, "line_num": -1, "prob": 0.0004701954499739428}, {"buggy": true, "line_num": 16, "prob": 3.090703987000865e-15}, {"buggy": true, "line_num": 14, "prob": 5.230596082171827e-16}, {"buggy": true, "line_num": 9, "prob": 2.4240884906830216e-16}, {"buggy": true, "line_num": 12, "prob": 1.155995409456636e-16}, {"buggy": true, "line_num": 3, "prob": 8.118161777192369e-17}, {"buggy": true, "line_num": 5, "prob": 4.2148773837356636e-17}]}
{"project": "liferay.liferay-portal", "commit": "dc331213ff48283d184eca091290e0e11fb751ca", "file_path": "portal-impl/src/com/liferay/portal/deploy/hot/HookHotDeployListener.java", "func_code": "  protected void initFormNavigatorEntry(\n      String servletContextName,\n      Properties portalProperties,\n      String portalPropertiesKey,\n      String categoryKey,\n      String formNavigatorId,\n      String jspPath) {\n\n    String[] formNavigatorSections =\n        StringUtil.split(portalProperties.getProperty(portalPropertiesKey));\n\n    for (int i = 0; i < formNavigatorSections.length; i++) {\n      String formNavigatorSection = formNavigatorSections[i];\n\n      FormNavigatorEntry<Object> deprecatedFormNavigatorEntry =\n          new DeprecatedFormNavigatorEntry(\n              formNavigatorSection,\n              formNavigatorSection,\n              categoryKey,\n              formNavigatorId,\n              \"/html/portlet/\" + jspPath + \"/\" + formNavigatorSection + \".jsp\");\n\n      registerService(\n          servletContextName,\n          formNavigatorId + categoryKey + formNavigatorSection,\n          FormNavigatorEntry.class,\n          deprecatedFormNavigatorEntry,\n          \"service.ranking\",\n          -i);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 410, "predictions": [{"buggy": true, "line_num": 24, "prob": 0.9997696402220918}, {"buggy": true, "line_num": 19, "prob": 3.520927783036114e-05}, {"buggy": false, "line_num": -1, "prob": 2.1903632703396104e-07}]}
{"project": "liferay.liferay-portal", "commit": "1d734241605deda9bc0711ba25fba07cc0591050", "file_path": "modules/sdk/gradle-plugins/src/main/java/com/liferay/gradle/plugins/LiferayDefaultsPlugin.java", "func_code": "  protected void configureTaskUploadArchives(\n      Project project, ReplaceRegexTask updateFileVersionsTask) {\n\n    String version = String.valueOf(project.getVersion());\n\n    if (version.endsWith(_SNAPSHOT_VERSION_SUFFIX)) {\n      return;\n    }\n\n    Task uploadArchivesTask = GradleUtil.getTask(project, BasePlugin.UPLOAD_ARCHIVES_TASK_NAME);\n\n    TaskContainer taskContainer = project.getTasks();\n\n    TaskCollection<PublishNodeModuleTask> publishNodeModuleTasks =\n        taskContainer.withType(PublishNodeModuleTask.class);\n\n    uploadArchivesTask.dependsOn(publishNodeModuleTasks);\n\n    Task updateBundleVersionTask = taskContainer.findByName(UPDATE_BUNDLE_VERSION_TASK_NAME);\n\n    if (updateBundleVersionTask != null) {\n      uploadArchivesTask.finalizedBy(updateBundleVersionTask);\n    }\n\n    uploadArchivesTask.finalizedBy(updateBundleVersionTask);\n  }\n", "line_num": 24, "charoffset": 2, "length": 55, "error": "uploadArchivesTask.finalizedBy(updateBundleVersionTask)", "repair": "uploadArchivesTask.finalizedBy(updateFileVersionsTask)", "task_id": 405, "predictions": [{"buggy": true, "line_num": 24, "prob": 0.9817199425582108}, {"buggy": true, "line_num": 11, "prob": 3.43493382967796e-05}, {"buggy": false, "line_num": -1, "prob": 2.0793361177089492e-10}, {"buggy": true, "line_num": 9, "prob": 5.231322429839456e-13}, {"buggy": true, "line_num": 3, "prob": 1.0529751049826763e-13}, {"buggy": true, "line_num": 20, "prob": 3.3669355131077908e-18}, {"buggy": true, "line_num": 5, "prob": 3.2834999412490355e-18}, {"buggy": true, "line_num": 21, "prob": 4.493509030369026e-19}]}
{"project": "gitblit.gitblit", "commit": "bca8c5c52554b6aac65b8e2300675ae8f6af1d6d", "file_path": "src/main/java/com/gitblit/wicket/pages/RepositoryPage.java", "func_code": "  protected void addFullText(String wicketId, String text, boolean substituteRegex) {\r\n    String html = StringUtils.escapeForHtml(text, false);\r\n    if (substituteRegex) {\r\n      html = GitBlit.self().processCommitMessage(repositoryName, html);\r\n    } else {\r\n      html = StringUtils.breakLinesForHtml(html);\r\n    }\r\n    add(new Label(wicketId, html).setEscapeModelStrings(false));\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 324, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9529476771555749}, {"buggy": false, "line_num": -1, "prob": 0.04618093816145516}, {"buggy": true, "line_num": 3, "prob": 9.669256441909581e-15}, {"buggy": true, "line_num": 1, "prob": 4.476321759881021e-16}, {"buggy": true, "line_num": 7, "prob": 6.649068860049403e-17}]}
{"project": "apache.groovy", "commit": "4d3a020b5cd8b9549498716e48f45c1b79ab8e99", "file_path": "src/main/org/codehaus/groovy/runtime/MetaClassHelper.java", "func_code": "  private static int getMaximumInterfaceDistance(Class c, Class interfaceClass) {\n    if (c == interfaceClass) return 0;\n    Class[] interfaces = c.getInterfaces();\n    int max = 0;\n    for (int i = 0; i < interfaces.length; i++) {\n      int sub = 0;\n      if (interfaces[i].isAssignableFrom(c)) {\n        sub = 1 + getMaximumInterfaceDistance(interfaces[i], interfaceClass);\n      }\n      max = Math.max(max, sub);\n    }\n    return max;\n  }\n", "line_num": 6, "charoffset": 16, "length": 33, "error": "interfaces[i].isAssignableFrom(c)", "repair": "interfaces[i].isAssignableFrom(interfaceClass)", "task_id": 198, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6570352166913392}, {"buggy": true, "line_num": 6, "prob": 0.2415125534538641}, {"buggy": true, "line_num": 2, "prob": 5.961235054973395e-05}, {"buggy": true, "line_num": 7, "prob": 1.8324080931985466e-11}, {"buggy": true, "line_num": 1, "prob": 8.079143881677216e-13}, {"buggy": true, "line_num": 9, "prob": 6.103030796619591e-13}]}
{"project": "jMonkeyEngine.jmonkeyengine", "commit": "1871d02b7d63360b983cc0e4d7d08a4213f5d67f", "file_path": "engine/src/networking/com/jme3/network/Network.java", "func_code": "  public void connectToServer(InetAddress address, int port, int remoteUdpPort, int localUdpPort)\n      throws IOException {\n    UdpConnector fast = new UdpConnector(localUdpPort, address, port);\n    SocketConnector reliable = new SocketConnector(address, port);\n\n    setConnectors(reliable, fast);\n  }\n", "line_num": 2, "charoffset": 32, "length": 47, "error": "new UdpConnector(localUdpPort,address,port)", "repair": "new UdpConnector(localUdpPort,address,remoteUdpPort)", "task_id": 371, "predictions": [{"buggy": true, "line_num": 2, "prob": 0.9999743706604208}, {"buggy": false, "line_num": -1, "prob": 1.6931273347403266e-05}, {"buggy": true, "line_num": 3, "prob": 6.828299237771387e-06}, {"buggy": true, "line_num": 5, "prob": 1.5769891835905798e-10}]}
{"project": "JetBrains.intellij-community", "commit": "8d1c08558be3e841a2e33be7b0a5e81a4f8803df", "file_path": "java/java-psi-impl/src/com/intellij/codeInsight/BaseExternalAnnotationsManager.java", "func_code": "  private List<AnnotationData> doCollect(\n      @NotNull PsiModifierListOwner listOwner, boolean onlyWritable) {\n    final List<PsiFile> files = findExternalAnnotationsFiles(listOwner);\n    if (files == null) {\n      return NO_DATA;\n    }\n    SmartList<AnnotationData> result = new SmartList<AnnotationData>();\n    String externalName = getExternalName(listOwner, false);\n    if (externalName == null) return NO_DATA;\n    String oldExternalName = getNormalizedExternalName(listOwner);\n\n    for (PsiFile file : files) {\n      if (!file.isValid()) continue;\n      if (onlyWritable && !file.isWritable()) continue;\n\n      MostlySingularMultiMap<String, AnnotationData> fileData = getDataFromFile(file);\n\n      addAnnotations(result, externalName, file, fileData);\n      if (oldExternalName != null && !externalName.equals(oldExternalName)) {\n        addAnnotations(result, oldExternalName, file, fileData);\n      }\n    }\n    if (result.isEmpty()) {\n      return NO_DATA;\n    }\n    result.trimToSize();\n    return result;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 51, "predictions": [{"buggy": true, "line_num": 18, "prob": 0.9979181572052263}, {"buggy": false, "line_num": -1, "prob": 0.0017714978087502384}, {"buggy": true, "line_num": 17, "prob": 2.0837642611191507e-05}, {"buggy": true, "line_num": 7, "prob": 2.9705119360930014e-10}]}
{"project": "wildfly.wildfly", "commit": "ff8365f5f88d35c25c9d025d03ee4e291a473d8f", "file_path": "controller/src/main/java/org/jboss/as/controller/NewModelControllerImpl.java", "func_code": "  public ModelNode execute(\n      final ModelNode operation,\n      final OperationMessageHandler handler,\n      final OperationTransactionControl control,\n      final OperationAttachments attachments) {\n    final ModelNode headers =\n        operation.has(OPERATION_HEADERS) ? operation.get(OPERATION_HEADERS) : null;\n    final boolean rollbackOnFailure =\n        headers == null\n            || !headers.hasDefined(ROLLBACK_ON_RUNTIME_FAILURE)\n            || headers.get(ROLLBACK_ON_RUNTIME_FAILURE).asBoolean();\n    final EnumSet<NewOperationContextImpl.ContextFlag> contextFlags =\n        rollbackOnFailure\n            ? EnumSet.of(NewOperationContextImpl.ContextFlag.ROLLBACK_ON_FAIL)\n            : EnumSet.noneOf(NewOperationContextImpl.ContextFlag.class);\n    NewOperationContextImpl context =\n        new NewOperationContextImpl(\n            this,\n            controllerType,\n            contextFlags,\n            handler,\n            attachments,\n            modelReference.get(),\n            control,\n            processState,\n            bootingFlag.get());\n    ModelNode response = new ModelNode();\n    context.addStep(response, operation, prepareStep, NewOperationContext.Stage.MODEL);\n    RB_ON_RT_FAILURE.set(Boolean.valueOf(rollbackOnFailure));\n    try {\n      context.completeStep();\n    } finally {\n      RB_ON_RT_FAILURE.set(null);\n    }\n    ControlledProcessState.State state = processState.getState();\n    switch (state) {\n      case RELOAD_REQUIRED:\n      case RESTART_REQUIRED:\n        response.get(RESPONSE_HEADERS, PROCESS_STATE).set(state.toString());\n        break;\n      default:\n        break;\n    }\n    return response;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 536, "predictions": [{"buggy": true, "line_num": 27, "prob": 0.6471919077812635}, {"buggy": true, "line_num": 6, "prob": 0.2127500611297356}, {"buggy": true, "line_num": 38, "prob": 0.04232192206072391}, {"buggy": false, "line_num": -1, "prob": 0.0200785589779879}, {"buggy": true, "line_num": 18, "prob": 0.018742486479725845}, {"buggy": true, "line_num": 28, "prob": 1.9647148815260804e-06}]}
{"project": "facebook.react-native", "commit": "fffcb9c88a9aec69125b138cb540d9dc8d7846c8", "file_path": "ReactAndroid/src/main/java/com/facebook/react/modules/camera/ImageEditingManager.java", "func_code": "  private static File createTempFile(Context context, @Nullable String mimeType)\n      throws IOException {\n    File externalCacheDir = context.getExternalCacheDir();\n    File internalCacheDir = context.getCacheDir();\n    File cacheDir;\n    if (externalCacheDir == null && internalCacheDir == null) {\n      throw new IOException(\"No cache directory available\");\n    }\n    if (externalCacheDir == null) {\n      cacheDir = internalCacheDir;\n    } else if (internalCacheDir == null) {\n      cacheDir = externalCacheDir;\n    } else {\n      cacheDir =\n          externalCacheDir.getFreeSpace() > internalCacheDir.getFreeSpace()\n              ? externalCacheDir\n              : internalCacheDir;\n    }\n    return File.createTempFile(TEMP_FILE_PREFIX, getFileExtensionForType(mimeType), cacheDir);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 316, "predictions": [{"buggy": true, "line_num": 8, "prob": 0.9372239524623902}, {"buggy": false, "line_num": -1, "prob": 0.05572426486561579}, {"buggy": true, "line_num": 18, "prob": 1.7620651180909865e-11}, {"buggy": true, "line_num": 10, "prob": 1.257303940968977e-11}, {"buggy": true, "line_num": 3, "prob": 7.86712164961686e-12}, {"buggy": true, "line_num": 9, "prob": 5.926771304940175e-12}, {"buggy": true, "line_num": 5, "prob": 9.770614854774126e-14}, {"buggy": true, "line_num": 15, "prob": 4.643257444746696e-14}]}
{"project": "SpringSource.spring-framework", "commit": "9528c3532d4bb7eb62514418e32c0c5687722564", "file_path": "spring-webflux/src/main/java/org/springframework/web/reactive/result/HandlerResultHandlerSupport.java", "func_code": "  protected MediaType selectMediaType(\n      ServerWebExchange exchange, Supplier<List<MediaType>> producibleTypesSupplier) {\n\n    List<MediaType> acceptableTypes = getAcceptableTypes(exchange);\n    List<MediaType> producibleTypes = getProducibleTypes(exchange, producibleTypesSupplier);\n\n    Set<MediaType> compatibleMediaTypes = new LinkedHashSet<>();\n    for (MediaType acceptable : acceptableTypes) {\n      for (MediaType producible : producibleTypes) {\n        if (acceptable.isCompatibleWith(producible)) {\n          compatibleMediaTypes.add(selectMoreSpecificMediaType(acceptable, producible));\n        }\n      }\n    }\n\n    List<MediaType> result = new ArrayList<>(compatibleMediaTypes);\n    MediaType.sortBySpecificityAndQuality(result);\n\n    for (MediaType mediaType : result) {\n      if (mediaType.isConcrete()) {\n        return mediaType;\n      } else if (mediaType.equals(MediaType.ALL) || mediaType.equals(MEDIA_TYPE_APPLICATION_ALL)) {\n        return MediaType.APPLICATION_OCTET_STREAM;\n      }\n    }\n\n    return null;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 119, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8655160796753201}, {"buggy": true, "line_num": 4, "prob": 1.3367885121176952e-07}, {"buggy": true, "line_num": 18, "prob": 1.120064080465127e-08}, {"buggy": true, "line_num": 10, "prob": 2.643080080003709e-11}, {"buggy": true, "line_num": 16, "prob": 1.7732620004380642e-11}, {"buggy": true, "line_num": 21, "prob": 5.640541576176755e-12}, {"buggy": true, "line_num": 9, "prob": 4.754407634294933e-12}]}
{"project": "eclipse.smarthome", "commit": "23999f8d175db28cbdbebf5508ec75ca80b054d6", "file_path": "bundles/core/org.eclipse.smarthome.core/src/main/java/org/eclipse/smarthome/core/internal/items/ItemRegistryImpl.java", "func_code": "  public <T extends GenericItem> Collection<T> getItemsByTag(Class<T> typeFilter, String... tags) {\n    Collection<T> filteredItems = new ArrayList<T>();\n\n    Collection<Item> items = getItemsByTag(tags);\n    for (Item item : items) {\n      if (typeFilter.isInstance(item)) {\n        filteredItems.add((T) item);\n      }\n    }\n    return filteredItems;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 289, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.985727371409971}, {"buggy": true, "line_num": 3, "prob": 3.2376562851019546e-09}, {"buggy": true, "line_num": 4, "prob": 1.1018753575013067e-11}, {"buggy": true, "line_num": 5, "prob": 7.780303161158258e-12}, {"buggy": true, "line_num": 9, "prob": 4.330605606750775e-12}]}
{"project": "deeplearning4j.deeplearning4j", "commit": "55948fb3d88fa226f6b662f658a827182965f39e", "file_path": "nd4j-tests/src/test/java/org/nd4j/linalg/Nd4jTestsComparisonFortran.java", "func_code": "  public void testAddSubtractWithOpsCommonsMath() {\n    List<Pair<INDArray, String>> first = CheckUtil.getAllTestMatricesWithShape(3, 5, SEED);\n    List<Pair<INDArray, String>> second = CheckUtil.getAllTestMatricesWithShape(3, 5, SEED);\n    for (int i = 0; i < first.size(); i++) {\n      for (int j = 0; j < second.size(); j++) {\n        Pair<INDArray, String> p1 = first.get(i);\n        Pair<INDArray, String> p2 = second.get(i);\n        String errorMsg1 = getTestWithOpsErrorMsg(i, j, \"add\", p1, p2);\n        String errorMsg2 = getTestWithOpsErrorMsg(i, j, \"sub\", p1, p2);\n        boolean addFail = CheckUtil.checkAdd(p1.getFirst(), p2.getFirst(), 1e-4, 1e-6);\n        assertTrue(errorMsg1, addFail);\n        boolean subFail = CheckUtil.checkSubtract(p1.getFirst(), p2.getFirst(), 1e-4, 1e-6);\n        assertTrue(errorMsg2, subFail);\n      }\n    }\n  }\n", "line_num": 6, "charoffset": 34, "length": 13, "error": "second.get(i)", "repair": "second.get(j)", "task_id": 272, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9997187806559097}, {"buggy": true, "line_num": 9, "prob": 0.00010158589844031902}, {"buggy": true, "line_num": 11, "prob": 5.112182650090529e-05}, {"buggy": true, "line_num": 2, "prob": 1.0490457427860455e-06}, {"buggy": true, "line_num": 5, "prob": 6.492221500642005e-07}, {"buggy": true, "line_num": 4, "prob": 1.4684326107763084e-07}, {"buggy": true, "line_num": 8, "prob": 1.8863347669419253e-08}, {"buggy": true, "line_num": 3, "prob": 1.0920100372523889e-08}]}
{"project": "apache.cxf", "commit": "bf2536fdaf82805af1e4f2d0b4a2430c7c29b09e", "file_path": "tools/common/src/main/java/org/apache/cxf/tools/common/ToolException.java", "func_code": "  private void addSuppressedThrowable(Throwable t) {\n    try {\n      this.getClass().getMethod(\"addSuppressed\", Throwable.class).invoke(this, t);\n    } catch (Throwable t2) {\n      // java < 1.7\n      suppressed.add(t2);\n      if (getCause() == null) {\n        initCause(t);\n      }\n      hasSuppressed = true;\n    }\n  }\n", "line_num": 5, "charoffset": 12, "length": 18, "error": "suppressed.add(t2)", "repair": "suppressed.add(t)", "task_id": 182, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9998190998965993}, {"buggy": false, "line_num": -1, "prob": 0.0001809010454069912}, {"buggy": true, "line_num": 7, "prob": 1.8789299904666304e-16}, {"buggy": true, "line_num": 9, "prob": 1.787164862850022e-24}, {"buggy": true, "line_num": 2, "prob": 2.713854225833816e-25}]}
{"project": "JetBrains.intellij-community", "commit": "72867bd2a7a045e3d6ff566b70006391affe07d3", "file_path": "python/src/com/jetbrains/python/inspections/PyBroadExceptionInspection.java", "func_code": "  public void visitPyExceptBlock(final PyExceptPart node) {\n    PyExpression exceptClass = node.getExceptClass();\n    if (exceptClass == null) {\n      registerProblem(node, \"Too broad exception clause\");\n    }\n    if (exceptClass instanceof PyReferenceExpression) {\n      PyReferenceExpression exceptClassRef = (PyReferenceExpression) exceptClass;\n      PyType classRefType = myTypeEvalContext.getType(exceptClassRef);\n      if (classRefType != null) {\n        if (classRefType.isBuiltin()) registerProblem(node, \"Too broad exception clause\");\n      }\n    }\n  }\n", "line_num": 3, "charoffset": 12, "length": 51, "error": "registerProblem(node,\"Too broad exception clause\")", "repair": "registerProblem(exceptClassRef,\"Too broad exception clause\")", "task_id": 66, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9467787134830821}, {"buggy": true, "line_num": 9, "prob": 1.1915154159503691e-08}, {"buggy": true, "line_num": 2, "prob": 5.702683840388795e-10}, {"buggy": true, "line_num": 3, "prob": 2.5335581107164397e-11}, {"buggy": true, "line_num": 7, "prob": 1.3511123835209762e-11}, {"buggy": true, "line_num": 6, "prob": 2.513869294789895e-12}, {"buggy": true, "line_num": 8, "prob": 2.4479848980122117e-12}, {"buggy": true, "line_num": 1, "prob": 9.315120774314466e-13}, {"buggy": true, "line_num": 5, "prob": 1.525037600739835e-13}]}
{"project": "seven332.EhViewer", "commit": "a69be45099254fb7cdd38ce4d3bb1a6b4c7cb37e", "file_path": "app/src/main/java/com/hippo/ehviewer/cache/AnyCache.java", "func_code": "  public boolean putToDisk(String key, V value) {\n    if (mHasDiskCache) {\n      // Wait for pause\n      waitUntilUnpaused();\n\n      String diskKey = hashKeyForDisk(key);\n\n      synchronized (mDiskCacheLock) {\n        while (mDiskCacheStarting) {\n          try {\n            mDiskCacheLock.wait();\n          } catch (InterruptedException e) {\n            // Just ignore\n          }\n        }\n        if (mDiskCache != null) {\n          mDiskCache.put(diskKey, value);\n          return true;\n        } else {\n          return false;\n        }\n      }\n    } else {\n      return false;\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 499, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999984502791861}, {"buggy": true, "line_num": 1, "prob": 1.8217592427879508e-10}, {"buggy": true, "line_num": 16, "prob": 6.443507052720507e-12}, {"buggy": true, "line_num": 15, "prob": 3.944166987502118e-12}, {"buggy": true, "line_num": 5, "prob": 1.7873257669209762e-12}, {"buggy": true, "line_num": 8, "prob": 3.4063206779293125e-13}, {"buggy": true, "line_num": 11, "prob": 1.5728023837554765e-13}]}
{"project": "JetBrains.intellij-community", "commit": "70c52e8d1403397959d89755d970d150faf3bc34", "file_path": "dom/openapi/src/com/intellij/util/xml/ModelMergerUtil.java", "func_code": "  public static <T> T getFirstImplementation(final T t) {\n    T cur = t;\n    while (cur instanceof MergedObject) {\n      final List<T> implementations = ((MergedObject<T>) cur).getImplementations();\n      cur = implementations.isEmpty() ? null : implementations.get(0);\n    }\n    return cur;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 79, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8601053303000405}, {"buggy": true, "line_num": 3, "prob": 4.9525607113066425e-08}, {"buggy": true, "line_num": 2, "prob": 3.2725749999251234e-08}, {"buggy": true, "line_num": 1, "prob": 4.325889527538001e-13}, {"buggy": true, "line_num": 6, "prob": 3.9000658845662067e-13}, {"buggy": true, "line_num": 4, "prob": 4.2711285938573715e-14}]}
{"project": "JetBrains.intellij-community", "commit": "f6a74c6f9d03156fd6b7d7fb69af3eb038785beb", "file_path": "codeInsight/impl/com/intellij/codeInsight/javadoc/JavaDocUtil.java", "func_code": "  public static String getShortestClassName(PsiClass aClass, PsiElement context) {\n    String shortName = aClass.getName();\n    PsiClass containingClass = aClass.getContainingClass();\n    while (containingClass != null) {\n      shortName = containingClass.getName() + \".\" + shortName;\n      containingClass = aClass.getContainingClass();\n    }\n    LOG.assertTrue(shortName != null);\n\n    String qName = aClass.getQualifiedName();\n    if (qName == null) return shortName;\n\n    final PsiManager manager = aClass.getManager();\n    return manager.areElementsEquivalent(\n            aClass, manager.getResolveHelper().resolveReferencedClass(shortName, context))\n        ? shortName\n        : qName;\n  }\n", "line_num": 5, "charoffset": 24, "length": 27, "error": "aClass.getContainingClass()", "repair": "containingClass.getContainingClass()", "task_id": 81, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9360495917604075}, {"buggy": true, "line_num": 14, "prob": 0.008443512853981023}, {"buggy": true, "line_num": 5, "prob": 2.251185425618464e-07}, {"buggy": true, "line_num": 7, "prob": 8.442348018196631e-08}, {"buggy": true, "line_num": 10, "prob": 5.881580595825497e-08}, {"buggy": true, "line_num": 4, "prob": 1.8122642397952808e-09}]}
{"project": "grails.grails-core", "commit": "0a5bda609181cd85bc07dadbeb3126e11b749533", "file_path": "grails-core/src/main/groovy/org/codehaus/groovy/grails/commons/metaclass/LazyMetaPropertyMap.java", "func_code": "  public void putAll(Map map) {\n    for (Iterator i = map.keySet().iterator(); i.hasNext(); ) {\n      Object key = i.next();\n      put(key, map.get(key));\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 346, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999970793723509}, {"buggy": true, "line_num": 3, "prob": 1.1361719702991372e-11}, {"buggy": true, "line_num": 1, "prob": 2.9338735198992227e-13}]}
{"project": "dbeaver.dbeaver", "commit": "7c5c7c6b433a332cb3eb1def62669a3faf1a1478", "file_path": "plugins/org.jkiss.dbeaver.model/src/org/jkiss/dbeaver/model/impl/jdbc/cache/JDBCCompositeCache.java", "func_code": "  public void setCache(List<OBJECT> objects) {\r\n    super.setCache(objects);\r\n    synchronized (objectCache) {\r\n      objectCache.clear();\r\n      for (OBJECT object : objects) {\r\n        PARENT parent = getParent(object);\r\n        List<OBJECT> parentObjects = objectCache.get(parent);\r\n        if (parentObjects == null) {\r\n          parentObjects = new ArrayList<>();\r\n          objectCache.put(parent, parentObjects);\r\n        }\r\n        parentObjects.add(object);\r\n      }\r\n    }\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 264, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9716117377049015}, {"buggy": true, "line_num": 11, "prob": 7.146314208664844e-11}, {"buggy": true, "line_num": 9, "prob": 2.168580426621644e-11}, {"buggy": true, "line_num": 6, "prob": 1.2079219874960496e-12}, {"buggy": true, "line_num": 5, "prob": 4.2747167471774284e-13}]}
{"project": "emilsjolander.StickyListHeaders", "commit": "ad78a9f11be76a05802155ec0ae02c9ee12129f1", "file_path": "library/src/se/emilsjolander/stickylistheaders/AdapterWrapper.java", "func_code": "  public WrapperView getView(int position, View convertView, ViewGroup parent) {\n    WrapperView wv = (convertView == null) ? new WrapperView(mContext) : (WrapperView) convertView;\n    View item = mDelegate.getView(position, wv.mItem, wv);\n    View header = null;\n    if (previousPositionHasSameHeader(position)) {\n      recycleHeaderIfExists(wv);\n    } else {\n      header = configureHeader(wv, position);\n    }\n    if ((item instanceof Checkable) && !(wv instanceof CheckableWrapperView)) {\n      // Need to create Checkable subclass of WrapperView for ListView to work correctly\n      wv = new CheckableWrapperView(mContext);\n    } else if (!(item instanceof Checkable) && (wv instanceof CheckableWrapperView)) {\n      wv = new WrapperView(mContext);\n    }\n    wv.update(item, header, mDivider, mDividerHeight);\n    return wv;\n  }\n", "line_num": 2, "charoffset": 14, "length": 41, "error": "mDelegate.getView(position,wv.mItem,wv)", "repair": "mDelegate.getView(position,wv.mItem,parent)", "task_id": 296, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9999448091463223}, {"buggy": true, "line_num": 2, "prob": 5.505811595580745e-05}, {"buggy": true, "line_num": 4, "prob": 1.572850684362995e-07}, {"buggy": false, "line_num": -1, "prob": 3.287224653675041e-09}, {"buggy": true, "line_num": 12, "prob": 2.993031935236242e-11}, {"buggy": true, "line_num": 13, "prob": 1.4811298735608027e-11}, {"buggy": true, "line_num": 15, "prob": 1.722142544636426e-12}, {"buggy": true, "line_num": 7, "prob": 6.482383287776569e-13}]}
{"project": "signalapp.Signal-Android", "commit": "336962eb554b757543ead090732c591723176e5c", "file_path": "src/org/thoughtcrime/securesms/components/emoji/EmojiEditText.java", "func_code": "  public void insertEmoji(String emoji) {\n    final int start = getSelectionStart();\n    final int end = getSelectionEnd();\n\n    getText().replace(Math.min(start, end), Math.max(start, end), emoji);\n    setSelection(end + emoji.length());\n  }\n", "line_num": 5, "charoffset": 17, "length": 20, "error": "end + emoji.length()", "repair": "start + emoji.length()", "task_id": 501, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9999957084838798}, {"buggy": false, "line_num": -1, "prob": 3.6589323633614434e-06}, {"buggy": true, "line_num": 4, "prob": 1.0447179508023048e-15}, {"buggy": true, "line_num": 1, "prob": 1.1836922840871874e-18}]}
{"project": "undertow-io.undertow", "commit": "cc89f9907c6763682385f10eac3e8c733666c435", "file_path": "servlet/src/main/java/io/undertow/servlet/spec/HttpSessionImpl.java", "func_code": "  public void setAttribute(final String name, final Object value) {\n    try {\n      Object old = session.setAttribute(name, value).get();\n      if (value == null && old != null) {\n        applicationListeners.httpSessionAttributeRemoved(this, name, old);\n      } else if (old == null) {\n        applicationListeners.httpSessionAttributeAdded(this, name, value);\n      } else {\n        applicationListeners.httpSessionAttributeReplaced(this, name, old);\n      }\n    } catch (IOException e) {\n      throw new RuntimeException(e);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 523, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.9998414767838852}, {"buggy": false, "line_num": -1, "prob": 0.0001457254755437801}, {"buggy": true, "line_num": 8, "prob": 2.7075668411662785e-14}, {"buggy": true, "line_num": 4, "prob": 7.62907922897596e-15}, {"buggy": true, "line_num": 2, "prob": 2.1008218829670066e-15}, {"buggy": true, "line_num": 6, "prob": 1.091094246465149e-15}, {"buggy": true, "line_num": 5, "prob": 9.876109506215146e-16}, {"buggy": true, "line_num": 11, "prob": 8.967528643815869e-17}]}
{"project": "igniterealtime.Openfire", "commit": "7b98800239dcb15ff0886509af9111055bb803f8", "file_path": "xmppserver/src/main/java/org/jivesoftware/openfire/group/GroupManager.java", "func_code": "  public Collection<Group> getSharedGroups(String userName) {\n    String key = USER_SHARED_GROUPS_KEY + userName;\n    ArrayList<String> groupNames = (ArrayList<String>) groupMetaCache.get(key);\n    if (groupNames == null) {\n      synchronized ((userName + MUTEX_SUFFIX_USER).intern()) {\n        groupNames = (ArrayList<String>) groupMetaCache.get(key);\n        if (groupNames == null) {\n          // assume this is a local user\n          groupNames =\n              new ArrayList(\n                  provider.getSharedGroupNames(\n                      new JID(\n                          userName,\n                          XMPPServer.getInstance().getServerInfo().getXMPPDomain(),\n                          null)));\n          groupMetaCache.put(key, groupNames);\n        }\n      }\n    }\n    return new GroupCollection(groupNames);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 362, "predictions": [{"buggy": true, "line_num": 12, "prob": 0.9370783710852141}, {"buggy": false, "line_num": -1, "prob": 1.1413627433709638e-06}, {"buggy": true, "line_num": 10, "prob": 4.9627864334195235e-14}, {"buggy": true, "line_num": 4, "prob": 6.314215016420312e-16}, {"buggy": true, "line_num": 15, "prob": 6.557156138552426e-17}, {"buggy": true, "line_num": 19, "prob": 2.586942249683305e-17}, {"buggy": true, "line_num": 1, "prob": 6.092059690842023e-18}, {"buggy": true, "line_num": 5, "prob": 2.6931553469372394e-18}, {"buggy": true, "line_num": 2, "prob": 2.474094895715555e-18}, {"buggy": true, "line_num": 3, "prob": 1.9427766083185526e-18}, {"buggy": true, "line_num": 11, "prob": 7.184442866897915e-19}, {"buggy": true, "line_num": 13, "prob": 4.1846260056575e-19}]}
{"project": "google.closure-compiler", "commit": "23423085f9af64ba33a2031298f46474317cb425", "file_path": "src/com/google/javascript/jscomp/DefinitionUseSiteFinder.java", "func_code": "  void removeReferences(Node node) {\n    if (DefinitionsRemover.isDefinitionNode(node)) {\n      DefinitionSite defSite = definitionNodeByDefinitionSite.get(node);\n      if (defSite != null) {\n        Definition def = defSite.definition;\n        String name = getSimplifiedName(def.getLValue());\n        if (name != null) {\n          this.definitionNodeByDefinitionSite.remove(node);\n          this.nameDefinitionMultimap.remove(name, node);\n        }\n      }\n    } else {\n      Node useSite = node;\n      if (useSite.isGetProp()) {\n        String propName = useSite.getLastChild().getString();\n        if (propName.equals(\"apply\") || propName.equals(\"call\")) {\n          useSite = useSite.getFirstChild();\n        }\n      }\n      String name = getSimplifiedName(useSite);\n      if (name != null) {\n        this.nameUseSiteMultimap.remove(name, new UseSite(useSite, null, null));\n      }\n    }\n\n    for (Node child : node.children()) {\n      removeReferences(child);\n    }\n  }\n", "line_num": 8, "charoffset": 10, "length": 46, "error": "this.nameDefinitionMultimap.remove(name,node)", "repair": "this.nameDefinitionMultimap.remove(name,def)", "task_id": 330, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9054910450477064}, {"buggy": true, "line_num": 7, "prob": 0.004491583337156707}, {"buggy": true, "line_num": 16, "prob": 0.0014964813818548093}, {"buggy": true, "line_num": 8, "prob": 1.6791375228013222e-07}, {"buggy": true, "line_num": 13, "prob": 8.815113043002108e-08}, {"buggy": true, "line_num": 14, "prob": 1.9294764295108313e-09}, {"buggy": true, "line_num": 6, "prob": 1.0779026523439494e-09}]}
{"project": "yarolegovich.DiscreteScrollView", "commit": "46fde41074aee864df830f0a2b7e4d2fcefe9869", "file_path": "library/src/main/java/com/yarolegovich/discretescrollview/DiscreteScrollLayoutManager.java", "func_code": "  public void onFling(int velocityX, int velocityY) {\n    int velocity = orientationHelper.getFlingVelocity(velocityX, velocityY);\n    int throttleValue = shouldSlideOnFling ? Math.abs(velocity / flingThreshold) : 1;\n    int newPosition = currentPosition + Direction.fromDelta(velocity).applyTo(throttleValue);\n    newPosition = checkNewOnFlingPositionIsInBounds(newPosition);\n    boolean isInScrollDirection = velocity * scrolled >= 0;\n    boolean canFling = isInScrollDirection && isInBounds(newPosition);\n    if (canFling) {\n      startSmoothPendingScroll(newPosition);\n    } else {\n      returnToCurrentPosition();\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 540, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.8753397331963236}, {"buggy": true, "line_num": 3, "prob": 2.985197237442172e-08}, {"buggy": false, "line_num": -1, "prob": 1.9470033090181073e-09}, {"buggy": true, "line_num": 2, "prob": 6.844088153902132e-12}]}
{"project": "JetBrains.intellij-community", "commit": "a4e4ceb3863d1dc5510e6b09a8742f0dbe9526db", "file_path": "platform/lang-impl/src/com/intellij/formatting/FormatProcessor.java", "func_code": "  private static int replaceWhiteSpace(\n      final FormattingModel model,\n      @NotNull final LeafBlockWrapper block,\n      int shift,\n      final CharSequence _newWhiteSpace,\n      final CommonCodeStyleSettings.IndentOptions options) {\n    final WhiteSpace whiteSpace = block.getWhiteSpace();\n    final TextRange textRange = whiteSpace.getTextRange();\n    final TextRange wsRange = shiftRange(textRange, shift);\n    final String newWhiteSpace = _newWhiteSpace.toString();\n    TextRange newWhiteSpaceRange =\n        model instanceof FormattingModelEx\n            ? ((FormattingModelEx) model).replaceWhiteSpace(wsRange, block.getNode(), newWhiteSpace)\n            : model.replaceWhiteSpace(textRange, newWhiteSpace);\n\n    shift += newWhiteSpaceRange.getLength() - textRange.getLength();\n\n    if (block.isLeaf() && whiteSpace.containsLineFeeds() && block.containsLineFeeds()) {\n      final TextRange currentBlockRange = shiftRange(block.getTextRange(), shift);\n\n      IndentInside oldBlockIndent = whiteSpace.getInitialLastLineIndent();\n      IndentInside whiteSpaceIndent =\n          IndentInside.createIndentOn(IndentInside.getLastLine(newWhiteSpace));\n      final int shiftInside = calcShift(oldBlockIndent, whiteSpaceIndent, options);\n\n      if (shiftInside != 0 || !oldBlockIndent.equals(whiteSpaceIndent)) {\n        final TextRange newBlockRange =\n            model.shiftIndentInsideRange(currentBlockRange, shiftInside);\n        shift += newBlockRange.getLength() - block.getLength();\n      }\n    }\n    return shift;\n  }\n", "line_num": 13, "charoffset": 37, "length": 49, "error": "model.replaceWhiteSpace(textRange,newWhiteSpace)", "repair": "model.replaceWhiteSpace(wsRange,newWhiteSpace)", "task_id": 544, "predictions": [{"buggy": true, "line_num": 15, "prob": 0.516544515295736}, {"buggy": false, "line_num": -1, "prob": 0.0005133894878827092}, {"buggy": true, "line_num": 8, "prob": 2.6764624059690828e-06}, {"buggy": true, "line_num": 27, "prob": 1.5911373165197142e-11}, {"buggy": true, "line_num": 23, "prob": 5.790968732073806e-12}]}
{"project": "droolsjbpm.drools", "commit": "cdc587d1173951ae13cb871b5cdc9b72bf4ee5f1", "file_path": "drools-core/src/main/java/org/drools/core/common/LeftTupleSetsImpl.java", "func_code": "  public void addAllUpdates(LeftTupleSets tupleSets) {\n    LeftTupleSetsImpl tupleSetsImpl = (LeftTupleSetsImpl) tupleSets;\n    if (tupleSetsImpl.getUpdateFirst() != null) {\n      if (updateFirst == null) {\n        updateFirst = tupleSetsImpl.getUpdateFirst();\n        updateSize = tupleSetsImpl.updateSize;\n      } else {\n        LeftTuple current = updateFirst;\n        LeftTuple last = null;\n        while (current != null) {\n          last = current;\n          current = current.getStagedNext();\n        }\n        LeftTuple leftTuple = tupleSetsImpl.getUpdateFirst();\n        last.setStagedNext(leftTuple);\n        leftTuple.setStagePrevious(leftTuple);\n        updateSize = updateSize + tupleSetsImpl.updateSize();\n      }\n      tupleSetsImpl.updateFirst = null;\n      tupleSetsImpl.updateSize = 0;\n    }\n  }\n", "line_num": 15, "charoffset": 16, "length": 39, "error": "leftTuple.setStagePrevious(leftTuple)", "repair": "leftTuple.setStagePrevious(last)", "task_id": 278, "predictions": [{"buggy": true, "line_num": 15, "prob": 0.9691701399815604}, {"buggy": true, "line_num": 3, "prob": 0.012839188038401297}, {"buggy": false, "line_num": -1, "prob": 0.0009931171904586258}, {"buggy": true, "line_num": 4, "prob": 1.5322622266339208e-06}, {"buggy": true, "line_num": 14, "prob": 1.3440346721940844e-06}, {"buggy": true, "line_num": 5, "prob": 6.243234110869622e-09}, {"buggy": true, "line_num": 7, "prob": 3.412262852889499e-10}, {"buggy": true, "line_num": 16, "prob": 2.0352925543394236e-12}]}
{"project": "h2database.h2database", "commit": "846b0f1a0eccdfd502877eeb23636f03336c299a", "file_path": "h2/src/main/org/h2/security/auth/ConfigProperties.java", "func_code": "  public boolean getBooleanValue(String name, boolean defaultValue) {\n    String result = properties.get(name);\n    if (result == null) {\n      return defaultValue;\n    }\n    return Utils.parseBoolean(name, defaultValue, true);\n  }\n", "line_num": 5, "charoffset": 15, "length": 44, "error": "Utils.parseBoolean(name,defaultValue,true)", "repair": "Utils.parseBoolean(result,defaultValue,true)", "task_id": 350, "predictions": [{"buggy": true, "line_num": 5, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 1.829404124873478e-08}, {"buggy": true, "line_num": 1, "prob": 2.3049830904081917e-19}, {"buggy": true, "line_num": 3, "prob": 1.767539500104063e-21}, {"buggy": true, "line_num": 2, "prob": 1.6396155909478418e-21}]}
{"project": "libgdx.libgdx", "commit": "4e1cc538aaa75a9d0e9514effa6e3f3beeab3985", "file_path": "gdx/src/com/badlogic/gdx/files/FileHandle.java", "func_code": "  public FileHandle[] list(String suffix) {\r\n    if (type == FileType.Classpath)\r\n      throw new GdxRuntimeException(\"Cannot list a classpath directory: \" + file);\r\n    String[] relativePaths = file().list();\r\n    if (relativePaths == null) return new FileHandle[0];\r\n    FileHandle[] handles = new FileHandle[relativePaths.length];\r\n    int count = 0;\r\n    for (int i = 0, n = relativePaths.length; i < n; i++) {\r\n      String path = relativePaths[i];\r\n      if (!path.endsWith(suffix)) continue;\r\n      handles[count] = child(path);\r\n      count++;\r\n    }\r\n    if (count < relativePaths.length) {\r\n      FileHandle[] newHandles = new FileHandle[count];\r\n      System.arraycopy(handles, 0, newHandles, 0, count);\r\n      handles = newHandles;\r\n    }\r\n    return handles;\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 393, "predictions": [{"buggy": true, "line_num": 2, "prob": 0.9891917288083772}, {"buggy": true, "line_num": 15, "prob": 0.010808200961907372}, {"buggy": false, "line_num": -1, "prob": 3.245213002095794e-08}, {"buggy": true, "line_num": 10, "prob": 5.935988550782323e-13}, {"buggy": true, "line_num": 1, "prob": 9.912191955615614e-16}]}
{"project": "qos-ch.logback", "commit": "4a1d2dfdc666f6821fd19ebfbb9021af4833b6b2", "file_path": "logback-core/src/main/java/ch/qos/logback/core/joran/JoranConfiguratorBase.java", "func_code": "  protected void addImplicitRules(Interpreter interpreter) {\n    // The following line adds the capability to parse nested components\n    NestedComplexPropertyIA nestedIA = new NestedComplexPropertyIA();\n    nestedIA.setContext(context);\n    interpreter.addImplicitAction(nestedIA);\n\n    NestedBasicPropertyIA nestedSimpleIA = new NestedBasicPropertyIA();\n    nestedSimpleIA.setContext(context);\n    interpreter.addImplicitAction(nestedSimpleIA);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 490, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9193713258440117}, {"buggy": true, "line_num": 4, "prob": 2.233285290105386e-07}, {"buggy": true, "line_num": 3, "prob": 1.3390590103008382e-08}, {"buggy": true, "line_num": 7, "prob": 8.788461428483416e-10}, {"buggy": true, "line_num": 8, "prob": 1.4510956644495185e-10}]}
{"project": "deeplearning4j.deeplearning4j", "commit": "edbf0b673de8682f35b519ec074e2ed2dbbae5b0", "file_path": "arbiter/arbiter-deeplearning4j/src/main/java/org/deeplearning4j/arbiter/scoring/util/ScoreUtil.java", "func_code": "  public static double score(ComputationGraph model, DataSetIterator testData, boolean average) {\n    // TODO: do this properly taking into account division by N, L1/L2 etc\n    double sumScore = 0.0;\n    int totalExamples = 0;\n    while (testData.hasNext()) {\n      DataSet ds = testData.next();\n      int numExamples = ds.numExamples();\n\n      sumScore += numExamples * model.score(ds);\n      totalExamples += numExamples;\n    }\n\n    if (!average) return sumScore;\n    return sumScore / totalExamples;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 267, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9974288391213025}, {"buggy": true, "line_num": 12, "prob": 1.5958904083811294e-06}, {"buggy": true, "line_num": 8, "prob": 6.84299257574713e-08}, {"buggy": true, "line_num": 13, "prob": 3.0834956873658254e-12}, {"buggy": true, "line_num": 2, "prob": 3.757707921067398e-14}]}
{"project": "SpringSource.spring-framework", "commit": "a4aca64007cb7950df9d97866bb5ae91dd831c2b", "file_path": "org.springframework.context/src/main/java/org/springframework/cache/interceptor/ExpressionEvaluator.java", "func_code": "  Object key(String keyExpression, Method method, EvaluationContext evalContext) {\r\n    Expression keyExp = keyCache.get(keyExpression);\r\n    if (keyExp == null) {\r\n      keyExp = parser.parseExpression(keyExpression);\r\n      keyCache.put(method, keyExp);\r\n    }\r\n    return keyExp.getValue(evalContext);\r\n  }\r\n", "line_num": 1, "charoffset": 22, "length": 27, "error": "keyCache.get(keyExpression)", "repair": "keyCache.get(method)", "task_id": 122, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9641053363651987}, {"buggy": true, "line_num": 3, "prob": 3.367797452588122e-06}, {"buggy": true, "line_num": 6, "prob": 1.3055149438738792e-06}, {"buggy": true, "line_num": 4, "prob": 6.813025794291008e-08}, {"buggy": true, "line_num": 1, "prob": 2.824482014250992e-10}, {"buggy": true, "line_num": 2, "prob": 4.544303906313624e-14}]}
{"project": "h2oai.h2o-3", "commit": "e6c8354a0ec85c41709a30779e1c503c99373fb5", "file_path": "h2o-algos/src/main/java/hex/glrm/GLRMModel.java", "func_code": "  @Override\n  protected Frame predictScoreImpl(Frame orig, Frame adaptedFr, String destination_key) {\n    final int ncols = _output._names.length;\n    assert ncols == adaptedFr.numCols();\n    String prefix = \"reconstr_\";\n\n    // Need [A,X,P] where A = adaptedFr, X = loading frame, P = imputed frame\n    // Note: A is adapted to original training frame, P has columns shuffled so cats come before\n    // nums!\n    Frame fullFrm = new Frame(adaptedFr);\n    Frame loadingFrm = DKV.get(_output._loading_key).get();\n    fullFrm.add(loadingFrm);\n    String[][] adaptedDomme = adaptedFr.domains();\n    for (int i = 0; i < ncols; i++) {\n      Vec v = fullFrm.anyVec().makeZero();\n      v.setDomain(adaptedDomme[i]);\n      fullFrm.add(prefix + _output._names[i], v);\n    }\n    GLRMScore gs = new GLRMScore(ncols, _parms._k, true).doAll(fullFrm);\n\n    // Return the imputed training frame\n    int x = ncols + _parms._k, y = fullFrm.numCols();\n    Frame f =\n        fullFrm.extractFrame(\n            x, y); // this will call vec_impl() and we cannot call the delete() below just yet\n\n    f =\n        new Frame(\n            (null == destination_key ? Key.make() : Key.make(destination_key)),\n            f.names(),\n            f.vecs());\n    DKV.put(f);\n    gs._mb.makeModelMetrics(GLRMModel.this, orig); // save error metrics based on imputed data\n    return f;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 546, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6512451726205254}, {"buggy": true, "line_num": 9, "prob": 0.00012910130659781434}, {"buggy": true, "line_num": 28, "prob": 1.7055037532765163e-05}, {"buggy": true, "line_num": 3, "prob": 1.0411366863974252e-05}, {"buggy": true, "line_num": 32, "prob": 3.8744833770538754e-07}, {"buggy": true, "line_num": 14, "prob": 3.023948150923732e-08}]}
{"project": "JetBrains.intellij-community", "commit": "b05184a8c63f9cece9199b18bf1204df70b63cd6", "file_path": "platform/diff-impl/src/com/intellij/diff/tools/util/side/TwosideTextDiffViewer.java", "func_code": "  public void actionPerformed(@NotNull AnActionEvent e) {\n    Side currentSide = getCurrentSide();\n    Side targetSide = currentSide.other();\n\n    EditorEx currentEditor = getEditor(currentSide);\n    EditorEx targetEditor = getEditor(targetSide);\n\n    if (myScrollToPosition) {\n      LogicalPosition position =\n          transferPosition(currentSide, currentEditor.getCaretModel().getLogicalPosition());\n      targetEditor.getCaretModel().moveToLogicalPosition(position);\n    }\n\n    setCurrentSide(targetSide);\n    targetEditor.getScrollingModel().scrollToCaret(ScrollType.MAKE_VISIBLE);\n\n    DiffUtil.requestFocus(getProject(), getPreferredFocusedComponent());\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 42, "predictions": [{"buggy": true, "line_num": 13, "prob": 0.999629754067665}, {"buggy": false, "line_num": -1, "prob": 4.4389793466996126e-05}, {"buggy": true, "line_num": 7, "prob": 3.3375188111665067e-06}, {"buggy": true, "line_num": 5, "prob": 1.0080908475947753e-08}, {"buggy": true, "line_num": 9, "prob": 7.006652070957658e-10}, {"buggy": true, "line_num": 4, "prob": 3.2325393292845757e-10}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "5dd98cc0c3cb99c342c2416f68bf602655701866", "file_path": "services/java/com/android/server/LocationManagerService.java", "func_code": "  public boolean sendExtraCommand(String provider, String command, Bundle extras) {\n    // first check for permission to the provider\n    checkPermissionsSafe(provider);\n    // and check for ACCESS_LOCATION_EXTRA_COMMANDS\n    if ((mContext.checkCallingOrSelfPermission(ACCESS_LOCATION_EXTRA_COMMANDS)\n        != PackageManager.PERMISSION_GRANTED)) {\n      throw new SecurityException(\"Requires ACCESS_LOCATION_EXTRA_COMMANDS permission\");\n    }\n\n    synchronized (mLock) {\n      LocationProviderProxy proxy = mProvidersByName.get(provider);\n      if (proxy == null) {\n        return false;\n      }\n\n      return proxy.sendExtraCommand(command, extras);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 161, "predictions": [{"buggy": true, "line_num": 10, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 5.403439794025373e-09}, {"buggy": true, "line_num": 2, "prob": 5.501437697664244e-15}, {"buggy": true, "line_num": 15, "prob": 1.1299131300455797e-19}, {"buggy": true, "line_num": 11, "prob": 9.540108498167015e-22}, {"buggy": true, "line_num": 9, "prob": 8.091613800744044e-22}, {"buggy": true, "line_num": 4, "prob": 4.555914762846454e-22}]}
{"project": "osmandapp.Osmand", "commit": "620b7ad92d9e99665b3547dd89c1ba2d6f37118b", "file_path": "OsmAnd/src/net/osmand/plus/osmo/OsMoPositionLayer.java", "func_code": "  public void onDraw(Canvas canvas, RotatedTileBox tb, DrawSettings nightMode) {\n    final int r = getRadiusPoi(tb);\n    for (OsMoDevice t : getTrackingDevices()) {\n      Location l = t.getLastLocation();\n      if (t != null) {\n        int x = (int) tb.getPixXFromLatLon(l.getLatitude(), l.getLongitude());\n        int y = (int) tb.getPixYFromLatLon(l.getLatitude(), l.getLongitude());\n        pointAltUI.setColor(t.getColor());\n        canvas.drawCircle(x, y, r, pointAltUI);\n        canvas.drawCircle(x, y, r, point);\n      }\n    }\n  }\n", "line_num": 4, "charoffset": 7, "length": 9, "error": "t != null", "repair": "l != null", "task_id": 475, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.9999998807907247}, {"buggy": true, "line_num": 9, "prob": 1.2021651779471163e-07}, {"buggy": false, "line_num": -1, "prob": 2.2827705511242744e-15}, {"buggy": true, "line_num": 6, "prob": 6.015204889305237e-19}, {"buggy": true, "line_num": 8, "prob": 1.3882629366618071e-21}, {"buggy": true, "line_num": 1, "prob": 6.92191263799941e-23}]}
{"project": "JetBrains.intellij-community", "commit": "264acfbe332bc3deadf56774b8a0900d22af9163", "file_path": "platform/vcs-log/impl/src/com/intellij/vcs/log/impl/VcsLogManager.java", "func_code": "  private Set<VirtualFile> safeGetAndClear(@NotNull Set<VirtualFile> unsafeRefs) {\n    Set<VirtualFile> safeRefs = ContainerUtil.newHashSet();\n    synchronized (REFRESH_LOCK) {\n      safeRefs.addAll(unsafeRefs);\n      unsafeRefs.clear();\n    }\n    return safeRefs;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 48, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7204319732717368}, {"buggy": true, "line_num": 4, "prob": 0.004838758371360887}]}
{"project": "elastic.elasticsearch", "commit": "25bc8c4b5a0394cb1116361ff1d0fa432ed7053e", "file_path": "server/src/main/java/org/elasticsearch/env/NodeEnvironment.java", "func_code": "  private static boolean assertPathsDoNotExist(final Path[] paths) {\n    Set<Path> existingPaths = new HashSet<>();\n    for (Path path : paths) {\n      if (FileSystemUtils.exists(path)) {\n        existingPaths.add(path);\n      }\n    }\n    assert existingPaths.size() == 0\n        : \"Paths exist that should have been deleted: \" + existingPaths;\n    return existingPaths.size() == 0;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 290, "predictions": [{"buggy": true, "line_num": 8, "prob": 0.8882796035034038}, {"buggy": false, "line_num": -1, "prob": 0.10664440866730113}, {"buggy": true, "line_num": 7, "prob": 3.8391176496583645e-13}, {"buggy": true, "line_num": 1, "prob": 8.074795393765563e-14}, {"buggy": true, "line_num": 2, "prob": 3.302733101176716e-14}, {"buggy": true, "line_num": 9, "prob": 1.9480087182554763e-14}]}
{"project": "bazelbuild.bazel", "commit": "1be297726e7cc1280bf4e4fe63b491de8dd0c4db", "file_path": "src/java_tools/buildjar/java/com/google/devtools/build/buildjar/javac/plugins/dependency/StrictJavaDepsPlugin.java", "func_code": "  static String getJarName(\n      JavaFileManager fileManager, ClassSymbol classSymbol, Set<String> platformJars) {\n    if (classSymbol == null) {\n      return null;\n    }\n\n    // Ignore symbols that appear in the sourcepath:\n    if (haveSourceForSymbol(classSymbol)) {\n      return null;\n    }\n\n    JavaFileObject classfile = unwrapFileObject(classSymbol.classfile);\n\n    String name = ImplicitDependencyExtractor.getJarName(fileManager, classfile);\n    if (name == null) {\n      return null;\n    }\n\n    // Filter out classes in rt.jar\n    if (platformJars.contains(classfile)) {\n      return null;\n    }\n\n    return name;\n  }\n", "line_num": 19, "charoffset": 8, "length": 32, "error": "platformJars.contains(classfile)", "repair": "platformJars.contains(name)", "task_id": 248, "predictions": [{"buggy": true, "line_num": 19, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 5.3277343576889485e-11}, {"buggy": true, "line_num": 13, "prob": 1.1369121951388803e-13}, {"buggy": true, "line_num": 7, "prob": 1.540460028831484e-19}, {"buggy": true, "line_num": 2, "prob": 5.956813689035715e-20}, {"buggy": true, "line_num": 14, "prob": 1.6814386324766493e-22}, {"buggy": true, "line_num": 11, "prob": 1.117079872337811e-22}]}
{"project": "brianfrankcooper.YCSB", "commit": "24690edd29ec6049f2456b3ec463d8d1ae0b1663", "file_path": "gemfire/src/main/java/com/yahoo/ycsb/db/GemFireClient.java", "func_code": "  public int read(\n      String table, String key, Set<String> fields, HashMap<String, ByteIterator> result) {\n    Region<String, Map<String, byte[]>> r = getRegion(table);\n    Map<String, byte[]> val = r.get(key);\n    if (val != null) {\n      if (fields == null) {\n        for (String k : val.keySet()) {\n          result.put(key, new ByteArrayByteIterator(val.get(key)));\n        }\n      } else {\n        for (String field : fields) {\n          result.put(field, new ByteArrayByteIterator(val.get(field)));\n        }\n      }\n      return SUCCESS;\n    }\n    return ERROR;\n  }\n", "line_num": 7, "charoffset": 52, "length": 12, "error": "val.get(key)", "repair": "val.get(k)", "task_id": 253, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9992895240457941}, {"buggy": false, "line_num": -1, "prob": 0.0006135745636095664}, {"buggy": true, "line_num": 7, "prob": 4.920591765507356e-09}, {"buggy": true, "line_num": 4, "prob": 1.1922205953466812e-11}, {"buggy": true, "line_num": 6, "prob": 8.335667034007063e-13}, {"buggy": true, "line_num": 14, "prob": 5.881015966807164e-13}]}
{"project": "apache.groovy", "commit": "6bcfd7309e948034fbd1d8922afb1a369c08ba7b", "file_path": "src/main/org/codehaus/groovy/control/ResolveVisitor.java", "func_code": "  private void resolveGenericsHeader(GenericsType[] types) {\n    if (types == null) return;\n    currentClass.setUsingGenerics(true);\n    for (GenericsType type : types) {\n      ClassNode classNode = type.getType();\n      String name = type.getName();\n      ClassNode[] bounds = type.getUpperBounds();\n      if (bounds != null) {\n        boolean nameAdded = false;\n        for (ClassNode upperBound : bounds) {\n          if (!nameAdded && upperBound != null || !resolve(classNode)) {\n            genericParameterNames.put(name, type);\n            type.setPlaceholder(true);\n            classNode.setRedirect(upperBound);\n            nameAdded = true;\n          }\n          resolveOrFail(upperBound, classNode);\n        }\n      } else {\n        genericParameterNames.put(name, type);\n        classNode.setRedirect(ClassHelper.OBJECT_TYPE);\n        type.setPlaceholder(true);\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 196, "predictions": [{"buggy": true, "line_num": 10, "prob": 0.9999884368257942}, {"buggy": false, "line_num": -1, "prob": 4.363722761908302e-06}, {"buggy": true, "line_num": 21, "prob": 2.600144883951725e-06}, {"buggy": true, "line_num": 2, "prob": 3.111950922382784e-08}, {"buggy": true, "line_num": 13, "prob": 1.1542033467567897e-10}, {"buggy": true, "line_num": 12, "prob": 1.1333128662541791e-11}, {"buggy": true, "line_num": 11, "prob": 4.281801917042643e-12}, {"buggy": true, "line_num": 16, "prob": 2.450166367442877e-12}, {"buggy": true, "line_num": 14, "prob": 6.643846740185994e-13}]}
{"project": "OpenRefine.OpenRefine", "commit": "660df900d49f651f34e610a5edb7dcb91bce9532", "file_path": "main/src/com/google/refine/model/changes/RowStarChange.java", "func_code": "  public static RowStarChange load(LineNumberReader reader, Pool pool) throws Exception {\n    int row = -1;\n    boolean oldStarred = false;\n    boolean newStarred = false;\n\n    String line;\n    while ((line = reader.readLine()) != null && !\"/ec/\".equals(line)) {\n      int equal = line.indexOf('=');\n      CharSequence field = line.subSequence(0, equal);\n      String value = line.substring(equal + 1);\n\n      if (\"row\".equals(field)) {\n        row = Integer.parseInt(value);\n      } else if (\"oldStarred\".equals(field)) {\n        oldStarred = Boolean.parseBoolean(value);\n      } else if (\"newStarred\".equals(field)) {\n        newStarred = Boolean.parseBoolean(value);\n      }\n    }\n\n    RowStarChange change = new RowStarChange(row, newStarred);\n    change.oldStarred = oldStarred;\n\n    return change;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 110, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.981989269497467}, {"buggy": true, "line_num": 14, "prob": 0.0022913737636154207}, {"buggy": true, "line_num": 15, "prob": 5.351944933185589e-05}, {"buggy": true, "line_num": 12, "prob": 4.821592278201239e-05}, {"buggy": true, "line_num": 11, "prob": 3.7980043976761954e-07}, {"buggy": true, "line_num": 6, "prob": 7.008236347320207e-08}, {"buggy": true, "line_num": 20, "prob": 1.3881046042903642e-09}, {"buggy": true, "line_num": 7, "prob": 5.612034318115447e-10}]}
{"project": "apereo.cas", "commit": "b64bf812c8715d80575cdb114e0e809b99cb02b9", "file_path": "cas-server-support-memcached-ticket-registry/src/main/java/org/apereo/cas/ticket/registry/MemCacheTicketRegistry.java", "func_code": "  public void addTicket(final Ticket ticketToAdd) {\n    if (this.client == null) {\n      logger.debug(\"No memcached client is found in the configuration.\");\n      return;\n    }\n\n    final Ticket ticket = encodeTicket(ticketToAdd);\n    logger.debug(\"Adding ticket {}\", ticket);\n    try {\n      if (!this.client.add(ticket.getId(), getTimeout(ticketToAdd), ticket).get()) {\n        logger.error(\"Failed to add {}\", ticket);\n      }\n    } catch (final InterruptedException e) {\n      logger.warn(\n          \"Interrupted while waiting for response to async add operation for ticket {}.\"\n              + \"Cannot determine whether add was successful.\",\n          ticket);\n    } catch (final Exception e) {\n      logger.error(\"Failed adding {}\", ticket, e);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 243, "predictions": [{"buggy": true, "line_num": 16, "prob": 0.9995235092011516}, {"buggy": true, "line_num": 9, "prob": 0.0004760402247151701}, {"buggy": false, "line_num": -1, "prob": 5.886425870962543e-09}, {"buggy": true, "line_num": 1, "prob": 6.282369323547738e-12}, {"buggy": true, "line_num": 10, "prob": 1.066286742409578e-15}, {"buggy": true, "line_num": 18, "prob": 4.644404181627486e-16}, {"buggy": true, "line_num": 12, "prob": 1.5860396595538603e-20}, {"buggy": true, "line_num": 8, "prob": 1.3312607837940562e-20}]}
{"project": "igniterealtime.Openfire", "commit": "981e2b2968b418471b47b064f910e7a21c6eb113", "file_path": "src/java/org/jivesoftware/messenger/IQRouter.java", "func_code": "  public void route(IQ packet) {\n    if (packet == null) {\n      throw new NullPointerException();\n    }\n    Session session = sessionManager.getSession(packet.getFrom());\n    if (session == null\n        || session.getStatus() == Session.STATUS_AUTHENTICATED\n        || (isLocalServer(packet.getTo())\n            && (\"jabber:iq:auth\".equals(packet.getChildElement().getNamespaceURI())\n                || \"jabber:iq:register\".equals(packet.getChildElement().getNamespaceURI())))) {\n      handle(packet);\n    } else {\n      IQ reply = IQ.createResultIQ(packet);\n      reply.setChildElement(packet.getChildElement().createCopy());\n      packet.setError(PacketError.Condition.not_authorized);\n      sessionManager.getSession(packet.getFrom()).process(reply);\n    }\n  }\n", "line_num": 14, "charoffset": 12, "length": 53, "error": "packet.setError(PacketError.Condition.not_authorized)", "repair": "reply.setError(PacketError.Condition.not_authorized)", "task_id": 367, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.9999854564669316}, {"buggy": false, "line_num": -1, "prob": 4.858098085617211e-14}, {"buggy": true, "line_num": 7, "prob": 7.673738384694525e-22}, {"buggy": true, "line_num": 11, "prob": 4.47436188079129e-22}, {"buggy": true, "line_num": 9, "prob": 1.1932910562811896e-24}, {"buggy": true, "line_num": 12, "prob": 1.0593934514491129e-24}, {"buggy": true, "line_num": 13, "prob": 3.203965584533073e-25}, {"buggy": true, "line_num": 4, "prob": 2.9153304048517444e-25}, {"buggy": true, "line_num": 10, "prob": 2.6698338469438403e-25}, {"buggy": true, "line_num": 15, "prob": 1.365892776518602e-25}, {"buggy": true, "line_num": 8, "prob": 1.1449307819818669e-25}, {"buggy": true, "line_num": 6, "prob": 1.692348902609162e-26}]}
{"project": "JetBrains.kotlin", "commit": "3660d51f34a13145d5a567e2e34de7526b082e4f", "file_path": "compiler/frontend/src/org/jetbrains/jet/lang/resolve/calls/autocasts/DataFlowInfo.java", "func_code": "  public DataFlowInfo equate(@NotNull DataFlowValue a, @NotNull DataFlowValue b) {\n    Map<DataFlowValue, Nullability> builder = Maps.newHashMap(nullabilityInfo);\n    Nullability nullabilityOfA = getNullability(a);\n    Nullability nullabilityOfB = getNullability(b);\n\n    boolean changed = false;\n    changed |= putNullability(builder, a, nullabilityOfA.refine(nullabilityOfB));\n    changed |= putNullability(builder, b, nullabilityOfA.refine(nullabilityOfA));\n    return changed ? new DataFlowInfo(ImmutableMap.copyOf(builder), typeInfo) : this;\n  }\n", "line_num": 7, "charoffset": 46, "length": 37, "error": "nullabilityOfA.refine(nullabilityOfA)", "repair": "nullabilityOfB.refine(nullabilityOfA)", "task_id": 92, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.9996940801542827}, {"buggy": false, "line_num": -1, "prob": 0.00014053295379482154}, {"buggy": true, "line_num": 8, "prob": 2.568678448107873e-08}, {"buggy": true, "line_num": 2, "prob": 1.6780655999735875e-10}, {"buggy": true, "line_num": 1, "prob": 1.5818181747660909e-10}, {"buggy": true, "line_num": 7, "prob": 1.2774477525398127e-10}, {"buggy": true, "line_num": 3, "prob": 1.623319764246511e-13}]}
{"project": "Alluxio.alluxio", "commit": "9fa5e4ef4b995bbf12483ad0960a69ccab416a0b", "file_path": "shell/src/main/java/alluxio/cli/ConfigurationDocGenerator.java", "func_code": "  public static void main(String[] args) throws IOException {\n    Collection<? extends PropertyKey> defaultKeys = PropertyKey.defaultKeys();\n    String homeDir = Configuration.get(PropertyKey.HOME);\n    // generate CSV files\n    String filePath = PathUtils.concatPath(homeDir, CSV_FILE_DIR);\n    writeCSVFile(defaultKeys, filePath);\n    // generate YML files\n    filePath = PathUtils.concatPath(homeDir, YML_FILE_DIR);\n    writeYMLFile(defaultKeys, filePath);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 1, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999473094925042}, {"buggy": true, "line_num": 7, "prob": 3.6644390998951376e-08}, {"buggy": true, "line_num": 8, "prob": 8.466927156107317e-11}, {"buggy": true, "line_num": 4, "prob": 8.695844152102974e-12}, {"buggy": true, "line_num": 5, "prob": 3.6279275888501693e-12}]}
{"project": "wildfly.wildfly", "commit": "6031e948694c50252def3e1df5a65323567e03ed", "file_path": "security/src/test/java/org/jboss/as/security/test/SecurityDomainModelv1UnitTestCase.java", "func_code": "  public void testParseAndMarshalModelWithJASPI() throws Exception {\n    // Parse the subsystem xml and install into the first controller\n    String subsystemXml = readResource(\"securitysubsystemJASPIv1.xml\");\n\n    KernelServices servicesA =\n        super.installInController(AdditionalInitialization.MANAGEMENT, subsystemXml);\n    // Get the model and the persisted xml from the first controller\n    ModelNode modelA = servicesA.readWholeModel();\n    String marshalled = servicesA.getPersistedSubsystemXml();\n    servicesA.shutdown();\n\n    System.out.println(marshalled);\n\n    // Install the persisted xml from the first controller into a second controller\n    KernelServices servicesB =\n        super.installInController(AdditionalInitialization.MANAGEMENT, marshalled);\n    ModelNode modelB = servicesB.readWholeModel();\n\n    // Make sure the models from the two controllers are identical\n    super.compare(modelA, modelB);\n\n    assertRemoveSubsystemResources(servicesA);\n  }\n", "line_num": 21, "charoffset": 8, "length": 41, "error": "assertRemoveSubsystemResources(servicesA)", "repair": "assertRemoveSubsystemResources(servicesB)", "task_id": 535, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9992086949958233}, {"buggy": true, "line_num": 21, "prob": 7.82822823182255e-06}, {"buggy": true, "line_num": 9, "prob": 6.63900184196111e-11}, {"buggy": true, "line_num": 7, "prob": 1.5363524369664076e-11}, {"buggy": true, "line_num": 15, "prob": 1.5181869600553025e-11}, {"buggy": true, "line_num": 8, "prob": 1.4123985457682e-11}, {"buggy": true, "line_num": 16, "prob": 3.3449840561141734e-12}, {"buggy": true, "line_num": 11, "prob": 1.8045971289060508e-12}, {"buggy": true, "line_num": 19, "prob": 7.980344697075751e-13}, {"buggy": true, "line_num": 5, "prob": 2.4902073361684414e-13}, {"buggy": true, "line_num": 4, "prob": 7.40425415247033e-14}]}
{"project": "oracle.graal", "commit": "195c36427295af1ece3302cfc4cfffe833a405ac", "file_path": "projects/com.oracle.truffle.llvm.nodes/src/com/oracle/truffle/llvm/nodes/intrinsics/interop/LLVMTruffleReadNString.java", "func_code": "  public Object interop(\n      LLVMTruffleObject objectWithOffset,\n      int n,\n      @Cached(\"createForeignReadNode()\") Node foreignRead,\n      @Cached(\"createToByteNode()\") ForeignToLLVM toLLVM) {\n    long offset = objectWithOffset.getOffset();\n    TruffleObject object = objectWithOffset.getObject();\n    char[] chars = new char[n];\n    for (int i = 0; i < n; i++) {\n      Object rawValue;\n      try {\n        rawValue = ForeignAccess.sendRead(foreignRead, object, offset + n);\n      } catch (UnknownIdentifierException | UnsupportedMessageException e) {\n        CompilerDirectives.transferToInterpreter();\n        throw new IllegalStateException(e);\n      }\n      byte byteValue = (byte) toLLVM.executeWithTarget(rawValue);\n      chars[i] = (char) Byte.toUnsignedInt(byteValue);\n    }\n    return new String(chars);\n  }\n", "line_num": 11, "charoffset": 71, "length": 10, "error": "offset + n", "repair": "offset + i", "task_id": 458, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.8200923811843858}, {"buggy": false, "line_num": -1, "prob": 0.00021798742315657662}, {"buggy": true, "line_num": 8, "prob": 2.6543177116752292e-17}]}
{"project": "nutzam.nutz", "commit": "064a54e76a806d9ff679af64b0cba96ab98b689f", "file_path": "src/org/nutz/ioc/loader/combo/ComboIocLoader.java", "func_code": "  private void createIocLoader(String className, List<String> args) throws ClassNotFoundException {\n    Class<? extends IocLoader> klass = loaders.get(className);\n    if (klass == null) {\n      if (!className.contains(\".\")) {\n        Set<String> _names = new HashSet<String>();\n        String uccp = Strings.upperFirst(className);\n        _names.add(String.format(\"org.nutz.integration.%s.%sIocLoader\", className, uccp));\n        _names.add(String.format(\"org.nutz.integration.%s.%sAopConfigure\", className, uccp));\n        _names.add(String.format(\"org.nutz.plugins.%s.%sIocLoader\", className, uccp));\n        _names.add(String.format(\"org.nutz.plugins.%s.%sAopConfigure\", className, uccp));\n        // \u5bfb\u627e\u63d2\u4ef6\u6216\u96c6\u6210\u7c7b @since 1.r.57\n        for (String _className : _names) {\n          klass = (Class<? extends IocLoader>) Lang.loadClassQuite(_className);\n          if (klass != null) {\n            log.debug(\"found \" + className + \" -- \" + _className);\n            break;\n          }\n        }\n      }\n      if (klass == null) klass = (Class<? extends IocLoader>) Lang.loadClass(className);\n    }\n    iocLoaders.add((IocLoader) Mirror.me(klass).born(args.toArray(new Object[args.size()])));\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 447, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9995575803825593}, {"buggy": true, "line_num": 19, "prob": 6.179037659247833e-05}, {"buggy": true, "line_num": 6, "prob": 4.1750522141560913e-11}, {"buggy": true, "line_num": 1, "prob": 3.976307178193629e-12}, {"buggy": true, "line_num": 21, "prob": 2.662665721225469e-12}, {"buggy": true, "line_num": 5, "prob": 1.3056964812944844e-12}, {"buggy": true, "line_num": 9, "prob": 7.840045688044174e-14}, {"buggy": true, "line_num": 8, "prob": 2.4673751152415475e-14}]}
{"project": "osmandapp.Osmand", "commit": "b9d8edef8fcf6755e73b2a5ee6c3a60ce40f2787", "file_path": "OsmAnd-java/src/net/osmand/render/RenderingRuleProperty.java", "func_code": "  public float parseFloatValue(String value) {\n    if (type == FLOAT_TYPE) {\n      try {\n        int colon = value.indexOf(':');\n        if (colon != -1) {\n          float c = 0;\n          if (c > 0) {\n            c += Float.parseFloat(value.substring(0, colon));\n          }\n          c += Float.parseFloat(value.substring(colon + 1));\n          return c;\n        }\n        return Float.parseFloat(value);\n      } catch (NumberFormatException e) {\n        log.error(\"Rendering parse \" + value);\n      }\n      return -1;\n    } else {\n      return -1;\n    }\n  }\n", "line_num": 6, "charoffset": 8, "length": 5, "error": "c > 0", "repair": "colon > 0", "task_id": 476, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.9521619410244904}, {"buggy": false, "line_num": -1, "prob": 0.047824936028521114}, {"buggy": true, "line_num": 7, "prob": 8.83895536580265e-15}, {"buggy": true, "line_num": 14, "prob": 4.481945509456449e-15}, {"buggy": true, "line_num": 9, "prob": 7.139316997234907e-17}, {"buggy": true, "line_num": 1, "prob": 1.370266485220436e-17}]}
{"project": "nutzam.nutz", "commit": "2cb6eba9bf6eedd8c2a6c05762d72bf2f384b77b", "file_path": "src/org/nutz/conf/NutConf.java", "func_code": "  public static Object getOrDefault(String key, Object defaultValue) {\n    Object re = me().map.get(key);\n    if (re == null) return defaultValue;\n    return key;\n  }\n", "line_num": 3, "charoffset": 8, "length": 11, "error": "return key; ", "repair": "return re; ", "task_id": 445, "predictions": [{"buggy": true, "line_num": 3, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 7.107012316756853e-16}, {"buggy": true, "line_num": 1, "prob": 2.880562040614389e-26}, {"buggy": true, "line_num": 2, "prob": 2.2048216282337504e-28}]}
{"project": "SpringSource.spring-framework", "commit": "37f9c8675804d4282bed9d2d1fb9da9761aee86a", "file_path": "spring-core/src/main/java/org/springframework/core/ReactiveAdapterRegistry.java", "func_code": "  public ReactiveAdapter getAdapter(Class<?> reactiveType, Object source) {\n    Object sourceToUse =\n        (source instanceof Optional ? ((Optional<?>) source).orElse(null) : source);\n    Class<?> clazz = (sourceToUse != null ? sourceToUse.getClass() : reactiveType);\n\n    if (reactiveType == null) {\n      return null;\n    }\n\n    return this.adapters.stream()\n        .filter(adapter -> adapter.getReactiveType() == clazz)\n        .findFirst()\n        .orElseGet(\n            () ->\n                this.adapters.stream()\n                    .filter(adapter -> adapter.getReactiveType().isAssignableFrom(clazz))\n                    .findFirst()\n                    .orElse(null));\n  }\n", "line_num": 5, "charoffset": 6, "length": 20, "error": "reactiveType == null", "repair": "clazz == null", "task_id": 120, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9808030120195395}, {"buggy": true, "line_num": 10, "prob": 3.4835582205808255e-08}, {"buggy": false, "line_num": -1, "prob": 6.671186789711382e-09}, {"buggy": true, "line_num": 14, "prob": 1.4418721588073572e-18}, {"buggy": true, "line_num": 3, "prob": 1.2826709668933613e-20}, {"buggy": true, "line_num": 9, "prob": 4.112616501531159e-21}]}
{"project": "JetBrains.intellij-community", "commit": "c59e600b8fb7490364b9a8a6b0e52c2af5756b10", "file_path": "plugins/groovy/src/org/jetbrains/plugins/groovy/gpp/GppExpectedTypesContributor.java", "func_code": "  private static List<TypeConstraint> addExpectedConstructorParameters(\n      GrExpression expression, GrListOrMap list) {\n    final PsiType listType = list.getType();\n    if (!(listType instanceof GrTupleType)) {\n      return Collections.emptyList();\n    }\n\n    final PsiType[] argTypes = ((GrTupleType) listType).getComponentTypes();\n    final int argIndex = Arrays.asList(list.getInitializers()).indexOf(expression);\n    assert argIndex >= 0;\n\n    final ArrayList<TypeConstraint> result = new ArrayList<TypeConstraint>();\n    for (PsiType type : GroovyExpectedTypesProvider.getDefaultExpectedTypes(list)) {\n      if (type instanceof PsiClassType) {\n        for (GroovyResolveResult resolveResult :\n            PsiUtil.getConstructorCandidates((PsiClassType) type, argTypes, list)) {\n          final PsiElement method = resolveResult.getElement();\n          if (method instanceof PsiMethod && ((PsiMethod) method).isConstructor()) {\n            final PsiParameter[] constructorParameters =\n                ((PsiMethod) method).getParameterList().getParameters();\n            if (constructorParameters.length > argIndex) {\n              final PsiType toCastTo =\n                  resolveResult\n                      .getSubstitutor()\n                      .substitute(constructorParameters[argIndex].getType());\n              result.add(SubtypeConstraint.create(toCastTo));\n            }\n          }\n        }\n      }\n    }\n    return result;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 69, "predictions": [{"buggy": true, "line_num": 15, "prob": 0.6218850231045069}, {"buggy": true, "line_num": 8, "prob": 0.0013482372363091528}, {"buggy": false, "line_num": -1, "prob": 5.403367650802456e-09}, {"buggy": true, "line_num": 12, "prob": 2.378765360652864e-10}]}
{"project": "apache.beam", "commit": "43d0e7834c2d8cfbb1b3a83a222759d88443c7d9", "file_path": "sdk/src/main/java/com/google/cloud/dataflow/sdk/util/common/worker/StateSampler.java", "func_code": "  public int stateForName(String name, StateKind kind) {\n    if (name.isEmpty()) {\n      return DO_NOT_SAMPLE;\n    }\n\n    String counterName = prefix + name + \"-msecs\";\n    synchronized (this) {\n      Integer state = statesByName.get(counterName);\n      if (state == null) {\n        Counter<Long> counter =\n            counterSetMutator.addCounter(Counter.longs(counterName, Counter.AggregationKind.SUM));\n        state = countersByState.size();\n        statesByName.put(name, state);\n        countersByState.add(counter);\n        kindsByState.put(state, kind);\n      }\n      StateKind originalKind = kindsByState.get(state);\n      if (originalKind != kind) {\n        throw new IllegalArgumentException(\n            \"for state named \"\n                + name\n                + \", requested kind \"\n                + kind\n                + \" different from the original kind \"\n                + originalKind);\n      }\n      return state;\n    }\n  }\n", "line_num": 12, "charoffset": 8, "length": 29, "error": "statesByName.put(name,state)", "repair": "statesByName.put(counterName,state)", "task_id": 165, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.9091194776979401}, {"buggy": false, "line_num": -1, "prob": 0.008765913068200997}, {"buggy": true, "line_num": 12, "prob": 0.000627216400361202}, {"buggy": true, "line_num": 17, "prob": 2.5455784071290763e-07}, {"buggy": true, "line_num": 26, "prob": 5.2083571731398984e-08}, {"buggy": true, "line_num": 1, "prob": 3.9975712911353866e-11}, {"buggy": true, "line_num": 10, "prob": 2.119105050882281e-11}, {"buggy": true, "line_num": 20, "prob": 1.3539087873148995e-11}, {"buggy": true, "line_num": 22, "prob": 1.1820066736674972e-11}]}
{"project": "liferay.liferay-plugins", "commit": "5c34dfb77d542e4027e5b4db1ae5c2ba80edfe69", "file_path": "portlets/knowledge-base-portlet/docroot/WEB-INF/src/com/liferay/knowledgebase/service/impl/KBArticleLocalServiceImpl.java", "func_code": "  public void updateKBArticlePriority(KBArticle kbArticle, double priority)\n      throws PortalException, SystemException {\n\n    List<KBArticle> kbArticleVersions =\n        getKBArticleVersions(\n            kbArticle.getResourcePrimKey(),\n            WorkflowConstants.STATUS_ANY,\n            QueryUtil.ALL_POS,\n            QueryUtil.ALL_POS,\n            null);\n\n    for (KBArticle kbArticleVersion : kbArticleVersions) {\n      kbArticleVersion.setPriority(priority);\n\n      kbArticlePersistence.update(kbArticleVersion);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 394, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9998134408235826}, {"buggy": true, "line_num": 14, "prob": 1.7984888857237355e-05}, {"buggy": true, "line_num": 5, "prob": 4.322609083229611e-12}, {"buggy": true, "line_num": 12, "prob": 3.80673754531357e-12}]}
{"project": "mybatis.mybatis-3", "commit": "96b6a1313d3c25e4ab7b5f2604385311497d8b65", "file_path": "src/main/java/org/apache/ibatis/executor/resultset/FastResultSetHandler.java", "func_code": "  protected void handleRefCursorOutputParameter(\r\n      CallableStatement cs,\r\n      ParameterMapping parameterMapping,\r\n      int parameterMappingIndex,\r\n      MetaObject metaParam)\r\n      throws SQLException {\r\n    final ResultSet rs = (ResultSet) cs.getObject(parameterMappingIndex + 1);\r\n    final String resultMapId = parameterMapping.getResultMapId();\r\n    if (resultMapId != null) {\r\n      final ResultMap resultMap = configuration.getResultMap(resultMapId);\r\n      final DefaultResultHandler resultHandler =\r\n          new DefaultResultHandler(configuration.getDefaultListResultHandlerType());\r\n      ResultColumnCache resultColumnCache = new ResultColumnCache(rs.getMetaData(), configuration);\r\n      handleRowValues(rs, resultMap, resultHandler, new RowBounds(), resultColumnCache);\r\n      metaParam.setValue(parameterMapping.getProperty(), resultHandler.getResultList());\r\n    } else {\r\n      throw new ExecutorException(\r\n          \"Parameter requires ResultMap for output types of java.sql.ResultSet\");\r\n    }\r\n    rs.close();\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 434, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9984867490247595}, {"buggy": true, "line_num": 14, "prob": 0.0008103364179884554}, {"buggy": true, "line_num": 8, "prob": 3.069998714526925e-08}, {"buggy": true, "line_num": 19, "prob": 2.080313045772758e-09}, {"buggy": true, "line_num": 13, "prob": 3.4190839299546427e-10}, {"buggy": true, "line_num": 12, "prob": 5.0977320711118835e-11}, {"buggy": true, "line_num": 7, "prob": 4.609943188664664e-11}]}
{"project": "eclipse.smarthome", "commit": "92fa1cb8ab5dca3944dc0cff6fa4268191a4024e", "file_path": "bundles/automation/org.eclipse.smarthome.automation.provider.file/src/main/java/org/eclipse/smarthome/automation/internal/provider/file/AbstractFileProvider.java", "func_code": "  public void importResources(File file) {\n    if (file.exists()) {\n      File[] files = file.listFiles();\n      if (files != null) {\n        for (File f : files) {\n          if (!file.isHidden()) {\n            importResources(f);\n          }\n        }\n      } else {\n        try {\n          URL url = file.toURI().toURL();\n          String parserType = getParserType(url);\n          importFile(parserType, url);\n        } catch (MalformedURLException e) {\n          // can't happen for the 'file' protocol handler with a correctly formatted URI\n          logger.debug(\"Can't create a URL\", e);\n        }\n      }\n    }\n  }\n", "line_num": 5, "charoffset": 25, "length": 15, "error": "file.isHidden()", "repair": "f.isHidden()", "task_id": 288, "predictions": [{"buggy": true, "line_num": 5, "prob": 1.0}, {"buggy": true, "line_num": 13, "prob": 3.260462717307219e-12}, {"buggy": false, "line_num": -1, "prob": 3.237209630023237e-14}, {"buggy": true, "line_num": 11, "prob": 2.4889568952673374e-18}, {"buggy": true, "line_num": 16, "prob": 6.4784015918082426e-21}, {"buggy": true, "line_num": 2, "prob": 9.540785419689624e-25}]}
{"project": "liferay.liferay-portal", "commit": "924d1c95ec0f28bb3d39de78867815da97aa6f3c", "file_path": "modules/apps/mobile-device-rules/mobile-device-rules-web/src/main/java/com/liferay/mobile/device/rules/web/form/navigator/LayoutSetMobileDeviceRulesFormNavigatorEntry.java", "func_code": "  public String getLabel(Locale locale) {\n    ResourceBundle resourceBundle =\n        ResourceBundleUtil.getBundle(\"content.Language\", locale, getClass());\n\n    return LanguageUtil.get(locale, getKey());\n  }\n", "line_num": 4, "charoffset": 9, "length": 34, "error": "LanguageUtil.get(locale,getKey())", "repair": "LanguageUtil.get(resourceBundle,getKey())", "task_id": 403, "predictions": [{"buggy": true, "line_num": 4, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 1.1252055110340675e-15}, {"buggy": true, "line_num": 1, "prob": 1.560965612289136e-23}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "7cb73aa0ba69f42965d2561c78740ad8145b3b44", "file_path": "packages/SystemUI/src/com/android/systemui/statusbar/car/CarNavigationBarController.java", "func_code": "  public void onPackageChange(String packageName) {\n    if (mFacetPackageMap.containsKey(packageName)) {\n      int index = mFacetPackageMap.get(packageName);\n      mFacetHasMultipleAppsCache.put(index, facetHasMultiplePackages(index));\n      // No need to check categories because we've already refreshed the cache.\n      return;\n    }\n\n    String category = getPackageCategory(packageName);\n    if (mFacetCategoryMap.containsKey(category)) {\n      int index = mFacetCategoryMap.get(packageName);\n      mFacetHasMultipleAppsCache.put(index, facetHasMultiplePackages(index));\n    }\n  }\n", "line_num": 10, "charoffset": 24, "length": 34, "error": "mFacetCategoryMap.get(packageName)", "repair": "mFacetCategoryMap.get(category)", "task_id": 144, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.5099443440046185}, {"buggy": true, "line_num": 11, "prob": 0.2627078767809048}, {"buggy": false, "line_num": -1, "prob": 0.07222684297816717}, {"buggy": true, "line_num": 10, "prob": 3.4733391519592923e-09}, {"buggy": true, "line_num": 9, "prob": 1.3390109942287653e-11}, {"buggy": true, "line_num": 8, "prob": 4.757317033455579e-13}, {"buggy": true, "line_num": 2, "prob": 1.812267464626108e-13}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "ac521ec3f59b1d6e7c313a3c2e4b7afb372e01e9", "file_path": "services/core/java/com/android/server/fingerprint/RemovalClient.java", "func_code": "  private boolean sendRemoved(int fingerId, int groupId, int remaining) {\n    IFingerprintServiceReceiver receiver = getReceiver();\n    try {\n      if (receiver != null) {\n        // TODO: plumb remaining\n        receiver.onRemoved(getHalDeviceId(), fingerId, groupId, remaining);\n      }\n    } catch (RemoteException e) {\n      Slog.w(TAG, \"Failed to notify Removed:\", e);\n    }\n    return fingerId == 0;\n  }\n", "line_num": 10, "charoffset": 15, "length": 13, "error": "fingerId == 0", "repair": "remaining == 0", "task_id": 138, "predictions": [{"buggy": true, "line_num": 10, "prob": 0.9978202581721026}, {"buggy": false, "line_num": -1, "prob": 8.075670248024918e-11}, {"buggy": true, "line_num": 8, "prob": 5.93487758034706e-21}, {"buggy": true, "line_num": 3, "prob": 2.4068976092012833e-21}, {"buggy": true, "line_num": 5, "prob": 4.4154722475434304e-23}]}
{"project": "elastic.elasticsearch", "commit": "6342beeeb0a4624fb1cc6fcdd0e17c247fac550b", "file_path": "src/main/java/org/elasticsearch/index/analysis/Analysis.java", "func_code": "  public static CharArraySet parseStopWords(\n      Environment env,\n      Settings settings,\n      CharArraySet defaultStopWords,\n      Version version,\n      boolean ignore_case) {\n    String value = settings.get(\"stopwords\");\n    if (value != null) {\n      if (\"_none_\".equals(value)) {\n        return CharArraySet.EMPTY_SET;\n      } else {\n        return resolveNamedStopWords(Strings.commaDelimitedListToSet(value), version, ignore_case);\n      }\n    }\n    String[] stopWords = settings.getAsArray(\"stopwords\", null);\n    if (stopWords != null) {\n      return resolveNamedStopWords(stopWords, version, ignore_case);\n    }\n    List<String> pathLoadedStopWords = getWordList(env, settings, \"stopwords\");\n    if (pathLoadedStopWords != null) {\n      return resolveNamedStopWords(pathLoadedStopWords, version, ignore_case);\n    }\n\n    return defaultStopWords;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 294, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9768554035292597}, {"buggy": true, "line_num": 18, "prob": 0.0003706533560817162}, {"buggy": true, "line_num": 6, "prob": 2.3255137627924253e-07}, {"buggy": true, "line_num": 8, "prob": 3.9876581963493506e-10}, {"buggy": true, "line_num": 7, "prob": 2.205548442212954e-10}, {"buggy": true, "line_num": 11, "prob": 8.346000382200393e-11}, {"buggy": true, "line_num": 14, "prob": 1.0107693717051421e-11}, {"buggy": true, "line_num": 20, "prob": 6.657054921838e-12}, {"buggy": true, "line_num": 3, "prob": 3.76431141878894e-12}]}
{"project": "oracle.graal", "commit": "8ab1a68fc84e83e742a3a8473c902acce2fe818f", "file_path": "graal/org.graalvm.compiler.core.test/src/org/graalvm/compiler/core/test/CooperativePhaseTest.java", "func_code": "  public void test03() {\n    initializeForTimeout();\n    // 0 disables alarm utility\n    OptionValues initialOptions = getInitialOptions();\n    OptionValues options = new OptionValues(initialOptions, CompilationExpirationPeriod, 0);\n    try (CompilationAlarm c1 = CompilationAlarm.trackCompilationPeriod(options)) {\n      StructuredGraph g = parseEager(\"snippet\", AllowAssumptions.NO, options);\n      new PartiallyCooperativePhase().apply(g);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 461, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.9998340699257694}, {"buggy": false, "line_num": -1, "prob": 5.386163978318118e-05}, {"buggy": true, "line_num": 5, "prob": 4.254422947357972e-09}, {"buggy": true, "line_num": 6, "prob": 1.1981908963881022e-15}]}
{"project": "dangdangdotcom.sharding-jdbc", "commit": "6d7d0a485b95c8285411ffad8a5c405801f9e10e", "file_path": "sharding-core/src/main/java/io/shardingsphere/core/parsing/antler/phrase/visitor/RenameColumnVisitor.java", "func_code": "  public void visit(final ParserRuleContext ancestorNode, final SQLStatement statement) {\n    AlterTableStatement alterStatement = (AlterTableStatement) statement;\n\n    ParserRuleContext modifyColumnCtx =\n        TreeUtils.getFirstChildByRuleName(ancestorNode, \"renameColumn\");\n    if (null == modifyColumnCtx) {\n      return;\n    }\n\n    List<ParserRuleContext> columnNodes =\n        TreeUtils.getAllDescendantByRuleName(modifyColumnCtx, \"columnName\");\n    if (null == columnNodes || columnNodes.size() != 2) {\n      return;\n    }\n\n    String oldName = columnNodes.get(0).getText();\n    String newName = columnNodes.get(1).getText();\n    ColumnDefinition oldDefinition = alterStatement.getUpdateColumns().remove(oldName);\n    if (null != oldDefinition) {\n      oldDefinition.setName(newName);\n    } else {\n      oldDefinition = new ColumnDefinition(newName, null, null, false);\n    }\n\n    alterStatement.getUpdateColumns().put(oldName, oldDefinition);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 262, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7889035132592278}, {"buggy": true, "line_num": 24, "prob": 0.07934740205842442}, {"buggy": true, "line_num": 17, "prob": 0.0010675004834779696}, {"buggy": true, "line_num": 21, "prob": 8.284555865662762e-06}, {"buggy": true, "line_num": 10, "prob": 1.0168581769306301e-08}, {"buggy": true, "line_num": 19, "prob": 9.663044504175206e-11}, {"buggy": true, "line_num": 18, "prob": 5.079824382704749e-11}]}
{"project": "go-lang-plugin-org.go-lang-idea-plugin", "commit": "0bcfd659afb07af4f97467c83e78549346377de4", "file_path": "src/com/goide/sdk/GoSdkService.java", "func_code": "  public static String getGoExecutablePath(@Nullable String sdkHomePath) {\n    if (sdkHomePath != null) {\n      if (isAppEngineSdkPath(sdkHomePath)) {\n        String goExecutablePath = PathUtil.toSystemIndependentName(sdkHomePath);\n        goExecutablePath =\n            StringUtil.trimEnd(goExecutablePath, GoConstants.APP_ENGINE_GO_ROOT_DIRECTORY_PATH);\n\n        boolean gcloudInstallation =\n            sdkHomePath.endsWith(GoConstants.GCLOUD_APP_ENGINE_DIRECTORY_PATH);\n        if (gcloudInstallation) {\n          goExecutablePath =\n              FileUtil.join(\n                  StringUtil.trimEnd(\n                      goExecutablePath, GoConstants.GCLOUD_APP_ENGINE_DIRECTORY_PATH),\n                  \"bin\");\n        }\n        return FileUtil.join(\n            goExecutablePath, GoEnvironmentUtil.getGaeExecutableFileName(gcloudInstallation));\n      } else {\n        return FileUtil.join(\n            sdkHomePath,\n            \"bin\",\n            GoEnvironmentUtil.getBinaryFileNameForPath(GoConstants.GO_EXECUTABLE_NAME));\n      }\n    }\n    return null;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 325, "predictions": [{"buggy": true, "line_num": 17, "prob": 0.9997179202398395}, {"buggy": true, "line_num": 8, "prob": 9.682732044578322e-05}, {"buggy": false, "line_num": -1, "prob": 4.680600070111032e-06}, {"buggy": true, "line_num": 9, "prob": 1.6931739448974901e-09}, {"buggy": true, "line_num": 13, "prob": 2.753084756335433e-15}, {"buggy": true, "line_num": 20, "prob": 6.118873233479276e-16}, {"buggy": true, "line_num": 10, "prob": 2.980792715965607e-16}, {"buggy": true, "line_num": 2, "prob": 2.362088416026489e-16}, {"buggy": true, "line_num": 3, "prob": 1.5184147717283182e-16}]}
{"project": "hazelcast.hazelcast", "commit": "6d4e9989f7d371e2871210eb285562ac4821d856", "file_path": "hazelcast-client/src/main/java/com/hazelcast/client/spi/impl/ClientExecutionServiceImpl.java", "func_code": "  public <T> ICompletableFuture<T> submitInternal(final Callable<T> command) {\n    CompletableFutureTask futureTask = new CompletableFutureTask(command, internalExecutor);\n    internalExecutor.submit(futureTask);\n    return futureTask;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 358, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7784690889569857}, {"buggy": true, "line_num": 3, "prob": 2.54005372959646e-13}, {"buggy": true, "line_num": 1, "prob": 1.8629779047389245e-13}, {"buggy": true, "line_num": 2, "prob": 1.7997289227953386e-13}]}
{"project": "MovingBlocks.Terasology", "commit": "3c9ab7aee93d305eba4a7343ccdaf0a56345bb41", "file_path": "engine/src/main/java/org/terasology/asset/sources/DirectorySource.java", "func_code": "  private void scanOverrides(Path overrideDirectory, Path basePath) {\n    try {\n      for (Path child : Files.newDirectoryStream(overrideDirectory)) {\n        if (Files.isDirectory(child)) {\n          scanOverrides(child, basePath);\n        } else if (Files.isRegularFile(child)) {\n          Path relativePath = basePath.relativize(child);\n          Path modulePath = relativePath.subpath(0, 1);\n          AssetUri uri = getUri(modulePath.toString(), modulePath.relativize(relativePath));\n          if (uri != null) {\n            try {\n              addOverride(uri, child.toUri().toURL());\n            } catch (MalformedURLException e) {\n              logger.warn(\"Failed to load override {}\", child, e.getMessage());\n            }\n          }\n        }\n      }\n    } catch (IOException e) {\n      logger.error(\"Failed to scan override path: {}\", overrideDirectory, e);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 104, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.43961700569832457}, {"buggy": true, "line_num": 11, "prob": 0.3240285787386654}, {"buggy": true, "line_num": 8, "prob": 6.714853329328487e-05}, {"buggy": true, "line_num": 13, "prob": 6.027578719223049e-10}, {"buggy": true, "line_num": 9, "prob": 9.85966580027675e-11}, {"buggy": true, "line_num": 19, "prob": 6.246169729496019e-11}, {"buggy": true, "line_num": 7, "prob": 5.0671283120449054e-11}]}
{"project": "gephi.gephi", "commit": "72510eeab69456ab24afbf86dcd5db46e09aa2ab", "file_path": "StatisticsAPI/src/org/gephi/statistics/StatisticsModelImpl.java", "func_code": "  public Element writeXML(Document document) {\n    Element modelE = document.createElement(\"statisticsmodel\");\n\n    Element resultsE = document.createElement(\"results\");\n    for (Map.Entry<StatisticsUI, String> entry : resultMap.entrySet()) {\n      if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n        Element resultE = document.createElement(\"result\");\n        resultE.setAttribute(\"class\", entry.getKey().getClass().getName());\n        resultE.setAttribute(\"value\", entry.getValue());\n        resultsE.appendChild(resultE);\n      }\n    }\n    modelE.appendChild(resultsE);\n\n    Element reportsE = document.createElement(\"reports\");\n    for (Map.Entry<Class, String> entry : reportMap.entrySet()) {\n      if (entry.getValue() != null && !entry.getValue().isEmpty()) {\n        Element reportE = document.createElement(\"report\");\n        reportE.setAttribute(\"class\", entry.getKey().getName());\n        reportE.setAttribute(\"value\", entry.getValue());\n        resultsE.appendChild(reportE);\n      }\n    }\n    modelE.appendChild(reportsE);\n\n    return modelE;\n  }\n", "line_num": 20, "charoffset": 16, "length": 29, "error": "resultsE.appendChild(reportE)", "repair": "reportsE.appendChild(reportE)", "task_id": 321, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9654460750524446}, {"buggy": true, "line_num": 4, "prob": 9.059330682225064e-06}, {"buggy": true, "line_num": 25, "prob": 3.908923125968508e-08}, {"buggy": true, "line_num": 20, "prob": 5.522091237383819e-09}, {"buggy": true, "line_num": 12, "prob": 2.5644560554363705e-10}, {"buggy": true, "line_num": 15, "prob": 7.871699610917792e-12}, {"buggy": true, "line_num": 9, "prob": 7.336824992607689e-12}, {"buggy": true, "line_num": 23, "prob": 4.76629288677847e-12}, {"buggy": true, "line_num": 17, "prob": 1.438547214908765e-12}, {"buggy": true, "line_num": 18, "prob": 1.0495008440439034e-12}]}
{"project": "JetBrains.intellij-community", "commit": "8d5c5adbece88b1922c34d41a2469616b2097b64", "file_path": "plugins/groovy/src/org/jetbrains/plugins/groovy/refactoring/convertToJava/ClassGenerator.java", "func_code": "  private static boolean shouldBeGenerated(PsiMethod method) {\n    for (PsiMethod psiMethod : method.findSuperMethods()) {\n      if (!psiMethod.hasModifierProperty(PsiModifier.ABSTRACT)) {\n        final PsiType type = method.getReturnType();\n        final PsiType superType = psiMethod.getReturnType();\n        if (type != null && superType != null && !superType.isAssignableFrom(type)) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 63, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.6765046798362311}, {"buggy": false, "line_num": -1, "prob": 0.3102056085392954}, {"buggy": true, "line_num": 5, "prob": 4.761988131481793e-11}, {"buggy": true, "line_num": 4, "prob": 1.1041643382978168e-11}, {"buggy": true, "line_num": 2, "prob": 3.0594880625094645e-12}, {"buggy": true, "line_num": 1, "prob": 1.0198254110003222e-13}]}
{"project": "JetBrains.intellij-community", "commit": "114762537e793ac1a3eb4354336e057ff7ddb922", "file_path": "java/java-impl/src/com/intellij/codeInspection/SimplifyStreamApiCallChainsInspection.java", "func_code": "  public PsiElement simplify(PsiMethodCallExpression call) {\n    PsiExpression value = myValuePointer.getElement();\n    if (value == null) return null;\n    PsiMethodCallExpression qualifierCall = getQualifierMethodCall(call);\n    if (qualifierCall == null) return null;\n    PsiExpressionList qualifierArgs = qualifierCall.getArgumentList();\n    CommentTracker ct = new CommentTracker();\n    PsiReferenceParameterList typeParameters =\n        qualifierCall.getMethodExpression().getParameterList();\n    String typeParametersText = typeParameters == null ? \"\" : ct.text(typeParameters);\n    PsiElement result =\n        ct.replaceAndRestoreComments(\n            call,\n            CommonClassNames.JAVA_UTIL_ARRAYS\n                + \".\"\n                + typeParametersText\n                + \"asList\"\n                + ct.text(qualifierArgs)\n                + \".contains(\"\n                + ct.text(value)\n                + \")\");\n    return JavaCodeStyleManager.getInstance(call.getProject()).shortenClassReferences(result);\n  }\n", "line_num": 21, "charoffset": 46, "length": 17, "error": "call.getProject()", "repair": "result.getProject()", "task_id": 33, "predictions": [{"buggy": true, "line_num": 12, "prob": 0.9115088506830954}, {"buggy": true, "line_num": 11, "prob": 0.08823108971381793}, {"buggy": false, "line_num": -1, "prob": 0.00020085543289499947}, {"buggy": true, "line_num": 1, "prob": 1.2189109555485637e-06}, {"buggy": true, "line_num": 21, "prob": 4.017161400942757e-11}, {"buggy": true, "line_num": 19, "prob": 4.388526304479981e-13}, {"buggy": true, "line_num": 9, "prob": 3.5218083072000974e-14}]}
{"project": "k9mail.k-9", "commit": "fab31983abac1404f21f20d797275981d65514e3", "file_path": "src/com/fsck/k9/helper/HtmlConverter.java", "func_code": "  protected static void linkifyText(final String text, final StringBuffer outputBuffer) {\n    String prepared = text.replaceAll(Regex.BITCOIN_URI_PATTERN, \"<a href=\\\"$0\\\">$0</a>\");\n\n    Matcher m = Regex.WEB_URL_PATTERN.matcher(prepared);\n    while (m.find()) {\n      int start = m.start();\n      if (start == 0 || (start != 0 && prepared.charAt(start - 1) != '@')) {\n        if (m.group().indexOf(':')\n            > 0) { // With no URI-schema we may get \"http:/\" links with the second / missing\n          m.appendReplacement(outputBuffer, \"<a href=\\\"$0\\\">$0</a>\");\n        } else {\n          m.appendReplacement(outputBuffer, \"<a href=\\\"http://$0\\\">$0</a>\");\n        }\n      } else {\n        m.appendReplacement(outputBuffer, \"$0\");\n      }\n    }\n\n    m.appendTail(outputBuffer);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 378, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9997984509238435}, {"buggy": true, "line_num": 6, "prob": 0.00015469922278658408}, {"buggy": true, "line_num": 3, "prob": 2.8578618740741256e-11}, {"buggy": true, "line_num": 14, "prob": 4.416701455564482e-12}, {"buggy": true, "line_num": 18, "prob": 2.0219222397391432e-14}, {"buggy": true, "line_num": 9, "prob": 1.6063388250682043e-14}]}
{"project": "libgdx.libgdx", "commit": "fa187b882171fc0c6cf049a85bcaae26d2261328", "file_path": "gdx/src/com/badlogic/gdx/utils/Pools.java", "func_code": "  public static void freeAll(Array objects) {\r\n    if (objects == null) throw new IllegalArgumentException(\"objects cannot be null.\");\r\n    for (int i = 0, n = objects.size; i < n; i++) {\r\n      Object object = objects.get(i);\r\n      if (object == null) continue;\r\n      ReflectionPool pool = typePools.get(object.getClass());\r\n      if (pool == null) return; // Ignore freeing an object that was never retained.\r\n      pool.free(object);\r\n    }\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 386, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8790760087790627}, {"buggy": true, "line_num": 7, "prob": 1.4284404796917145e-10}, {"buggy": true, "line_num": 2, "prob": 1.5657192599478885e-11}, {"buggy": true, "line_num": 4, "prob": 2.1961431891136397e-12}, {"buggy": true, "line_num": 6, "prob": 8.426287642584898e-13}, {"buggy": true, "line_num": 5, "prob": 3.238847930726437e-13}]}
{"project": "MinecraftForge.MinecraftForge", "commit": "6a273dd98fa0a642863f2885d534642724a6cb08", "file_path": "fml/common/cpw/mods/fml/common/registry/LanguageRegistry.java", "func_code": "  public void addNameForObject(Object objectToName, String lang, String name) {\n    String objectName;\n    if (objectToName instanceof Item) {\n      objectName = ((Item) objectToName).func_77658_a();\n    } else if (objectToName instanceof Block) {\n      objectName = ((Block) objectToName).func_71917_a();\n    } else if (objectToName instanceof ItemStack) {\n      objectName = ((ItemStack) objectToName).func_77973_b().func_77667_c((ItemStack) objectToName);\n    } else {\n      throw new IllegalArgumentException(\n          String.format(\"Illegal object for naming %s\", objectToName));\n    }\n    objectName += \".name\";\n    addStringLocalization(lang, lang, name);\n  }\n", "line_num": 13, "charoffset": 8, "length": 39, "error": "addStringLocalization(lang,lang,name)", "repair": "addStringLocalization(objectName,lang,name)", "task_id": 100, "predictions": [{"buggy": true, "line_num": 13, "prob": 0.9993893052395771}, {"buggy": false, "line_num": -1, "prob": 0.0006089579216140247}, {"buggy": true, "line_num": 7, "prob": 2.3374089219814915e-11}, {"buggy": true, "line_num": 6, "prob": 1.0583540104307135e-19}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "c07bd57d04136c2140cd4798723651a9e39c32cf", "file_path": "services/java/com/android/server/VibratorService.java", "func_code": "  private void delay(long duration) {\n    if (duration > 0) {\n      long bedtime = duration + SystemClock.uptimeMillis();\n      do {\n        try {\n          this.wait(duration);\n        } catch (InterruptedException e) {\n        }\n        if (mDone) {\n          break;\n        }\n        duration = bedtime - SystemClock.uptimeMillis();\n      } while (duration > 0);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 153, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9902520282485939}, {"buggy": true, "line_num": 12, "prob": 0.007698507634148113}, {"buggy": false, "line_num": -1, "prob": 0.0013673521447006972}, {"buggy": true, "line_num": 11, "prob": 5.760749591347521e-16}, {"buggy": true, "line_num": 8, "prob": 3.7817551967087346e-16}, {"buggy": true, "line_num": 2, "prob": 1.9125564508940308e-16}, {"buggy": true, "line_num": 1, "prob": 1.1877552999559048e-16}, {"buggy": true, "line_num": 6, "prob": 5.4410732800646135e-17}]}
{"project": "JetBrains.intellij-community", "commit": "bfa8e612f332e7bc08ff575de73115c726a0a805", "file_path": "platform/platform-impl/src/com/intellij/openapi/fileTypes/impl/FileTypeManagerImpl.java", "func_code": "  public FileType findFileTypeByName(String fileTypeName) {\n    FileType type = getStdFileType(fileTypeName);\n    // TODO: Abstract file types are not std one, so need to be restored specially,\n    // currently there are 6 of them and restoration does not happen very often so just iteration is\n    // enough\n    if (type == PlainTextFileType.INSTANCE && !fileTypeName.equals(type.getName())) {\n      for (FileType fileType : getRegisteredFileTypes()) {\n        if (fileType.equals(fileType.getName())) {\n          return fileType;\n        }\n      }\n    }\n    return type;\n  }\n", "line_num": 7, "charoffset": 12, "length": 35, "error": "fileType.equals(fileType.getName())", "repair": "fileTypeName.equals(fileType.getName())", "task_id": 49, "predictions": [{"buggy": true, "line_num": 7, "prob": 1.0}, {"buggy": true, "line_num": 5, "prob": 6.613756263245218e-09}, {"buggy": false, "line_num": -1, "prob": 3.161803606665989e-14}, {"buggy": true, "line_num": 8, "prob": 2.3696779370357784e-24}, {"buggy": true, "line_num": 12, "prob": 8.672113244893599e-26}, {"buggy": true, "line_num": 1, "prob": 4.394142550005601e-26}]}
{"project": "oracle.graal", "commit": "89e862f16838cb6e0fd458647d1f3620f175e379", "file_path": "graal/com.oracle.graal.nodes/src/com/oracle/graal/nodes/cfg/ControlFlowGraph.java", "func_code": "  private void computePostdominators() {\n    outer:\n    for (Block block : postOrder()) {\n      if (block.isLoopEnd()) {\n        // We do not want the loop header registered as the postdominator of the loop end.\n        continue;\n      }\n      if (block.getSuccessorCount() == 0) {\n        // No successors => no postdominator.\n        continue;\n      }\n      Block firstSucc = block.getSuccessors().get(0);\n      if (block.getSuccessorCount() == 1) {\n        block.postdominator = block;\n        continue;\n      }\n      Block postdominator = firstSucc;\n      for (Block sux : block.getSuccessors()) {\n        postdominator = commonPostdominator(postdominator, sux);\n        if (postdominator == null) {\n          // There is a dead end => no postdominator available.\n          continue outer;\n        }\n      }\n      assert !block.getSuccessors().contains(postdominator)\n          : \"Block \" + block + \" has a wrong post dominator: \" + postdominator;\n      block.postdominator = postdominator;\n    }\n  }\n", "line_num": 13, "charoffset": 16, "length": 27, "error": "block.postdominator=block", "repair": "block.postdominator=firstSucc", "task_id": 471, "predictions": [{"buggy": true, "line_num": 25, "prob": 0.9953048936739898}, {"buggy": false, "line_num": -1, "prob": 0.0037288523354880687}, {"buggy": true, "line_num": 26, "prob": 0.0005951882111575063}, {"buggy": true, "line_num": 24, "prob": 0.00014785045494204672}, {"buggy": true, "line_num": 18, "prob": 6.9951759075442326e-06}, {"buggy": true, "line_num": 11, "prob": 2.9008383152467084e-09}, {"buggy": true, "line_num": 12, "prob": 1.375787345856507e-09}, {"buggy": true, "line_num": 13, "prob": 9.168508849743805e-11}, {"buggy": true, "line_num": 2, "prob": 5.515480048410638e-13}]}
{"project": "gephi.gephi", "commit": "8639593ad0e6bcbdbe8e6fe3263c9b2550169942", "file_path": "modules/VisualizationImpl/src/main/java/org/gephi/visualization/swing/StandardGraphIO.java", "func_code": "  public void centerOnGraph() {\n    float graphWidth = Math.abs(limits.getMaxXoctree() - limits.getMinXoctree());\n    float graphHeight = Math.abs(limits.getMaxYoctree() - limits.getMinYoctree());\n\n    float currentDistanceGraphRatioX =\n        Math.abs(graphDrawable.viewport.get(2) / (float) graphDrawable.getDraggingMarkerX())\n            / graphDrawable.cameraLocation[2];\n    float currentDistanceGraphRatioY =\n        Math.abs(graphDrawable.viewport.get(3) / (float) graphDrawable.getDraggingMarkerY())\n            / graphDrawable.cameraLocation[2];\n    float newCameraLocationX = graphWidth / currentDistanceGraphRatioX;\n    float newCameraLocationY = graphHeight / currentDistanceGraphRatioY;\n    float newCameraLocation = Math.max(newCameraLocationX, newCameraLocationY);\n\n    graphDrawable.cameraLocation[0] = limits.getMinXoctree() + graphWidth / 2;\n    graphDrawable.cameraLocation[1] = limits.getMinYoctree() + graphHeight / 2;\n    graphDrawable.cameraLocation[2] = newCameraLocation;\n\n    graphDrawable.cameraTarget[0] = graphDrawable.cameraLocation[0];\n    graphDrawable.cameraTarget[1] = graphDrawable.cameraLocation[1];\n    graphDrawable.cameraTarget[2] = 0;\n\n    // Refresh\n    engine.getScheduler().requireUpdateVisible();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 319, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.9751175739828583}, {"buggy": false, "line_num": -1, "prob": 0.015009436499860135}, {"buggy": true, "line_num": 23, "prob": 1.1511172059853077e-09}]}
{"project": "JetBrains.intellij-community", "commit": "cbf693deac0b68b5cadac65af99a92135563eee3", "file_path": "platform/lang-impl/src/com/intellij/find/replaceInProject/ReplaceInProjectManager.java", "func_code": "  private boolean getStringToReplace(\n      int textOffset,\n      int textEndOffset,\n      Document document,\n      FindModel findModel,\n      Ref<String> stringToReplace)\n      throws FindManager.MalformedReplacementStringException {\n    if (textOffset < 0 || textOffset >= document.getTextLength()) {\n      return false;\n    }\n    if (textEndOffset < 0 || textOffset > document.getTextLength()) {\n      return false;\n    }\n    FindManager findManager = FindManager.getInstance(myProject);\n    final CharSequence foundString =\n        document.getCharsSequence().subSequence(textOffset, textEndOffset);\n    PsiFile file = PsiDocumentManager.getInstance(myProject).getPsiFile(document);\n    FindResult findResult =\n        findManager.findString(\n            document.getCharsSequence(),\n            textOffset,\n            findModel,\n            file != null ? file.getVirtualFile() : null);\n    if (!findResult.isStringFound()\n        ||\n        // find result should be in needed range\n        !(findResult.getStartOffset() >= textOffset\n            && findResult.getEndOffset() <= textEndOffset)) {\n      return false;\n    }\n\n    stringToReplace.set(\n        FindManager.getInstance(myProject)\n            .getStringToReplace(foundString.toString(), findModel, textOffset, document.getText()));\n\n    return true;\n  }\n", "line_num": 10, "charoffset": 29, "length": 37, "error": "textOffset > document.getTextLength()", "repair": "textEndOffset > document.getTextLength()", "task_id": 34, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.675261722931058}, {"buggy": true, "line_num": 33, "prob": 0.0009763878740320266}, {"buggy": true, "line_num": 16, "prob": 2.0736678255762832e-05}, {"buggy": true, "line_num": 7, "prob": 2.8940823976346485e-07}, {"buggy": true, "line_num": 15, "prob": 2.8295063392572193e-07}, {"buggy": true, "line_num": 20, "prob": 2.3257865660702966e-07}, {"buggy": true, "line_num": 10, "prob": 1.7471500886909805e-10}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "8777b3841952ac7c4ca8d6a4c6787ff086336d55", "file_path": "services/core/java/com/android/server/net/NetworkPolicyManagerService.java", "func_code": "  void updateRulesForTempWhitelistChangeLocked() {\n    final List<UserInfo> users = mUserManager.getUsers();\n    for (int i = 0; i < users.size(); i++) {\n      final UserInfo user = users.get(i);\n      for (int j = mPowerSaveTempWhitelistAppIds.size() - 1; j >= 0; j--) {\n        int appId = mPowerSaveTempWhitelistAppIds.keyAt(j);\n        int uid = UserHandle.getUid(user.id, appId);\n        updateRuleForAppIdleLocked(uid);\n        updateRuleForDeviceIdleLocked(uid);\n        updateRulesForRestrictPowerLocked(uid);\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 145, "predictions": [{"buggy": false, "line_num": -1, "prob": 1.0}, {"buggy": true, "line_num": 9, "prob": 4.537488224794561e-10}, {"buggy": true, "line_num": 8, "prob": 2.573555326410698e-10}, {"buggy": true, "line_num": 7, "prob": 1.183690329167564e-10}, {"buggy": true, "line_num": 6, "prob": 1.9446891225134264e-11}, {"buggy": true, "line_num": 5, "prob": 4.651248574377783e-12}, {"buggy": true, "line_num": 3, "prob": 6.235759551189888e-13}, {"buggy": true, "line_num": 4, "prob": 5.677030643229317e-13}]}
{"project": "looly.hutool", "commit": "13803745ad58824be4f3bc154274f178b2ae8933", "file_path": "hutool-core/src/main/java/com/xiaoleilu/hutool/util/StrUtil.java", "func_code": "  public static String addPrefixIfNot(CharSequence str, CharSequence prefix) {\r\n    if (isEmpty(str) || isEmpty(prefix)) {\r\n      return str.toString();\r\n    }\r\n\r\n    final String str2 = str.toString();\r\n    final String prefix2 = prefix.toString();\r\n    if (false == str2.startsWith(prefix2)) {\r\n      return prefix2 + str2;\r\n    }\r\n    return prefix2;\r\n  }\r\n", "line_num": 10, "charoffset": 2, "length": 15, "error": "return prefix2; ", "repair": "return str2; ", "task_id": 426, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7140676325524034}, {"buggy": true, "line_num": 10, "prob": 3.472968623324221e-05}, {"buggy": true, "line_num": 8, "prob": 5.192667672136202e-07}, {"buggy": true, "line_num": 2, "prob": 2.357439599054777e-08}, {"buggy": true, "line_num": 1, "prob": 8.341910270513811e-11}, {"buggy": true, "line_num": 5, "prob": 2.7859095387528888e-11}, {"buggy": true, "line_num": 7, "prob": 1.7898340889898586e-11}, {"buggy": true, "line_num": 6, "prob": 1.940745548022957e-12}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "6fe725ee5d943faaaa7ae9899b8613c90159d2dd", "file_path": "core/java/android/app/LocalActivityManager.java", "func_code": "  public Window destroyActivity(String id, boolean finish) {\n    LocalActivityRecord r = mActivities.get(id);\n    Window win = null;\n    if (r != null) {\n      win = performDestroy(r, finish);\n      if (finish) {\n        mActivities.remove(r);\n      }\n    }\n    return win;\n  }\n", "line_num": 6, "charoffset": 16, "length": 21, "error": "mActivities.remove(r)", "repair": "mActivities.remove(id)", "task_id": 156, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999929666998424}, {"buggy": true, "line_num": 4, "prob": 2.5783078644818664e-07}, {"buggy": true, "line_num": 5, "prob": 4.7941286224717846e-12}, {"buggy": true, "line_num": 6, "prob": 5.783029592688739e-13}, {"buggy": true, "line_num": 3, "prob": 8.189429484995136e-15}]}
{"project": "oracle.graal", "commit": "c130fd76cd0d8b6b3137916bdfd546ce9df4c453", "file_path": "graal/com.oracle.graal.lir.sparc/src/com/oracle/graal/lir/sparc/SPARCMove.java", "func_code": "  public static void const2stack(\n      CompilationResultBuilder crb,\n      SPARCMacroAssembler masm,\n      Value result,\n      Register constantTableBase,\n      Value input,\n      SPARCDelayedControlTransfer delaySlotLir,\n      JavaConstant constant) {\n    if (constant.isDefaultForKind() || constant.isNull()) {\n      SPARCAddress resultAddress = (SPARCAddress) crb.asAddress(result);\n      emitStore(\n          g0.asValue(LIRKind.combine(input)),\n          resultAddress,\n          result.getPlatformKind(),\n          delaySlotLir,\n          null,\n          crb,\n          masm);\n    } else {\n      try (ScratchRegister sc = masm.getScratchRegister()) {\n        Value scratchRegisterValue = sc.getRegister().asValue(LIRKind.combine(constant));\n        const2reg(\n            crb,\n            masm,\n            scratchRegisterValue,\n            constantTableBase,\n            constant,\n            SPARCDelayedControlTransfer.DUMMY);\n        SPARCAddress resultAddress = (SPARCAddress) crb.asAddress(result);\n        emitStore(\n            scratchRegisterValue,\n            resultAddress,\n            result.getPlatformKind(),\n            delaySlotLir,\n            null,\n            crb,\n            masm);\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 464, "predictions": [{"buggy": true, "line_num": 20, "prob": 0.9928967195039835}, {"buggy": true, "line_num": 16, "prob": 0.006619345067805859}, {"buggy": false, "line_num": -1, "prob": 3.080755242125196e-07}, {"buggy": true, "line_num": 26, "prob": 8.594485320907789e-12}, {"buggy": true, "line_num": 28, "prob": 3.5646564454337627e-13}, {"buggy": true, "line_num": 30, "prob": 6.871838014462926e-14}, {"buggy": true, "line_num": 35, "prob": 4.795248595830687e-14}]}
{"project": "libgdx.libgdx", "commit": "0ee231215a264eca4b0f828416672632162ba65a", "file_path": "gdx/src/com/badlogic/gdx/graphics/OrthographicCamera.java", "func_code": "  private Vector3 calculateDirection(float angle) {\r\n    Matrix4 transform = new Matrix4();\r\n    Vector3 dir = new Vector3(-1, 0, 1).nor();\r\n    float rotAngle = (float) Math.toDegrees(Math.asin(Math.tan(Math.toRadians(angle))));\r\n    transform.setToRotation(new Vector3(1, 0, 1).nor(), rotAngle);\r\n    dir.mul(transform).nor();\r\n    return dir;\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 391, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9902750053038827}, {"buggy": true, "line_num": 6, "prob": 0.007196055708188794}, {"buggy": true, "line_num": 2, "prob": 2.49328577178506e-14}, {"buggy": true, "line_num": 5, "prob": 2.4897311452994762e-14}, {"buggy": true, "line_num": 4, "prob": 9.694851761982087e-15}]}
{"project": "openhab.openhab", "commit": "b0500e90373a5e606758f857329d576a4a1a3265", "file_path": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/calc/SunCalc.java", "func_code": "  private boolean isSunUpAllDay(Calendar calendar, double latitude, double longitude) {\n    Calendar cal = DateTimeUtils.truncateToMidnight(calendar);\n    Sun sun = new Sun();\n    for (int minutes = 0; minutes <= MINUTES_PER_DAY; minutes += CURVE_TIME_INTERVAL) {\n      setSunPosition(cal, latitude, longitude, sun);\n      if (sun.getPosition().getElevation() < SUN_ANGLE) {\n        return false;\n      }\n      cal.add(Calendar.MINUTE, CURVE_TIME_INTERVAL);\n    }\n    return true;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 451, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9990351434640554}, {"buggy": true, "line_num": 5, "prob": 8.514996081675726e-05}, {"buggy": true, "line_num": 4, "prob": 1.0028333662603608e-06}, {"buggy": true, "line_num": 8, "prob": 3.7112563789327915e-12}, {"buggy": true, "line_num": 1, "prob": 1.929098142581363e-12}, {"buggy": true, "line_num": 2, "prob": 8.499668029325285e-13}]}
{"project": "JetBrains.intellij-plugins", "commit": "f1e6cdc1ac21d68caf90281aed9b3c2c81e821d6", "file_path": "flex/tools/flex-ui-designer/idea-plugin/src/com/intellij/flex/uiDesigner/SocketInputHandlerImpl.java", "func_code": "  private static void writeResourceBundle(PropertiesFile file, OutputStream out)\n      throws IOException {\n    if (file == null) {\n      out.write(Amf3Types.NULL);\n      return;\n    }\n\n    final AmfOutputStream amfOut = new AmfOutputStream(new ByteArrayOutputStreamEx(4 * 1024));\n    // todo Embed, ClassReference, but idea doesn't support it too\n    final List<IProperty> properties = file.getProperties();\n    amfOut.write(Amf3Types.DICTIONARY);\n    amfOut.writeUInt29((properties.size() << 1) | 1);\n    amfOut.write(0);\n    for (IProperty property : properties) {\n      amfOut.write(property.getUnescapedKey());\n      amfOut.write(property.getUnescapedValue());\n    }\n\n    amfOut.getByteArrayOut().writeTo(out);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 88, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6566054917381129}, {"buggy": true, "line_num": 14, "prob": 1.9388346965852695e-10}, {"buggy": true, "line_num": 15, "prob": 6.988346674813543e-12}, {"buggy": true, "line_num": 2, "prob": 4.171945566983579e-12}, {"buggy": true, "line_num": 18, "prob": 4.822722341495093e-13}, {"buggy": true, "line_num": 12, "prob": 3.3135922909497485e-14}, {"buggy": true, "line_num": 10, "prob": 2.2412549447587593e-14}, {"buggy": true, "line_num": 7, "prob": 2.1502610779976855e-14}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "0f82aa46fa81e28979a0e9cb04dcedbaee45c1db", "file_path": "core/java/android/service/voice/VoiceInteractionService.java", "func_code": "  public static boolean isActiveService(Context context, ComponentName service) {\n    String cur =\n        Settings.Secure.getString(\n            context.getContentResolver(), Settings.Secure.VOICE_INTERACTION_SERVICE);\n    if (cur == null || cur.isEmpty()) {\n      return false;\n    }\n    ComponentName curComp = ComponentName.unflattenFromString(cur);\n    if (curComp == null) {\n      return false;\n    }\n    return curComp.equals(cur);\n  }\n", "line_num": 11, "charoffset": 15, "length": 19, "error": "curComp.equals(cur)", "repair": "curComp.equals(service)", "task_id": 151, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9988041849097955}, {"buggy": true, "line_num": 4, "prob": 0.0002309718487666951}, {"buggy": true, "line_num": 11, "prob": 4.5605142478197786e-05}, {"buggy": true, "line_num": 3, "prob": 1.2501720223007546e-07}, {"buggy": true, "line_num": 7, "prob": 4.195838578806879e-08}, {"buggy": true, "line_num": 8, "prob": 1.0137514521938559e-09}]}
{"project": "OpenRefine.OpenRefine", "commit": "0314f49f362bb7ade17346eb41bfa85c236c59bd", "file_path": "main/src/com/google/refine/model/changes/RowFlagChange.java", "func_code": "  public static RowFlagChange load(LineNumberReader reader, Pool pool) throws Exception {\n    int row = -1;\n    boolean oldFlagged = false;\n    boolean newFlagged = false;\n\n    String line;\n    while ((line = reader.readLine()) != null && !\"/ec/\".equals(line)) {\n      int equal = line.indexOf('=');\n      CharSequence field = line.subSequence(0, equal);\n      String value = line.substring(equal + 1);\n\n      if (\"row\".equals(field)) {\n        row = Integer.parseInt(value);\n      } else if (\"oldFlagged\".equals(field)) {\n        oldFlagged = Boolean.parseBoolean(value);\n      } else if (\"newFlagged\".equals(field)) {\n        oldFlagged = Boolean.parseBoolean(value);\n      }\n    }\n\n    RowFlagChange change = new RowFlagChange(row, newFlagged);\n    change.oldFlagged = oldFlagged;\n\n    return change;\n  }\n", "line_num": 16, "charoffset": 16, "length": 40, "error": "oldFlagged=Boolean.parseBoolean(value)", "repair": "newFlagged=Boolean.parseBoolean(value)", "task_id": 109, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.8905760905240239}, {"buggy": false, "line_num": -1, "prob": 0.10259394670427975}, {"buggy": true, "line_num": 16, "prob": 0.0017517327309406032}, {"buggy": true, "line_num": 12, "prob": 0.0004823742583648106}, {"buggy": true, "line_num": 15, "prob": 8.097129589264308e-06}, {"buggy": true, "line_num": 11, "prob": 4.398736164564982e-08}, {"buggy": true, "line_num": 6, "prob": 1.0537090937047679e-08}]}
{"project": "wildfly.wildfly", "commit": "7e894043c7c2cb8631d3d1752286eed8f9484010", "file_path": "connector/src/main/java/org/jboss/as/connector/subsystems/resourceadapters/ResourceAdaptersRootResourceDefinition.java", "func_code": "  static void registerTransformers(SubsystemRegistration subsystem) {\n    ResourceTransformationDescriptionBuilder builder110 =\n        TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n    ResourceAdapterResourceDefinition.registerTransformers110(builder110);\n    TransformationDescription.Tools.register(\n        builder110.build(), subsystem, ModelVersion.create(1, 1, 0));\n    ResourceTransformationDescriptionBuilder builder120 =\n        TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n    ResourceAdapterResourceDefinition.registerTransformers120(builder120);\n    TransformationDescription.Tools.register(\n        builder120.build(), subsystem, ModelVersion.create(1, 2, 0));\n    // Apply same to RBAC-updated version\n    TransformationDescription.Tools.register(\n        builder120.build(), subsystem, ModelVersion.create(1, 3, 0));\n    ResourceTransformationDescriptionBuilder builder200 =\n        TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n    ResourceAdapterResourceDefinition.registerTransformers200(builder200);\n    TransformationDescription.Tools.register(\n        builder200.build(), subsystem, ModelVersion.create(2, 0, 0));\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 530, "predictions": [{"buggy": true, "line_num": 13, "prob": 0.9999996423721385}, {"buggy": false, "line_num": -1, "prob": 2.445315907255901e-08}, {"buggy": true, "line_num": 12, "prob": 7.728167509448361e-16}, {"buggy": true, "line_num": 10, "prob": 4.0337657322024576e-20}, {"buggy": true, "line_num": 5, "prob": 5.760493210670172e-21}, {"buggy": true, "line_num": 18, "prob": 2.8410860682139586e-21}]}
{"project": "apache.camel", "commit": "ac8a4e23ff95e6795598adf0d1e73763978e49b0", "file_path": "camel-core/src/main/java/org/apache/camel/management/CamelNamingStrategy.java", "func_code": "  public ObjectName getObjectName(RouteContext routeContext, ProcessorType processor)\n      throws MalformedObjectNameException {\n    Endpoint<? extends Exchange> ep = routeContext.getEndpoint();\n    String ctxid = ep != null ? getContextId(ep.getCamelContext()) : VALUE_UNKNOWN;\n    String cid = getComponentId(ep);\n    String id = VALUE_UNKNOWN.equals(cid) ? getEndpointId(ep) : \"[\" + cid + \"]\" + getEndpointId(ep);\n    String nodeId = processor.idOrCreate();\n\n    StringBuffer buffer = new StringBuffer();\n    buffer.append(domainName).append(\":\");\n    buffer.append(KEY_CONTEXT + \"=\").append(ctxid).append(\",\");\n    buffer.append(KEY_ROUTE + \"=\").append(id).append(\",\");\n    buffer.append(KEY_TYPE + \"=\" + TYPE_PROCESSOR + \",\");\n    buffer.append(KEY_NODE_ID + \"=\").append(nodeId).append(\",\");\n    buffer.append(KEY_NAME + \"=\").append(ObjectName.quote(processor.toString()));\n    return createObjectName(buffer);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 169, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9998683931215145}, {"buggy": false, "line_num": -1, "prob": 4.337157418679591e-06}, {"buggy": true, "line_num": 9, "prob": 1.4153048767217005e-12}, {"buggy": true, "line_num": 6, "prob": 4.564196056958503e-14}, {"buggy": true, "line_num": 15, "prob": 3.4665645478889215e-15}, {"buggy": true, "line_num": 4, "prob": 7.277965257540082e-16}]}
{"project": "nhaarman.ListViewAnimations", "commit": "b438f795170a7665a63b8901b75d2c079b01247e", "file_path": "library/src/com/haarman/listviewanimations/itemmanipulation/contextualundo/ContextualUndoAdapter.java", "func_code": "  public final View getView(int position, View convertView, ViewGroup parent) {\n    ContextualUndoView contextualUndoView = (ContextualUndoView) convertView;\n    if (contextualUndoView == null) {\n      contextualUndoView =\n          new ContextualUndoView(parent.getContext(), mUndoLayoutId, mCountDownTextViewResId);\n      contextualUndoView\n          .findViewById(mUndoActionId)\n          .setOnClickListener(new UndoListener(contextualUndoView));\n    }\n\n    View contentView = super.getView(position, contextualUndoView.getContentView(), parent);\n    contextualUndoView.updateContentView(contentView);\n\n    long itemId = getItemId(position);\n\n    if (itemId == mCurrentRemovedId) {\n      contextualUndoView.displayUndo();\n      mCurrentRemovedView = contextualUndoView;\n      long millisLeft = mAutoDeleteDelayMillis - (System.currentTimeMillis() - mDismissStartMillis);\n      if (mCountDownFormatter != null) {\n        mCurrentRemovedView.updateCountDownTimer(\n            mCountDownFormatter.getCountDownString(millisLeft));\n      }\n    } else {\n      contextualUndoView.displayContentView();\n    }\n\n    contextualUndoView.setItemId(itemId);\n    return contextualUndoView;\n  }\n", "line_num": 10, "charoffset": 21, "length": 68, "error": "super.getView(position,contextualUndoView.getContentView(),parent)", "repair": "super.getView(position,contextualUndoView.getContentView(),contextualUndoView)", "task_id": 441, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.9999942779545564}, {"buggy": false, "line_num": -1, "prob": 1.1659020600910341e-07}, {"buggy": true, "line_num": 7, "prob": 7.159021859234142e-13}, {"buggy": true, "line_num": 10, "prob": 1.3131083363658464e-13}, {"buggy": true, "line_num": 5, "prob": 5.479093592686828e-14}, {"buggy": true, "line_num": 11, "prob": 8.286808927359884e-17}, {"buggy": true, "line_num": 24, "prob": 7.030241056777874e-17}, {"buggy": true, "line_num": 18, "prob": 6.469598172551076e-17}, {"buggy": true, "line_num": 17, "prob": 3.572892330635378e-17}, {"buggy": true, "line_num": 19, "prob": 3.536578326041903e-17}, {"buggy": true, "line_num": 13, "prob": 2.1005953653447693e-17}, {"buggy": true, "line_num": 27, "prob": 5.2216394764510275e-18}]}
{"project": "droolsjbpm.drools", "commit": "88333bae0e9d43b01f7ee0a88ea2d040ad5fdd33", "file_path": "drools-compiler/src/main/java/org/drools/guvnor/client/modeldriven/brl/RuleModel.java", "func_code": "  private List<String> giveFieldBinding(FieldConstraint f) {\n    List<String> result = new ArrayList<String>();\n    if (f instanceof SingleFieldConstraint) {\n      SingleFieldConstraint s = (SingleFieldConstraint) f;\n      if (s.isBound() == true) {\n        result.add(s.fieldBinding);\n      }\n    }\n    if (f instanceof CompositeFieldConstraint) {\n      CompositeFieldConstraint s = (CompositeFieldConstraint) f;\n      for (FieldConstraint ss : s.constraints) {\n        List<String> t = giveFieldBinding(s);\n        result.addAll(t);\n      }\n    }\n    return result;\n  }\n", "line_num": 11, "charoffset": 33, "length": 21, "error": "giveFieldBinding(s)", "repair": "giveFieldBinding(ss)", "task_id": 281, "predictions": [{"buggy": true, "line_num": 11, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 1.973410788210916e-12}, {"buggy": true, "line_num": 5, "prob": 6.185578954325049e-21}, {"buggy": true, "line_num": 10, "prob": 6.471997463187752e-23}, {"buggy": true, "line_num": 4, "prob": 4.0123029671561415e-24}, {"buggy": true, "line_num": 12, "prob": 3.038238074151712e-24}, {"buggy": true, "line_num": 1, "prob": 9.249680637851137e-25}, {"buggy": true, "line_num": 9, "prob": 5.194977834327459e-25}]}
{"project": "apache.tomcat", "commit": "e386a58bb8b132c87d144e5c42190073589affe5", "file_path": "java/org/apache/catalina/authenticator/FormAuthenticator.java", "func_code": "  protected boolean matchRequest(Request request) {\n\n    // Has a session been created?\n    Session session = request.getSessionInternal(false);\n    if (session == null) return (false);\n\n    // Is there a saved request?\n    SavedRequest sreq = (SavedRequest) session.getNote(Constants.FORM_REQUEST_NOTE);\n    if (sreq == null) return (false);\n\n    // Is there a saved principal?\n    if (session.getNote(Constants.FORM_PRINCIPAL_NOTE) == null) return (false);\n\n    // Does the request URI match?\n    String requestURI = request.getRequestURI();\n    if (requestURI == null) return (false);\n    return (requestURI.equals(request.getRequestURI()));\n  }\n", "line_num": 16, "charoffset": 32, "length": 23, "error": "request.getRequestURI()", "repair": "sreq.getRequestURI()", "task_id": 240, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9816867833603771}, {"buggy": true, "line_num": 11, "prob": 7.20101135811453e-07}, {"buggy": true, "line_num": 16, "prob": 5.667218792722017e-09}, {"buggy": true, "line_num": 14, "prob": 1.0375781185655583e-09}, {"buggy": true, "line_num": 3, "prob": 5.3703704118527865e-11}, {"buggy": true, "line_num": 7, "prob": 3.8599224699259237e-11}, {"buggy": true, "line_num": 15, "prob": 2.3852702051435418e-11}]}
{"project": "jitsi.jitsi", "commit": "d0cbcd1c95448b2a3a58e31c2b64e72fb4ee3081", "file_path": "src/net/java/sip/communicator/util/FileUtils.java", "func_code": "  public static Icon getIcon(File file) {\n    Icon fileIcon = null;\n\n    try {\n      sun.awt.shell.ShellFolder shellFolder = sun.awt.shell.ShellFolder.getShellFolder(file);\n\n      fileIcon = new ImageIcon(shellFolder.getIcon(true), shellFolder.getFolderType());\n    } catch (Exception e) {\n      logger.debug(\"Failed to obtain file icon from ShellFolder.\", e);\n      try {\n        fileIcon = new JFileChooser().getIcon(file);\n      } catch (Exception e1) {\n        logger.debug(\"Failed to obtain file icon from JFileChooser.\", e1);\n      }\n    }\n\n    return fileIcon;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 512, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6788895936506033}, {"buggy": true, "line_num": 12, "prob": 0.0458588127250044}, {"buggy": true, "line_num": 10, "prob": 3.156678089967069e-05}, {"buggy": true, "line_num": 8, "prob": 7.743315735391723e-06}, {"buggy": true, "line_num": 6, "prob": 3.228685265422359e-08}, {"buggy": true, "line_num": 16, "prob": 3.591936072040869e-13}, {"buggy": true, "line_num": 4, "prob": 1.717647470125378e-13}]}
{"project": "apache.storm", "commit": "203c48445f33b9bcbdbc377f3e6311babca100fd", "file_path": "src/jvm/storm/starter/TransactionalWords.java", "func_code": "  public void finishBatch() {\n    for (String key : _counts.keySet()) {\n      CountValue val = COUNT_DATABASE.get(key);\n      CountValue newVal;\n      if (val == null || !val.txid.equals(_id)) {\n        newVal = new CountValue();\n        newVal.txid = _id.getTransactionId();\n        if (val != null) {\n          newVal.prev_count = val.count;\n          newVal.count = val.count;\n        }\n        newVal.count = newVal.count + _counts.get(key);\n        COUNT_DATABASE.put(key, newVal);\n      } else {\n        newVal = val;\n      }\n      _collector.emit(new Values(_id, key, newVal.count, newVal.prev_count));\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 229, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9964310217319197}, {"buggy": false, "line_num": -1, "prob": 0.0024433488522774605}, {"buggy": true, "line_num": 7, "prob": 0.0011220560412597061}, {"buggy": true, "line_num": 4, "prob": 3.4126368867266137e-12}, {"buggy": true, "line_num": 16, "prob": 2.1041032376559435e-14}, {"buggy": true, "line_num": 14, "prob": 1.4346759760955618e-15}, {"buggy": true, "line_num": 2, "prob": 8.359234015539515e-16}, {"buggy": true, "line_num": 1, "prob": 5.597905580385069e-16}, {"buggy": true, "line_num": 6, "prob": 2.3999999011266838e-16}]}
{"project": "apache.groovy", "commit": "7a498d7a7743ffede80ef1e4a6fc24367351ef06", "file_path": "src/main/groovy/util/FactoryBuilderSupport.java", "func_code": "  private static final Comparator<Method> METHOD_COMPARATOR =\n      new Comparator<Method>() {\n        public int compare(final Method o1, final Method o2) {\n          int cmp = o1.getName().compareTo(o2.getName());\n          if (cmp != 0) return cmp;\n          cmp = o1.getParameterTypes().length - o2.getParameterTypes().length;\n          return cmp;\n        }\n      };\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 192, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.988279433216658}, {"buggy": true, "line_num": 5, "prob": 0.0003240237579167948}, {"buggy": true, "line_num": 3, "prob": 4.615984263694143e-05}, {"buggy": true, "line_num": 6, "prob": 9.605414389672315e-08}, {"buggy": true, "line_num": 4, "prob": 6.678052100597843e-08}]}
{"project": "MovingBlocks.Terasology", "commit": "71518b4c3c0342221b38a4e697a9e0c7ad63b73d", "file_path": "src/main/java/org/terasology/world/chunks/LocalChunkProvider.java", "func_code": "  private void checkChunkReady(Vector3i pos) {\n    if (worldEntity.exists()) {\n      for (Vector3i adjPos : Region3i.createFromCenterExtents(pos, LOCAL_REGION_EXTENTS)) {\n        Chunk chunk = getChunk(pos);\n        if (chunk == null || chunk.getChunkState() != Chunk.State.COMPLETE) {\n          return;\n        }\n      }\n      worldEntity.send(new ChunkReadyEvent(pos));\n    }\n  }\n", "line_num": 3, "charoffset": 30, "length": 13, "error": "getChunk(pos)", "repair": "getChunk(adjPos)", "task_id": 106, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.9999998807907247}, {"buggy": false, "line_num": -1, "prob": 6.214142526903773e-08}, {"buggy": true, "line_num": 8, "prob": 1.669299361155968e-14}, {"buggy": true, "line_num": 2, "prob": 1.0156077068520166e-16}, {"buggy": true, "line_num": 1, "prob": 1.623343500722937e-18}, {"buggy": true, "line_num": 4, "prob": 1.3559190204501484e-19}]}
{"project": "spring-projects.spring-boot", "commit": "1745a5ee6f81fba376110785ddd8546318bee689", "file_path": "spring-boot-actuator/src/main/java/org/springframework/boot/actuate/metrics/dropwizard/DropwizardMetricServices.java", "func_code": "  private <T extends Metric> T register(String name, MetricRegistrar<T> registrar) {\n    Reservoir reservoir = this.reservoirFactory.getReservoir(name);\n    if (reservoir == null) {\n      return registrar.register(this.registry, name);\n    }\n    Metric metric = this.registry.getMetrics().get(name);\n    if (metric != null) {\n      registrar.checkExisting(metric);\n      return (T) metric;\n    }\n    try {\n      return this.registry.register(name, registrar.createForReservoir(reservoir));\n    } catch (IllegalArgumentException ex) {\n      Metric added = this.registry.getMetrics().get(name);\n      registrar.checkExisting(added);\n      return (T) added;\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 507, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9988093401407404}, {"buggy": true, "line_num": 5, "prob": 3.070419174086306e-05}, {"buggy": true, "line_num": 3, "prob": 1.7652013609287724e-06}, {"buggy": true, "line_num": 11, "prob": 4.706918059455622e-09}, {"buggy": true, "line_num": 8, "prob": 3.715488526731041e-10}, {"buggy": true, "line_num": 1, "prob": 1.733375117502061e-10}, {"buggy": true, "line_num": 6, "prob": 8.040884018907029e-12}, {"buggy": true, "line_num": 13, "prob": 6.241783878513985e-12}, {"buggy": true, "line_num": 7, "prob": 1.1727651266793979e-12}]}
{"project": "google.guava", "commit": "556976f81c236be7798e5d065a0dae09ca0cc1d3", "file_path": "guava-testlib/src/com/google/common/testing/NullPointerTester.java", "func_code": "  private Object[] buildParamList(Functor func, int indexOfParamToSetToNull) {\n    Class<?>[] types = func.getParameterTypes();\n    Object[] params = new Object[types.length];\n\n    for (int i = 0; i < types.length; i++) {\n      if (i != indexOfParamToSetToNull) {\n        params[i] = defaults.get(types[i]);\n        if (!parameterIsPrimitiveOrNullable(func, i)) {\n          Assert.assertTrue(\"No default value found for \" + types[i].getName(), params[i] != null);\n        }\n      }\n    }\n    return params;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 333, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9966587777113517}, {"buggy": true, "line_num": 7, "prob": 0.0002690091635151472}, {"buggy": true, "line_num": 8, "prob": 1.271856151523541e-06}, {"buggy": true, "line_num": 5, "prob": 1.0009566729048644e-10}, {"buggy": true, "line_num": 6, "prob": 9.521674076808207e-11}, {"buggy": true, "line_num": 4, "prob": 1.0975000037346388e-11}]}
{"project": "liferay.liferay-portal", "commit": "59215ebede1519671843dc2a1e3cf19ba022be70", "file_path": "portal-impl/test/integration/com/liferay/portlet/mobiledevicerules/lar/MDRRuleStagedModelDataHandlerTest.java", "func_code": "  protected void validateImport(\n      Map<String, List<StagedModel>> dependentStagedModelsMap, Group group) throws Exception {\n\n    List<StagedModel> dependentStagedModels =\n        dependentStagedModelsMap.get(MDRRuleGroup.class.getSimpleName());\n\n    Assert.assertEquals(1, dependentStagedModels.size());\n\n    MDRRuleGroup ruleGroup = (MDRRuleGroup) dependentStagedModels.get(0);\n\n    MDRRuleGroupLocalServiceUtil.getMDRRuleGroupByUuidAndGroupId(\n        ruleGroup.getUuid(), ruleGroup.getGroupId());\n  }\n", "line_num": 11, "charoffset": 24, "length": 22, "error": "ruleGroup.getGroupId()", "repair": "group.getGroupId()", "task_id": 414, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999922514261995}, {"buggy": true, "line_num": 11, "prob": 3.6891950326842687e-06}, {"buggy": true, "line_num": 6, "prob": 9.90625474077744e-09}, {"buggy": true, "line_num": 4, "prob": 6.935646298481604e-11}, {"buggy": true, "line_num": 1, "prob": 5.633007787927422e-11}, {"buggy": true, "line_num": 8, "prob": 2.8880659436064623e-11}]}
{"project": "google.error-prone", "commit": "91f625c6a06afe5418133f8ce120d872d91e36e6", "file_path": "check_api/src/main/java/com/google/errorprone/BaseErrorProneJavaCompiler.java", "func_code": "  static ErrorProneAnalyzer createAnalyzer(\n      ScannerSupplier scannerSupplier,\n      ErrorProneOptions epOptions,\n      Context context,\n      RefactoringCollection[] refactoringCollection) {\n    if (!epOptions.patchingOptions().doRefactor()) {\n      return ErrorProneAnalyzer.createByScanningForPlugins(scannerSupplier, epOptions, context);\n    }\n    refactoringCollection[0] = RefactoringCollection.refactor(epOptions.patchingOptions());\n\n    // Refaster refactorer or using builtin checks\n    CodeTransformer codeTransformer =\n        epOptions\n            .patchingOptions()\n            .customRefactorer()\n            .or(\n                () -> {\n                  ScannerSupplier toUse = ErrorPronePlugins.loadPlugins(scannerSupplier, context);\n                  Set<String> namedCheckers = epOptions.patchingOptions().namedCheckers();\n                  if (!namedCheckers.isEmpty()) {\n                    toUse = toUse.filter(bci -> namedCheckers.contains(bci.canonicalName()));\n                  }\n                  return ErrorProneScannerTransformer.create(toUse.applyOverrides(epOptions).get());\n                })\n            .get();\n\n    return ErrorProneAnalyzer.createWithCustomDescriptionListener(\n        codeTransformer, epOptions, context, refactoringCollection[0]);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 332, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5265913068218923}, {"buggy": true, "line_num": 6, "prob": 0.00013370366238124563}, {"buggy": true, "line_num": 8, "prob": 6.505568729273975e-06}, {"buggy": true, "line_num": 12, "prob": 4.955171086656084e-07}, {"buggy": true, "line_num": 18, "prob": 3.239906537592284e-08}, {"buggy": true, "line_num": 27, "prob": 2.8017883869204848e-08}, {"buggy": true, "line_num": 17, "prob": 2.2763133750457145e-08}, {"buggy": true, "line_num": 22, "prob": 2.2178410407192643e-10}]}
{"project": "mongodb.mongo-java-driver", "commit": "bb99b62bb0097f1b9a4c2d850e973b820509fc34", "file_path": "src/main/com/mongodb/ByteEncoder.java", "func_code": "  protected int putCodeWScope(String name, CodeWScope code) {\n    final int start = _buf.position();\n    _put(CODE_W_SCOPE, name);\n    int temp = _buf.position();\n    _buf.putInt(0);\n    _putValueString(code._code);\n    putObject(code._scope);\n    _buf.putInt(temp, _buf.position() - start);\n    return _buf.position() - start;\n  }\n", "line_num": 7, "charoffset": 28, "length": 23, "error": "_buf.position() - start", "repair": "_buf.position() - temp", "task_id": 433, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9705495343654668}, {"buggy": true, "line_num": 2, "prob": 3.1736722622399266e-07}, {"buggy": true, "line_num": 7, "prob": 2.1233119610215082e-08}, {"buggy": true, "line_num": 8, "prob": 1.7556164536184643e-12}, {"buggy": true, "line_num": 3, "prob": 9.853014540076414e-14}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "659f6b220453eb177815895086f30d94b3cefe81", "file_path": "core/java/android/view/textclassifier/TextClassifierImpl.java", "func_code": "  private TextClassification createClassificationResult(\n      SmartSelection.ClassificationResult[] classifications, String text, int start, int end) {\n    final String classifiedText = text.substring(start, end);\n    final TextClassification.Builder builder =\n        new TextClassification.Builder().setText(classifiedText);\n\n    final int size = classifications.length;\n    for (int i = 0; i < size; i++) {\n      builder.setEntityType(classifications[i].mCollection, classifications[i].mScore);\n    }\n\n    final String type = getHighestScoringType(classifications);\n    addActions(builder, IntentFactory.create(mContext, type, text));\n\n    return builder.setSignature(getSignature(text, start, end)).build();\n  }\n", "line_num": 12, "charoffset": 28, "length": 42, "error": "IntentFactory.create(mContext,type,text)", "repair": "IntentFactory.create(mContext,type,classifiedText)", "task_id": 134, "predictions": [{"buggy": true, "line_num": 12, "prob": 0.48129932625451827}, {"buggy": false, "line_num": -1, "prob": 0.2990266494673798}, {"buggy": true, "line_num": 14, "prob": 7.08533488648127e-07}, {"buggy": true, "line_num": 2, "prob": 2.1271525710828984e-10}, {"buggy": true, "line_num": 7, "prob": 1.916783941205782e-10}, {"buggy": true, "line_num": 11, "prob": 1.915313827933502e-11}, {"buggy": true, "line_num": 8, "prob": 1.7239246639566347e-11}]}
{"project": "hazelcast.hazelcast", "commit": "9cc9147adcd5143e5b1253b279f2e436adcbe7a3", "file_path": "hazelcast/src/main/java/com/hazelcast/config/XmlConfigBuilder.java", "func_code": "  private void handleSecurityPermission(final org.w3c.dom.Node node, PermissionType type)\n      throws Exception {\n    final SecurityConfig cfg = config.getSecurityConfig();\n    final NamedNodeMap attrs = node.getAttributes();\n\n    Node nameNode = attrs.getNamedItem(\"name\");\n    String name = nameNode != null ? getTextContent(nameNode) : \"*\";\n    Node principalNode = attrs.getNamedItem(\"principal\");\n    String principal = principalNode != null ? getTextContent(principalNode) : \"*\";\n\n    final PermissionConfig permConfig = new PermissionConfig(type, name, principal);\n    cfg.addClientPermissionConfig(permConfig);\n\n    for (org.w3c.dom.Node child : new IterableNodeList(node.getChildNodes())) {\n      final String nodeName = cleanNodeName(child.getNodeName());\n      if (\"endpoints\".equals(nodeName)) {\n        handleSecurityPermissionEndpoints(principalNode, permConfig);\n      } else if (\"actions\".equals(nodeName)) {\n        handleSecurityPermissionActions(principalNode, permConfig);\n      }\n    }\n  }\n", "line_num": 18, "charoffset": 7, "length": 58, "error": "handleSecurityPermissionActions(principalNode,permConfig)", "repair": "handleSecurityPermissionActions(child,permConfig)", "task_id": 361, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.780002145247521}, {"buggy": true, "line_num": 13, "prob": 0.1710529913713875}, {"buggy": true, "line_num": 6, "prob": 0.04307577675508071}, {"buggy": true, "line_num": 8, "prob": 5.122887775719991e-06}, {"buggy": true, "line_num": 3, "prob": 2.6441329093711693e-08}, {"buggy": true, "line_num": 16, "prob": 1.7741070835029364e-08}, {"buggy": true, "line_num": 18, "prob": 7.678547510119686e-09}]}
{"project": "apache.cxf", "commit": "94802b6733d1dbbda1873ce2b7fa444a4f573947", "file_path": "services/ws-discovery/ws-discovery-api/src/main/java/org/apache/cxf/ws/discovery/internal/WSDiscoveryServiceImpl.java", "func_code": "  private boolean matches(EndpointReferenceType ref, W3CEndpointReference r) {\n    EndpointReferenceType cref = ProviderImpl.convertToInternal(r);\n    QName snr = EndpointReferenceUtils.getServiceName(ref, bus);\n    QName snc = EndpointReferenceUtils.getServiceName(cref, bus);\n    String addr = EndpointReferenceUtils.getAddress(ref);\n    String addc = EndpointReferenceUtils.getAddress(ref);\n\n    if (addr == null) {\n      return false;\n    }\n    if (addr.equals(addc)) {\n      if (snr != null && !snr.equals(snc)) {\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }\n", "line_num": 5, "charoffset": 26, "length": 38, "error": "EndpointReferenceUtils.getAddress(ref)", "repair": "EndpointReferenceUtils.getAddress(cref)", "task_id": 183, "predictions": [{"buggy": true, "line_num": 7, "prob": 0.9741333305639748}, {"buggy": false, "line_num": -1, "prob": 6.860586591868912e-07}, {"buggy": true, "line_num": 4, "prob": 8.420419167779572e-14}, {"buggy": true, "line_num": 5, "prob": 2.4871633774906358e-14}, {"buggy": true, "line_num": 2, "prob": 3.2285321302301297e-15}, {"buggy": true, "line_num": 11, "prob": 1.1264380810077609e-15}, {"buggy": true, "line_num": 1, "prob": 1.2742115859442484e-17}, {"buggy": true, "line_num": 10, "prob": 1.172449023624842e-17}]}
{"project": "SonarSource.sonarqube", "commit": "d0ff15f62677b41d72e2c0ad63d799ce6778ad01", "file_path": "server/sonar-server/src/main/java/org/sonar/server/search/SearchClient.java", "func_code": "  public <K extends ActionResponse> K execute(ActionRequestBuilder request) {\n    StopWatch fullProfile = profiling.start(\"search\", Profiling.Level.FULL);\n    K response = null;\n    try {\n\n      response = (K) request.get();\n\n      if (profiling.isProfilingEnabled(Profiling.Level.BASIC)) {\n        if (ToXContent.class.isAssignableFrom(request.getClass())) {\n          XContentBuilder debugResponse = XContentFactory.jsonBuilder();\n          debugResponse.startObject();\n          ((ToXContent) request).toXContent(debugResponse, ToXContent.EMPTY_PARAMS);\n          debugResponse.endObject();\n          fullProfile.stop(\"ES Request: %s\", debugResponse.string());\n        } else {\n          fullProfile.stop(\"ES Request: %s\", request.toString().replaceAll(\"\\n\", \"\"));\n        }\n      }\n      return response;\n    } catch (Exception e) {\n      LOGGER.error(\"could not execute request: \" + request, e);\n      throw new IllegalStateException(\"ES error: \", e);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 116, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9990153908163448}, {"buggy": true, "line_num": 20, "prob": 0.0009847137193360733}, {"buggy": true, "line_num": 5, "prob": 1.3528414822986384e-09}, {"buggy": true, "line_num": 15, "prob": 4.199803498075826e-11}, {"buggy": true, "line_num": 1, "prob": 7.609082872949614e-15}, {"buggy": true, "line_num": 12, "prob": 1.3147583700039372e-19}, {"buggy": true, "line_num": 3, "prob": 7.346429200314014e-20}]}
{"project": "mission-peace.interview", "commit": "9c69a6c7b82d4affcf611fe5bb954a6778052cc9", "file_path": "src/com/interview/dynamic/SubRectangularMatrixWithMaximumSum.java", "func_code": "  private KadaneResult kadane(int arr[]) {\n    int max = 0;\n    int maxStart = -1;\n    int maxEnd = -1;\n    int currentStart = 0;\n    int maxSoFar = 0;\n    for (int i = 0; i < arr.length; i++) {\n      maxSoFar += arr[i];\n      if (maxSoFar < 0) {\n        maxSoFar = 0;\n        currentStart = i + 1;\n      }\n      if (max < maxSoFar) {\n        maxStart = currentStart;\n        maxEnd = i;\n        max = maxSoFar;\n      }\n    }\n    return new KadaneResult(max, maxStart, maxEnd);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 428, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9963349218925007}, {"buggy": true, "line_num": 13, "prob": 0.0036231191550882263}, {"buggy": true, "line_num": 10, "prob": 2.8455357987254424e-06}, {"buggy": true, "line_num": 6, "prob": 6.195685563629638e-10}, {"buggy": true, "line_num": 12, "prob": 1.5482647751089084e-13}]}
{"project": "droolsjbpm.drools", "commit": "95e7e29d8fcbc4cd3c9f563089b1d5eda3e749c0", "file_path": "drools-core/src/main/java/org/drools/core/common/RightTupleSetsImpl.java", "func_code": "  public void addAllUpdates(RightTupleSets tupleSets) {\n    RightTupleSetsImpl tupleSetsImpl = (RightTupleSetsImpl) tupleSets;\n    if (updateFirst == null) {\n      updateFirst = tupleSetsImpl.getUpdateFirst();\n      updateSize = tupleSetsImpl.updateSize;\n    } else {\n      RightTuple current = updateFirst;\n      RightTuple last = null;\n      while (current != null) {\n        last = current;\n        current = current.getStagedNext();\n      }\n      RightTuple rightTuple = tupleSetsImpl.getUpdateFirst();\n      last.setStagedNext(rightTuple);\n      rightTuple.setStagePrevious(rightTuple);\n      updateSize = updateSize + tupleSetsImpl.updateSize();\n    }\n  }\n", "line_num": 14, "charoffset": 12, "length": 41, "error": "rightTuple.setStagePrevious(rightTuple)", "repair": "rightTuple.setStagePrevious(last)", "task_id": 277, "predictions": [{"buggy": true, "line_num": 2, "prob": 0.9793854771330401}, {"buggy": true, "line_num": 14, "prob": 0.02061455836169468}, {"buggy": false, "line_num": -1, "prob": 8.066598800986034e-12}, {"buggy": true, "line_num": 6, "prob": 1.0234576471076371e-13}, {"buggy": true, "line_num": 13, "prob": 1.1518268888349682e-16}]}
{"project": "facebook.presto", "commit": "6ee0105ac80d34691c4a073e87397ed0fc6b68c4", "file_path": "presto-main/src/test/java/com/facebook/presto/block/BlockAssertions.java", "func_code": "  public static Block createLongDictionaryBlock(int start, int length) {\n    int dictionarySize = length / 5;\n    BlockBuilder builder = BIGINT.createBlockBuilder(new BlockBuilderStatus(), dictionarySize);\n    for (int i = start; i < dictionarySize; i++) {\n      BIGINT.writeLong(builder, i);\n    }\n    int[] ids = new int[length];\n    for (int i = 0; i < length; i++) {\n      ids[i] = i % dictionarySize;\n    }\n    return new DictionaryBlock(length, builder.build(), wrappedIntArray(ids));\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 311, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.5526046735668366}, {"buggy": false, "line_num": -1, "prob": 0.41881891986156067}, {"buggy": true, "line_num": 10, "prob": 0.02850353008108791}, {"buggy": true, "line_num": 7, "prob": 1.525064072557488e-07}, {"buggy": true, "line_num": 6, "prob": 2.0068557362676837e-08}, {"buggy": true, "line_num": 3, "prob": 6.746844461766486e-11}, {"buggy": true, "line_num": 8, "prob": 4.229877907886161e-11}, {"buggy": true, "line_num": 2, "prob": 2.7826116840670283e-11}]}
{"project": "apache.cxf", "commit": "8e2209bb5d5671aaea2fc30420d9a8559f2b650a", "file_path": "rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/xmlbeans/XMLBeansJSONProvider.java", "func_code": "  public XmlObject readFrom(\n      Class<XmlObject> type,\n      Type genericType,\n      Annotation[] annotations,\n      MediaType m,\n      MultivaluedMap<String, String> headers,\n      InputStream is)\n      throws IOException {\n    XmlObject result = null;\n\n    try {\n\n      Map<String, String> nstojns = new HashMap<String, String>();\n\n      MappedXMLInputFactory factory = new MappedXMLInputFactory(nstojns);\n      XMLStreamReader xsr = factory.createXMLStreamReader(is);\n      Reader r = (Reader) xsr;\n      result = parseXmlBean(type, r);\n\n      xsr.close();\n      xsr = null;\n\n    } catch (XMLStreamException e) {\n      throw new WebApplicationException(HttpURLConnection.HTTP_INTERNAL_ERROR);\n    }\n\n    return result;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 185, "predictions": [{"buggy": true, "line_num": 20, "prob": 0.9999972581939645}, {"buggy": false, "line_num": -1, "prob": 2.6257815089740974e-06}, {"buggy": true, "line_num": 17, "prob": 8.761360083321371e-11}, {"buggy": true, "line_num": 14, "prob": 8.490229339284912e-15}, {"buggy": true, "line_num": 19, "prob": 3.5364721992845125e-16}, {"buggy": true, "line_num": 15, "prob": 1.701705456891526e-16}]}
{"project": "spring-projects.spring-boot", "commit": "f8d58022301347c8a9790013e38dfc1d5d4037e7", "file_path": "spring-boot-tools/spring-boot-gradle-plugin/src/main/groovy/org/springframework/boot/gradle/task/ProjectLibraries.java", "func_code": "  public void doWithLibraries(LibraryCallback callback) throws IOException {\n\n    FileCollection compile = this.project.getConfigurations().getByName(\"compile\");\n\n    FileCollection runtime = this.project.getConfigurations().getByName(\"runtime\");\n    runtime = runtime.minus(compile);\n\n    FileCollection provided =\n        this.project.getConfigurations().findByName(this.providedConfigurationName);\n    if (provided != null) {\n      compile = compile.minus(provided);\n      runtime = compile.minus(provided);\n    }\n\n    libraries(LibraryScope.COMPILE, compile, callback);\n    libraries(LibraryScope.RUNTIME, runtime, callback);\n    libraries(LibraryScope.PROVIDED, provided, callback);\n  }\n", "line_num": 11, "charoffset": 13, "length": 23, "error": "compile.minus(provided)", "repair": "runtime.minus(provided)", "task_id": 510, "predictions": [{"buggy": true, "line_num": 16, "prob": 0.9798128036488117}, {"buggy": true, "line_num": 14, "prob": 8.52918145813908e-08}, {"buggy": false, "line_num": -1, "prob": 2.7070597584712978e-11}, {"buggy": true, "line_num": 10, "prob": 1.8843349139525426e-16}, {"buggy": true, "line_num": 11, "prob": 2.1323139248967253e-19}, {"buggy": true, "line_num": 8, "prob": 2.711387996110635e-20}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "e66fd7dbd0958d47dbc9601532034a319e64680e", "file_path": "services/core/java/com/android/server/pm/PackageManagerService.java", "func_code": "  protected void filterResults(List<AuxiliaryResolveInfo> results) {\n    // only do work if ordering is enabled [most of the time it won't be]\n    if (mOrderResult.size() == 0) {\n      return;\n    }\n    int resultSize = results.size();\n    for (int i = 0; i < resultSize; i++) {\n      final InstantAppResolveInfo info = results.get(i).resolveInfo;\n      final String packageName = info.getPackageName();\n      final Pair<Integer, InstantAppResolveInfo> savedInfo = mOrderResult.get(packageName);\n      if (savedInfo == null) {\n        // package doesn't having ordering\n        continue;\n      }\n      if (savedInfo.second == info) {\n        // circled back to the highest ordered item; remove from order list\n        mOrderResult.remove(packageName);\n        if (mOrderResult.size() == 0) {\n          // no more ordered items\n          break;\n        }\n        continue;\n      }\n      // item has a worse order, remove it from the result list\n      results.remove(i);\n      resultSize--;\n      i--;\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 137, "predictions": [{"buggy": true, "line_num": 25, "prob": 0.9295209699876715}, {"buggy": false, "line_num": -1, "prob": 0.021343628187129593}, {"buggy": true, "line_num": 14, "prob": 1.4354995139898916e-08}, {"buggy": true, "line_num": 6, "prob": 9.492244102670323e-11}, {"buggy": true, "line_num": 24, "prob": 9.512228902909356e-16}, {"buggy": true, "line_num": 7, "prob": 1.4138450305309966e-16}]}
{"project": "JetBrains.intellij-community", "commit": "d0b2f2a376357ed2f0b6d83a801d89d990555656", "file_path": "source/com/intellij/util/xml/impl/DomManagerImpl.java", "func_code": "  private Class<? extends DomElement> findImplementationClassDFS(\n      final Class<? extends DomElement> concreteInterface) {\n    Class<? extends DomElement> aClass = myImplementationClasses.get(concreteInterface);\n    if (aClass != null) {\n      return aClass;\n    }\n    for (final Class aClass1 : concreteInterface.getInterfaces()) {\n      aClass = findImplementationClassDFS(aClass1);\n      if (aClass != null) {\n        return aClass;\n      }\n    }\n    return null;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 84, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9549600470764973}, {"buggy": true, "line_num": 6, "prob": 3.5033844973550763e-10}, {"buggy": true, "line_num": 2, "prob": 6.308566780026415e-13}, {"buggy": true, "line_num": 3, "prob": 5.094771905025093e-13}, {"buggy": true, "line_num": 9, "prob": 4.808082019452421e-13}, {"buggy": true, "line_num": 8, "prob": 4.8411153036497564e-14}]}
{"project": "oracle.graal", "commit": "da9ecf26b75f92db8c051e314795fd38bb6e0ed6", "file_path": "compiler/src/org.graalvm.compiler.replacements.amd64/src/org/graalvm/compiler/replacements/amd64/AMD64StringSubstitutions.java", "func_code": "  public static int indexOf(String source, int ch, int origFromIndex) {\n    int fromIndex = origFromIndex;\n    final int sourceCount = source.length();\n    if (fromIndex >= sourceCount) {\n      // Note: fromIndex might be near -1>>>1.\n      return -1;\n    }\n    if (fromIndex < 0) {\n      fromIndex = 0;\n    }\n\n    if (ch < Character.MIN_SUPPLEMENTARY_CODE_POINT) {\n      char[] sourceArray = StringSubstitutions.getValue(source);\n\n      Pointer sourcePointer =\n          Word.objectToTrackedPointer(sourceArray)\n              .add(charArrayBaseOffset(INJECTED))\n              .add(fromIndex * charArrayIndexScale(INJECTED));\n      int result =\n          AMD64ArrayIndexOfNode.optimizedArrayIndexOf(\n              sourcePointer, sourceCount - fromIndex, (char) ch, JavaKind.Char);\n      if (result != -1) {\n        return result + fromIndex;\n      }\n      return result;\n    } else {\n      return indexOf(source, ch, fromIndex);\n    }\n  }\n", "line_num": 26, "charoffset": 19, "length": 30, "error": "indexOf(source,ch,fromIndex)", "repair": "indexOf(source,ch,origFromIndex)", "task_id": 456, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7838823306171856}, {"buggy": true, "line_num": 12, "prob": 0.12502127995507986}, {"buggy": true, "line_num": 20, "prob": 9.433284918447585e-06}, {"buggy": true, "line_num": 22, "prob": 5.149013781253466e-06}, {"buggy": true, "line_num": 11, "prob": 4.9624753424590496e-06}, {"buggy": true, "line_num": 26, "prob": 5.500460528693995e-08}, {"buggy": true, "line_num": 8, "prob": 6.939940782709853e-09}]}
{"project": "SpringSource.spring-framework", "commit": "16410cad4de1042c1c9641890b16fa3d49cc8b33", "file_path": "spring-core/src/main/java/org/springframework/util/ConcurrentReferenceHashMap.java", "func_code": "  protected static int calculateShift(int minimumValue, int maximumValue) {\n    int shift = 0;\n    int value = 1;\n    while (value < minimumValue && value < minimumValue) {\n      value <<= 1;\n      shift++;\n    }\n    return shift;\n  }\n", "line_num": 3, "charoffset": 33, "length": 20, "error": "value < minimumValue", "repair": "value < maximumValue", "task_id": 121, "predictions": [{"buggy": true, "line_num": 3, "prob": 0.9927970614207472}, {"buggy": false, "line_num": -1, "prob": 6.626857436808978e-07}, {"buggy": true, "line_num": 4, "prob": 1.1539726553042512e-13}, {"buggy": true, "line_num": 7, "prob": 3.4657588610508545e-22}]}
{"project": "elastic.elasticsearch", "commit": "ad5525f575d0dea82da28235186a9d5a74aeb5bc", "file_path": "modules/elasticsearch/src/main/java/org/elasticsearch/ExceptionsHelper.java", "func_code": "  public static Throwable unwrapCause(Throwable t) {\n    int counter = 0;\n    Throwable result = t;\n    while (result instanceof ElasticSearchWrapperException) {\n      if (t.getCause() == null) {\n        return result;\n      }\n      if (t.getCause() == t) {\n        return result;\n      }\n      if (counter++ > 10) {\n        // dear god, if we got more than 10 levels down, WTF? just bail\n        logger.warn(\"Exception cause unwrapping ran for 10 levels...\", t);\n        return result;\n      }\n      result = t.getCause();\n    }\n    return result;\n  }\n", "line_num": 7, "charoffset": 16, "length": 12, "error": "t.getCause()", "repair": "result.getCause()", "task_id": 295, "predictions": [{"buggy": true, "line_num": 7, "prob": 0.5746969268944792}, {"buggy": false, "line_num": -1, "prob": 0.14891943798488225}, {"buggy": true, "line_num": 3, "prob": 0.00010968394839766167}, {"buggy": true, "line_num": 12, "prob": 2.2397992626583297e-07}, {"buggy": true, "line_num": 15, "prob": 2.3574845640755577e-08}, {"buggy": true, "line_num": 4, "prob": 2.6585146395183566e-12}, {"buggy": true, "line_num": 2, "prob": 3.663423449849413e-13}]}
{"project": "JetBrains.intellij-community", "commit": "e92340234987ba05e522ccca6313ba3404c8f6e6", "file_path": "source/com/intellij/testFramework/fixtures/impl/CodeInsightTestFixtureImpl.java", "func_code": "  public void checkResultByFile(final String filePath, final String expectedFile) throws Throwable {\n\n    new WriteCommandAction.Simple(myProjectFixture.getProject()) {\n\n      protected void run() throws Throwable {\n        String fullPath = getTempDirPath() + \"/\" + filePath;\n        final VirtualFile copy =\n            LocalFileSystem.getInstance()\n                .refreshAndFindFileByPath(fullPath.replace(File.separatorChar, '/'));\n        assert copy != null : \"file not found: \" + fullPath;\n        final PsiFile psiFile = myPsiManager.findFile(copy);\n        assert psiFile != null;\n        checkResultByFile(expectedFile, psiFile, false);\n      }\n    }.execute().throwException();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 82, "predictions": [{"buggy": true, "line_num": 10, "prob": 0.9581887582083167}, {"buggy": false, "line_num": -1, "prob": 0.0008190256367327387}, {"buggy": true, "line_num": 9, "prob": 2.8613040361317108e-05}, {"buggy": true, "line_num": 11, "prob": 1.23425042293791e-05}, {"buggy": true, "line_num": 8, "prob": 1.7941477708357458e-07}, {"buggy": true, "line_num": 12, "prob": 1.4443112237370544e-10}, {"buggy": true, "line_num": 5, "prob": 1.3286110008418023e-11}]}
{"project": "web3j.web3j", "commit": "11943962715ce0f10cf9605da9ae7b510f613453", "file_path": "core/src/main/java/org/web3j/protocol/core/filters/Filter.java", "func_code": "  private void pollFilter(EthFilter ethFilter) {\n    EthLog ethLog = null;\n    try {\n      ethLog = web3j.ethGetFilterChanges(filterId).send();\n    } catch (IOException e) {\n      throwException(e);\n    }\n    if (ethLog.hasError()) {\n      throwException(ethFilter.getError());\n    } else {\n      process(ethLog.getLogs());\n    }\n  }\n", "line_num": 8, "charoffset": 27, "length": 20, "error": "ethFilter.getError()", "repair": "ethLog.getError()", "task_id": 527, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9499012127670807}, {"buggy": true, "line_num": 8, "prob": 0.03222552732313007}, {"buggy": true, "line_num": 3, "prob": 1.0392205553154167e-08}, {"buggy": true, "line_num": 10, "prob": 8.344715310368959e-10}, {"buggy": true, "line_num": 5, "prob": 5.845110751433563e-12}, {"buggy": true, "line_num": 7, "prob": 2.360335595098876e-13}]}
{"project": "grails.grails-core", "commit": "d21f9b10ee35a09e506c0f9fe24b501af9210001", "file_path": "grails-web/src/main/groovy/org/codehaus/groovy/grails/web/pages/GroovyPagesTemplateRenderer.java", "func_code": "  private Template generateScaffoldedTemplate(\n      GrailsWebRequest webRequest, String templateName, String uri) throws IOException {\n    Template t = null;\n    Collection<String> controllerActions = scaffoldedActionMap.get(webRequest.getControllerName());\n    if (controllerActions != null && controllerActions.contains(webRequest.getActionName())) {\n      GrailsDomainClass domainClass =\n          controllerToScaffoldedDomainClassMap.get(webRequest.getControllerName());\n      if (domainClass != null) {\n        int i = uri.lastIndexOf('/');\n        String scaffoldedtemplateName = i > -1 ? uri.substring(i) : uri;\n        if (scaffoldedtemplateName.toLowerCase().endsWith(\".gsp\")) {\n          scaffoldedtemplateName =\n              scaffoldedtemplateName.substring(0, scaffoldedtemplateName.length() - 4);\n        }\n        FastStringWriter sw = new FastStringWriter();\n        ReflectionUtils.invokeMethod(\n            generateViewMethod,\n            scaffoldingTemplateGenerator,\n            domainClass,\n            scaffoldedtemplateName,\n            sw);\n        t = groovyPagesTemplateEngine.createTemplate(sw.toString(), uri);\n      }\n    }\n    return t;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 347, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5689161366237188}, {"buggy": true, "line_num": 19, "prob": 0.01181336490491883}, {"buggy": true, "line_num": 3, "prob": 4.128071084902463e-06}, {"buggy": true, "line_num": 10, "prob": 3.997945433283769e-07}, {"buggy": true, "line_num": 8, "prob": 2.622741907194011e-07}, {"buggy": true, "line_num": 21, "prob": 1.261187201686825e-08}, {"buggy": true, "line_num": 9, "prob": 3.4854373086083337e-09}, {"buggy": true, "line_num": 4, "prob": 9.752909359662208e-10}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "4da5c4ac6f32b946fa31ea14764a1bd550aa9fd2", "file_path": "core/java/android/webkit/WebViewClassic.java", "func_code": "  private void scrollLayerTo(int x, int y) {\n    int dx = mScrollingLayerRect.left - x;\n    int dy = mScrollingLayerRect.top - y;\n    if (dx == 0 && y == 0) {\n      return;\n    }\n    if (mSelectingText) {\n      if (mSelectCursorBaseLayerId == mCurrentScrollingLayerId) {\n        mSelectCursorBase.offset(dx, dy);\n        mSelectCursorBaseTextQuad.offset(dx, dy);\n      }\n      if (mSelectCursorExtentLayerId == mCurrentScrollingLayerId) {\n        mSelectCursorExtent.offset(dx, dy);\n        mSelectCursorExtentTextQuad.offset(dx, dy);\n      }\n    }\n    if (mAutoCompletePopup != null && mCurrentScrollingLayerId == mEditTextLayerId) {\n      mEditTextBounds.offset(dx, dy);\n      mAutoCompletePopup.resetRect();\n    }\n    nativeScrollLayer(mCurrentScrollingLayerId, x, y);\n    mScrollingLayerRect.left = x;\n    mScrollingLayerRect.top = y;\n    mWebViewCore.sendMessage(\n        WebViewCore.EventHub.SCROLL_LAYER, mCurrentScrollingLayerId, mScrollingLayerRect);\n    mWebViewPrivate.onScrollChanged(getScrollX(), getScrollY(), getScrollX(), getScrollY());\n    invalidate();\n  }\n", "line_num": 3, "charoffset": 23, "length": 6, "error": "y == 0", "repair": "dy == 0", "task_id": 154, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9996625185338749}, {"buggy": true, "line_num": 3, "prob": 3.6920316289018445e-08}, {"buggy": true, "line_num": 9, "prob": 2.205264645907949e-08}, {"buggy": true, "line_num": 16, "prob": 4.585822298388013e-09}, {"buggy": true, "line_num": 1, "prob": 3.9485517653655673e-10}, {"buggy": true, "line_num": 8, "prob": 3.3744584124861444e-10}, {"buggy": true, "line_num": 20, "prob": 1.257700332470523e-10}, {"buggy": true, "line_num": 2, "prob": 5.274115014855781e-12}]}
{"project": "JetBrains.intellij-community", "commit": "87766a2dc1db0748e723e668b1b1f5881c596355", "file_path": "plugins/ant/src/com/intellij/lang/ant/dom/CustomAntElementsRegistry.java", "func_code": "  private void addCustomDefinition(\n      @NotNull AntDomNamedElement declaringTag,\n      String customTagName,\n      String nsUri,\n      Class clazz,\n      String error) {\n    final XmlName xmlName = new XmlName(customTagName, nsUri == null ? \"\" : nsUri);\n    if (error != null) {\n      myErrors.put(xmlName, error);\n    }\n    myCustomElements.put(xmlName, clazz);\n    myDeclarations.put(xmlName, declaringTag);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 68, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7863741555271538}, {"buggy": true, "line_num": 7, "prob": 2.771591673407575e-09}, {"buggy": true, "line_num": 10, "prob": 2.8220250503822857e-11}, {"buggy": true, "line_num": 11, "prob": 6.243641375085709e-12}, {"buggy": true, "line_num": 8, "prob": 6.218457552757969e-12}, {"buggy": true, "line_num": 6, "prob": 9.946979414494716e-13}]}
{"project": "keycloak.keycloak", "commit": "487539542ac40e18342dcb2e1b751ac05a63ea3b", "file_path": "services/src/main/java/org/keycloak/authorization/protection/ProtectionService.java", "func_code": "  public Object resource() {\n    KeycloakIdentity identity = createIdentity(true);\n    ResourceServer resourceServer = getResourceServer(identity);\n    RealmModel realm = authorization.getRealm();\n    ClientModel client = realm.getClientById(resourceServer.getId());\n    KeycloakSession keycloakSession = authorization.getKeycloakSession();\n    UserModel serviceAccount = keycloakSession.users().getServiceAccount(client);\n    AdminEventBuilder adminEvent =\n        new AdminEventBuilder(\n            realm,\n            new AdminAuth(realm, identity.getAccessToken(), serviceAccount, client),\n            keycloakSession,\n            clientConnection);\n    ResourceSetService resourceManager =\n        new ResourceSetService(\n            resourceServer,\n            this.authorization,\n            null,\n            adminEvent.realm(realm).authClient(client).authUser(serviceAccount));\n\n    ResteasyProviderFactory.getInstance().injectProperties(resourceManager);\n\n    ResourceService resource = new ResourceService(resourceServer, identity, resourceManager);\n\n    ResteasyProviderFactory.getInstance().injectProperties(resource);\n\n    return resource;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 379, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7504953560192806}, {"buggy": true, "line_num": 22, "prob": 0.0010105368643427348}, {"buggy": true, "line_num": 9, "prob": 5.11934208204605e-06}, {"buggy": true, "line_num": 10, "prob": 1.2603011582524613e-06}, {"buggy": true, "line_num": 6, "prob": 2.950462343802238e-07}]}
{"project": "oblac.jodd", "commit": "2a079dbcbf84cffd9f7013c32d67a4dd1b34b33a", "file_path": "jodd-proxetta/src/test/java/jodd/proxetta/AnnTest.java", "func_code": "  public void testMethodAnnotationsWrapper()\n      throws IllegalAccessException, NoSuchMethodException, InvocationTargetException {\n    WrapperProxetta proxetta =\n        WrapperProxetta.withAspects(\n            new ProxyAspect(\n                HeroProxyAdvice.class,\n                new AllRealMethodsPointcut() {\n                  @Override\n                  public boolean apply(MethodInfo methodInfo) {\n                    if (!methodInfo.isTopLevelMethod()) {\n                      return false;\n                    }\n                    return super.apply(methodInfo);\n                  }\n                }))\n        // .setDebugFolder(\"/Users/igor/\")\n        ;\n\n    WrapperProxettaBuilder proxettaBuilder = proxetta.builder();\n    proxettaBuilder.setTarget(Hero.class);\n    proxetta.setVariableClassName(true);\n    Object hero = proxettaBuilder.newInstance();\n\n    Method nameMethod = hero.getClass().getMethod(\"name\");\n    assertEquals(\"BatmanHero37W88.3CatWoman99speeeeedXRAYnull\", nameMethod.invoke(nameMethod));\n  }\n", "line_num": 24, "charoffset": 62, "length": 29, "error": "nameMethod.invoke(nameMethod)", "repair": "nameMethod.invoke(hero)", "task_id": 449, "predictions": [{"buggy": true, "line_num": 24, "prob": 0.9987204969412555}, {"buggy": true, "line_num": 20, "prob": 0.001279499422049327}, {"buggy": false, "line_num": -1, "prob": 2.671353151549316e-09}, {"buggy": true, "line_num": 12, "prob": 2.0182698291238008e-10}, {"buggy": true, "line_num": 9, "prob": 1.7928651794750084e-18}]}
{"project": "Graylog2.graylog2-server", "commit": "ffdbddae1854ebb628466d7c5ec5248f1a9b5459", "file_path": "graylog2-server/src/main/java/org/graylog2/users/UserImpl.java", "func_code": "  public void setPermissions(final List<String> permissions) {\n    final List<String> perms = Lists.newArrayList(permissions);\n    // Do not store the dynamic user self edit permissions\n    perms.removeAll(this.permissions.userSelfEditPermissions(getName()));\n    fields.put(PERMISSIONS, permissions);\n  }\n", "line_num": 4, "charoffset": 8, "length": 36, "error": "fields.put(PERMISSIONS,permissions)", "repair": "fields.put(PERMISSIONS,perms)", "task_id": 18, "predictions": [{"buggy": true, "line_num": 4, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 4.227899594741737e-12}, {"buggy": true, "line_num": 1, "prob": 2.807408045134488e-21}, {"buggy": true, "line_num": 3, "prob": 5.904749848848198e-22}]}
{"project": "SpigotMC.BungeeCord", "commit": "f53cbc2ab6e781a19fa95e91fa59dd0853dca6c6", "file_path": "api/src/main/java/net/md_5/bungee/api/plugin/PluginManager.java", "func_code": "  public void loadPlugin(File file) throws Exception {\n    Preconditions.checkNotNull(file, \"file\");\n    Preconditions.checkArgument(file.isFile(), \"Must load from file\");\n\n    try (JarFile jar = new JarFile(file)) {\n      JarEntry pdf = jar.getJarEntry(\"plugin.yml\");\n      Preconditions.checkNotNull(pdf, \"Plugin must have a plugin.yml\");\n\n      try (InputStream in = jar.getInputStream(pdf)) {\n        PluginDescription desc = yaml.loadAs(in, PluginDescription.class);\n        URLClassLoader loader = new URLClassLoader(new URL[] {file.toURI().toURL()});\n        Class<?> main = loader.loadClass(desc.getMain());\n        Plugin plugin = (Plugin) main.getDeclaredConstructor().newInstance();\n\n        plugin.init(desc);\n        plugins.put(desc.getName(), plugin);\n        plugin.onLoad();\n        ProxyServer.getInstance()\n            .getLogger()\n            .log(\n                Level.INFO,\n                \"Loaded plugin {0} version {1} by {2}\",\n                new Object[] {desc.getName(), desc.getVersion(), desc.getAuthor()});\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 118, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5978012949820439}, {"buggy": true, "line_num": 5, "prob": 9.6783000370098e-07}, {"buggy": true, "line_num": 16, "prob": 7.430251188260849e-08}, {"buggy": true, "line_num": 14, "prob": 1.9288288257905897e-09}, {"buggy": true, "line_num": 4, "prob": 5.16211620002739e-10}, {"buggy": true, "line_num": 17, "prob": 1.4645982703938366e-10}, {"buggy": true, "line_num": 9, "prob": 9.057493494319798e-11}, {"buggy": true, "line_num": 8, "prob": 4.998532332890253e-11}, {"buggy": true, "line_num": 10, "prob": 4.1211965356258524e-11}, {"buggy": true, "line_num": 22, "prob": 4.0995974951742035e-11}, {"buggy": true, "line_num": 11, "prob": 1.4192631602126785e-11}, {"buggy": true, "line_num": 6, "prob": 6.7831634997916995e-12}, {"buggy": true, "line_num": 12, "prob": 4.8250894195751816e-12}]}
{"project": "changmingxie.tcc-transaction", "commit": "4edc99a8a3286416ddc4ea80c80cdb11bb74475d", "file_path": "tcc-transaction-core/src/main/java/org/mengyun/tcctransaction/recover/TransactionRecovery.java", "func_code": "  private List<Transaction> loadErrorTransactions() {\n\n    TransactionRepository transactionRepository =\n        transactionConfigurator.getTransactionRepository();\n\n    long currentTimeInMillis = Calendar.getInstance().getTimeInMillis();\n\n    List<Transaction> transactions =\n        transactionRepository.findAllUnmodifiedSince(\n            new Date(\n                currentTimeInMillis\n                    - transactionConfigurator.getRecoverConfig().getRecoverDuration() * 1000));\n\n    List<Transaction> recoverTransactions = new ArrayList<Transaction>();\n\n    for (Transaction transaction : transactions) {\n\n      int result = transactionRepository.update(transaction);\n\n      if (result > 0) {\n        recoverTransactions.add(transaction);\n      }\n    }\n\n    return recoverTransactions;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 258, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.44524315881141263}, {"buggy": true, "line_num": 20, "prob": 3.766421934954699e-05}, {"buggy": true, "line_num": 3, "prob": 2.3642952565871487e-10}, {"buggy": true, "line_num": 11, "prob": 5.915218159170813e-12}, {"buggy": true, "line_num": 5, "prob": 2.799729924433252e-13}, {"buggy": true, "line_num": 17, "prob": 1.175913791188996e-13}, {"buggy": true, "line_num": 15, "prob": 8.847882763333205e-14}]}
{"project": "jMonkeyEngine.jmonkeyengine", "commit": "72423b682e5d46e2198e27898e2667bc51e0a236", "file_path": "jme3-core/src/tools/java/jme3tools/optimize/TextureAtlas.java", "func_code": "  public boolean addGeometry(Geometry geometry) {\n    Texture diffuse = getMaterialTexture(geometry, \"DiffuseMap\");\n    Texture normal = getMaterialTexture(geometry, \"NormalMap\");\n    Texture specular = getMaterialTexture(geometry, \"SpecularMap\");\n    if (diffuse == null) {\n      diffuse = getMaterialTexture(geometry, \"ColorMap\");\n    }\n    if (diffuse != null && diffuse.getKey() != null) {\n      String keyName = diffuse.getKey().toString();\n      if (!addTexture(diffuse, \"DiffuseMap\")) {\n        return false;\n      } else {\n        if (normal != null && normal.getKey() != null) {\n          addTexture(normal, \"NormalMap\", keyName);\n        }\n        if (specular != null && specular.getKey() != null) {\n          addTexture(specular, \"SpecularMap\", keyName);\n        }\n      }\n      return true;\n    }\n    return true;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 369, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7516831063731033}, {"buggy": true, "line_num": 9, "prob": 0.00026999585305757134}, {"buggy": true, "line_num": 3, "prob": 3.40938931622068e-07}, {"buggy": true, "line_num": 7, "prob": 7.085520482657711e-08}, {"buggy": true, "line_num": 8, "prob": 3.88541723916207e-09}, {"buggy": true, "line_num": 4, "prob": 1.4115893400912596e-09}, {"buggy": true, "line_num": 2, "prob": 6.864110117346731e-10}, {"buggy": true, "line_num": 16, "prob": 3.2635893906967377e-10}, {"buggy": true, "line_num": 5, "prob": 6.933252317859669e-11}, {"buggy": true, "line_num": 1, "prob": 2.510497280537859e-11}]}
{"project": "mybatis.mybatis-3", "commit": "8e01c1c07300c0fe2ecc76003ea7a01d5d5f47a3", "file_path": "src/main/java/org/apache/ibatis/reflection/ExceptionUtil.java", "func_code": "  public static Throwable unwrapThrowable(Throwable wrapped) {\r\n    Throwable unwrapped = wrapped;\r\n    while (true) {\r\n      if (unwrapped instanceof InvocationTargetException) {\r\n        unwrapped = ((InvocationTargetException) wrapped).getTargetException();\r\n      } else if (unwrapped instanceof UndeclaredThrowableException) {\r\n        unwrapped = ((UndeclaredThrowableException) wrapped).getUndeclaredThrowable();\r\n      } else {\r\n        return unwrapped;\r\n      }\r\n    }\r\n  }\r\n", "line_num": 6, "charoffset": 21, "length": 38, "error": "(UndeclaredThrowableException)wrapped", "repair": "(UndeclaredThrowableException)unwrapped", "task_id": 435, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.929551158605556}, {"buggy": true, "line_num": 6, "prob": 0.0704488565891122}, {"buggy": false, "line_num": -1, "prob": 4.3113291096028887e-08}, {"buggy": true, "line_num": 3, "prob": 1.1375635064799969e-12}, {"buggy": true, "line_num": 8, "prob": 4.423380140483566e-15}, {"buggy": true, "line_num": 1, "prob": 7.631316577540122e-16}, {"buggy": true, "line_num": 5, "prob": 1.1406936620270614e-17}]}
{"project": "deeplearning4j.deeplearning4j", "commit": "934d29aea5705c3af5c4b039863dc6e2718e822c", "file_path": "deeplearning4j-modelimport/src/main/java/org/deeplearning4j/nn/modelimport/keras/KerasLayer.java", "func_code": "  protected double getDropoutFromConfig(Map<String, Object> layerConfig)\n      throws InvalidKerasConfigurationException {\n    Map<String, Object> innerConfig = getInnerLayerConfigFromConfig(layerConfig);\n    /* NOTE: Keras \"dropout\" parameter determines dropout probability,\n     * while DL4J \"dropout\" parameter determines retention probability.\n     */\n    double dropout = 1.0;\n    if (innerConfig.containsKey(LAYER_FIELD_DROPOUT)) {\n      /* For most feedforward layers. */\n      dropout = 1.0 - (double) innerConfig.get(LAYER_FIELD_DROPOUT);\n    } else if (layerConfig.containsKey(LAYER_FIELD_DROPOUT_W)) {\n      /* For LSTMs. */\n      dropout = 1.0 - (double) layerConfig.get(LAYER_FIELD_DROPOUT_W);\n    }\n    return dropout;\n  }\n", "line_num": 12, "charoffset": 37, "length": 38, "error": "layerConfig.get(LAYER_FIELD_DROPOUT_W)", "repair": "innerConfig.get(LAYER_FIELD_DROPOUT_W)", "task_id": 271, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8575998102907475}, {"buggy": true, "line_num": 10, "prob": 1.1217620568835595e-11}, {"buggy": true, "line_num": 1, "prob": 1.7617886516764935e-12}, {"buggy": true, "line_num": 9, "prob": 1.6194023925616502e-12}, {"buggy": true, "line_num": 12, "prob": 1.1798527362994362e-12}]}
{"project": "thingsboard.thingsboard", "commit": "601efbc9317a0f65df0413bc800ad25870e3ebc3", "file_path": "application/src/main/java/org/thingsboard/server/controller/AlarmController.java", "func_code": "  public Alarm saveAlarm(@RequestBody Alarm alarm) throws ThingsboardException {\n    try {\n      alarm.setTenantId(getCurrentUser().getTenantId());\n      Alarm savedAlarm = checkNotNull(alarmService.createOrUpdateAlarm(alarm));\n      logEntityAction(\n          savedAlarm.getId(),\n          savedAlarm,\n          getCurrentUser().getCustomerId(),\n          alarm.getId() == null ? ActionType.ADDED : ActionType.UPDATED,\n          null);\n      return savedAlarm;\n    } catch (Exception e) {\n      logEntityAction(\n          emptyId(EntityType.ALARM),\n          alarm,\n          null,\n          alarm.getId() == null ? ActionType.ADDED : ActionType.UPDATED,\n          e);\n      throw handleException(e);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 517, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9986683006355983}, {"buggy": false, "line_num": -1, "prob": 0.000981864405861347}, {"buggy": true, "line_num": 10, "prob": 0.0003361093331275405}, {"buggy": true, "line_num": 8, "prob": 4.8545470824972144e-06}, {"buggy": true, "line_num": 6, "prob": 7.259645193223036e-10}, {"buggy": true, "line_num": 3, "prob": 6.77910136172188e-16}, {"buggy": true, "line_num": 17, "prob": 1.443970768352629e-16}]}
{"project": "Activiti.Activiti", "commit": "8f235043a979aa4a0795b1c36c34a1ea3d03a3ae", "file_path": "modules/activiti-ui/activiti-app-logic/src/main/java/com/activiti/service/runtime/DeploymentServiceImpl.java", "func_code": "  protected String retrieveFinalFormKey(\n      String formKey,\n      FlowElement flowElement,\n      Map<Long, Form> formIdMap,\n      AbstractModel model,\n      Long appDefinitionId,\n      Long appDeploymentId,\n      User user) {\n\n    String finalFormKey = null;\n    List<ExtensionElement> formIdExtensions =\n        flowElement.getExtensionElements().get(\"form-reference-id\");\n    List<ExtensionElement> formNameExtensions =\n        flowElement.getExtensionElements().get(\"form-reference-name\");\n    if (CollectionUtils.isNotEmpty(formIdExtensions)\n        && CollectionUtils.isNotEmpty(formNameExtensions)) {\n      Long formId = Long.valueOf(formIdExtensions.get(0).getElementText());\n      finalFormKey =\n          getFormKeyWithFormId(formId, formIdMap, model, appDefinitionId, appDeploymentId, user);\n\n    } else if (StringUtils.isNotEmpty(formKey) && formKey.startsWith(\"FORM_REFERENCE\")) {\n      String formIdValue = formKey.replace(\"FORM_REFERENCE\", \"\");\n      if (NumberUtils.isNumber(formIdValue)) {\n        Long formId = Long.valueOf(formIdValue);\n        finalFormKey =\n            getFormKeyWithFormId(formId, formIdMap, model, appDefinitionId, appDeploymentId, user);\n      }\n    }\n\n    if (StringUtils.isEmpty(formKey)) {\n      finalFormKey = formKey;\n    }\n\n    return finalFormKey;\n  }\n", "line_num": 29, "charoffset": 12, "length": 28, "error": "StringUtils.isEmpty(formKey)", "repair": "StringUtils.isEmpty(finalFormKey)", "task_id": 0, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7223549466191689}, {"buggy": true, "line_num": 29, "prob": 3.0612773651172675e-10}, {"buggy": true, "line_num": 30, "prob": 2.7320995145775065e-10}, {"buggy": true, "line_num": 23, "prob": 2.7295316663969067e-10}, {"buggy": true, "line_num": 24, "prob": 1.4410002592591824e-11}, {"buggy": true, "line_num": 20, "prob": 4.8250894195751816e-12}]}
{"project": "apache.calcite", "commit": "b4cbc033d36bf48ceb44698634931f3b3123defd", "file_path": "src/test/java/net/hydromatic/optiq/test/OptiqAssert.java", "func_code": "  public AssertThat with(final String name, final Object schema) {\n    return with(\n        new OptiqAssert.ConnectionFactory() {\n          public OptiqConnection createConnection() throws Exception {\n            Class.forName(\"net.hydromatic.optiq.jdbc.Driver\");\n            Connection connection = DriverManager.getConnection(\"jdbc:optiq:\");\n            OptiqConnection optiqConnection = connection.unwrap(OptiqConnection.class);\n            MutableSchema rootSchema = optiqConnection.getRootSchema();\n            ReflectiveSchema.create(optiqConnection, rootSchema, name, schema);\n            optiqConnection.setSchema(name);\n            return optiqConnection;\n          }\n        });\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 166, "predictions": [{"buggy": true, "line_num": 9, "prob": 0.996378063645199}, {"buggy": false, "line_num": -1, "prob": 4.683705800390429e-05}, {"buggy": true, "line_num": 10, "prob": 3.4037540166702045e-10}, {"buggy": true, "line_num": 8, "prob": 1.1166095239859357e-10}, {"buggy": true, "line_num": 7, "prob": 4.697027817408479e-12}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "5b301eb66c19deea88b1b5a979584bcc37235f72", "file_path": "packages/SystemUI/src/com/android/systemui/statusbar/phone/ObservableScrollView.java", "func_code": "  public boolean dispatchTouchEvent(MotionEvent ev) {\n    if (ev.getAction() == MotionEvent.ACTION_DOWN) {\n      if (!mTouchEnabled) {\n        mTouchCancelled = true;\n        return false;\n      }\n      mTouchCancelled = false;\n    } else if (mTouchCancelled) {\n      return false;\n    } else if (!mTouchEnabled) {\n      MotionEvent cancel = MotionEvent.obtain(ev);\n      cancel.setAction(MotionEvent.ACTION_CANCEL);\n      super.dispatchTouchEvent(cancel);\n      cancel.recycle();\n      mTouchCancelled = true;\n      return false;\n    }\n    return super.dispatchTouchEvent(ev);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 146, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9663006340748996}, {"buggy": true, "line_num": 7, "prob": 7.829254566063924e-07}, {"buggy": true, "line_num": 12, "prob": 1.439692023397773e-08}, {"buggy": true, "line_num": 11, "prob": 5.776850808546799e-11}, {"buggy": true, "line_num": 13, "prob": 6.4639284791885856e-12}, {"buggy": true, "line_num": 9, "prob": 6.625093158341657e-13}, {"buggy": true, "line_num": 2, "prob": 3.8563568764030743e-13}]}
{"project": "lecho.hellocharts-android", "commit": "86a8d3d75cd2a405e708f7c43184e7b66e61bbf4", "file_path": "hellocharts-library/src/lecho/lib/hellocharts/LineChartRenderer.java", "func_code": "  private void drawAnnotation(\n      Canvas canvas, LineStyle style, LinePoint linePoint, float rawValueX, float rawValueY) {\n    final ChartCalculator chartCalculator = mChart.getChartCalculator();\n    final float offset = Utils.dp2px(mContext, style.getPointRadius());\n    final String text = style.getLineValueFormatter().formatValue(linePoint);\n    annotationPaint.setTextSize(Utils.sp2px(mContext, style.getTextSize()));\n    annotationPaint.getTextBounds(text, 0, text.length(), textBoundsRect);\n    float left = rawValueX - textBoundsRect.width() / 2 - mAnnotationMargin;\n    float right = rawValueX + textBoundsRect.width() / 2 + mAnnotationMargin;\n    float top = rawValueY - offset - textBoundsRect.height() - mAnnotationMargin * 2;\n    float bottom = rawValueY - offset;\n    if (top < chartCalculator.mContentRect.top) {\n      top = rawValueY + offset;\n      bottom = rawValueY + offset + textBoundsRect.height() + mAnnotationMargin * 2;\n    }\n    if (right < chartCalculator.mContentRect.left) {\n      left = rawValueX;\n      right = rawValueX + textBoundsRect.width() + mAnnotationMargin * 2;\n    }\n    if (right > chartCalculator.mContentRect.right) {\n      left = rawValueX - textBoundsRect.width() - mAnnotationMargin * 2;\n      right = rawValueX;\n    }\n    annotationRect.set(left, top, right, bottom);\n    annotationPaint.setColor(style.getColor());\n    canvas.drawRoundRect(annotationRect, mAnnotationMargin, mAnnotationMargin, annotationPaint);\n    annotationPaint.setColor(style.getTextColor());\n    canvas.drawText(text, left + mAnnotationMargin, bottom - mAnnotationMargin, annotationPaint);\n  }\n", "line_num": 15, "charoffset": 6, "length": 41, "error": "right < chartCalculator.mContentRect.left", "repair": "left < chartCalculator.mContentRect.left", "task_id": 384, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9660903775346874}, {"buggy": true, "line_num": 26, "prob": 0.0035825071246916584}, {"buggy": true, "line_num": 9, "prob": 0.0004566670552639241}, {"buggy": true, "line_num": 27, "prob": 3.739770848174087e-07}, {"buggy": true, "line_num": 13, "prob": 1.0947926458238482e-07}, {"buggy": true, "line_num": 17, "prob": 5.896719219424899e-09}, {"buggy": true, "line_num": 10, "prob": 5.321524351064001e-09}, {"buggy": true, "line_num": 5, "prob": 3.0684809382998235e-09}]}
{"project": "igniterealtime.Openfire", "commit": "8da466057319d9b8c1a8e79d08747b150baa559d", "file_path": "src/java/org/jivesoftware/util/CacheManager.java", "func_code": "  public static Cache initializeCache(\n      String name, String propertiesName, int size, long expirationTime) {\n    Cache cache = caches.get(name);\n    if (cache == null) {\n      size = JiveGlobals.getIntProperty(\"cache.\" + name + \".size\", size);\n      expirationTime =\n          (long)\n              JiveGlobals.getIntProperty(\n                  \"cache.\" + propertiesName + \".expirationTime\", (int) expirationTime);\n      cache = new Cache(name, size, expirationTime);\n      caches.put(name, cache);\n    }\n    return cache;\n  }\n", "line_num": 4, "charoffset": 46, "length": 25, "error": "\"cache.\" + name + \".size\"", "repair": "\"cache.\" + propertiesName + \".size\"", "task_id": 366, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7974578830099971}, {"buggy": true, "line_num": 4, "prob": 0.11089808549196163}, {"buggy": true, "line_num": 5, "prob": 0.0003711880302785918}, {"buggy": true, "line_num": 10, "prob": 3.273794279999967e-05}, {"buggy": true, "line_num": 9, "prob": 2.617574604284283e-05}, {"buggy": true, "line_num": 2, "prob": 2.7920603743707936e-10}, {"buggy": true, "line_num": 1, "prob": 3.216749332800812e-11}]}
{"project": "bigbluebutton.bigbluebutton", "commit": "5b51d137a4eba7d3442c005537b3d9a2748ebaff", "file_path": "bbb-video/src/main/java/org/bigbluebutton/app/video/MeetingManager.java", "func_code": "  public void addStream(String meetingId, VideoStream vs) {\r\n    Meeting m = meetings.get(meetingId);\r\n    if (m != null) {\r\n      m.addStream(vs);\r\n    } else {\r\n      Meeting nm = new Meeting(meetingId);\r\n      nm.addStream(vs);\r\n      add(m);\r\n    }\r\n  }\r\n", "line_num": 7, "charoffset": 12, "length": 6, "error": "add(m)", "repair": "add(nm)", "task_id": 250, "predictions": [{"buggy": true, "line_num": 7, "prob": 0.9999995231630692}, {"buggy": true, "line_num": 3, "prob": 4.0999108059587273e-07}, {"buggy": false, "line_num": -1, "prob": 9.967592083746026e-08}, {"buggy": true, "line_num": 2, "prob": 1.932841084679679e-11}, {"buggy": true, "line_num": 5, "prob": 2.7277642210074593e-16}, {"buggy": true, "line_num": 6, "prob": 2.6839249858646358e-18}, {"buggy": true, "line_num": 1, "prob": 6.051292328321876e-19}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "135e5aac1bbbbc28afe3f8ae034d261a07db0a0f", "file_path": "services/core/java/com/android/server/InputMethodManagerService.java", "func_code": "  public void setImeWindowStatus(\n      IBinder token, IBinder startInputToken, int vis, int backDisposition) {\n    if (!calledWithValidToken(token)) {\n      return;\n    }\n\n    final StartInputInfo info;\n    synchronized (mMethodMap) {\n      info = mStartInputMap.get(startInputToken);\n      mImeWindowVis = vis;\n      mBackDisposition = backDisposition;\n      updateSystemUiLocked(token, vis, backDisposition);\n    }\n    mWindowManagerInternal.updateInputMethodWindowStatus(\n        token,\n        (vis & InputMethodService.IME_VISIBLE) != 0,\n        info != null ? info.mTargetWindow : null);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 139, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.45911254331080653}, {"buggy": true, "line_num": 14, "prob": 9.417994648828578e-06}, {"buggy": true, "line_num": 9, "prob": 1.0173509951182767e-06}, {"buggy": true, "line_num": 8, "prob": 3.081444190351414e-08}, {"buggy": true, "line_num": 15, "prob": 1.48440638550522e-09}, {"buggy": true, "line_num": 10, "prob": 7.61827623447048e-11}, {"buggy": true, "line_num": 11, "prob": 3.823862491250322e-11}, {"buggy": true, "line_num": 2, "prob": 1.8174364868152655e-12}]}
{"project": "eclipse.jetty.project", "commit": "50ca9d87d8f25c24a74e91d07baca85670d961c4", "file_path": "jetty-webapp/src/main/java/org/eclipse/jetty/webapp/CachingWebAppClassLoader.java", "func_code": "  public URL getResource(String name) {\n    if (_notFound.contains(name)) {\n      if (LOG.isDebugEnabled()) LOG.debug(\"Not found cache hit resource {}\", name);\n      return null;\n    }\n\n    URL url = _cache.get(name);\n\n    if (url == null) {\n      // Not found in cache, try parent\n      url = super.getResource(name);\n\n      if (url == null) {\n        // Still not found, cache the not-found result\n        if (LOG.isDebugEnabled()) LOG.debug(\"Caching not found resource {}\", name);\n        _notFound.add(name);\n      } else {\n        // Cache the new result\n        _cache.putIfAbsent(name, url);\n      }\n    }\n\n    return url;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 286, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9990516900867219}, {"buggy": true, "line_num": 15, "prob": 3.997912897308146e-08}, {"buggy": true, "line_num": 14, "prob": 7.405982012713157e-09}, {"buggy": true, "line_num": 2, "prob": 1.9234630746726084e-11}, {"buggy": true, "line_num": 18, "prob": 6.343730731130018e-12}, {"buggy": true, "line_num": 10, "prob": 1.5814726558341156e-12}, {"buggy": true, "line_num": 22, "prob": 6.924321204663936e-14}]}
{"project": "nicolasgramlich.AndEngine", "commit": "321a0721cc8820a0089cd2e1ae6307dc33e5d67e", "file_path": "src/org/anddev/andengine/opengl/vertex/LineVertexBuffer.java", "func_code": "  public synchronized void update(\r\n      final float pX1, final float pY1, final float pX2, final float pY2) {\r\n    final int[] bufferData = this.mBufferData;\r\n\r\n    bufferData[0] = Float.floatToRawIntBits(pX1);\r\n    bufferData[1] = Float.floatToRawIntBits(pY1);\r\n\r\n    bufferData[2] = Float.floatToRawIntBits(pX2);\r\n    bufferData[3] = Float.floatToRawIntBits(pY2);\r\n\r\n    final FastFloatBuffer buffer = this.getFloatBuffer();\r\n    buffer.position(0);\r\n    buffer.put(bufferData);\r\n    buffer.position(0);\r\n\r\n    super.setHardwareBufferNeedsUpdate();\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 442, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9728494945522066}, {"buggy": true, "line_num": 2, "prob": 2.4448856064770662e-09}, {"buggy": true, "line_num": 7, "prob": 2.1403324103013646e-12}, {"buggy": true, "line_num": 8, "prob": 1.884248898918587e-12}, {"buggy": true, "line_num": 4, "prob": 7.776337999780342e-13}, {"buggy": true, "line_num": 5, "prob": 6.300582166816115e-13}]}
{"project": "apache.tomcat", "commit": "ab6f21da230df89dd383ee84a5ba88f271453a8e", "file_path": "java/org/apache/tomcat/websocket/server/WsServerContainer.java", "func_code": "  private void registerAuthenticatedSession(WsSession wsSession, String httpSessionId) {\n    Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);\n    if (wsSession == null) {\n      wsSessions = Collections.newSetFromMap(new ConcurrentHashMap<WsSession, Boolean>());\n      authenticatedSessions.putIfAbsent(httpSessionId, wsSessions);\n      wsSessions = authenticatedSessions.get(httpSessionId);\n    }\n    wsSessions.add(wsSession);\n  }\n", "line_num": 2, "charoffset": 12, "length": 17, "error": "wsSession == null", "repair": "wsSessions == null", "task_id": 235, "predictions": [{"buggy": true, "line_num": 2, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 7.82468834491721e-14}, {"buggy": true, "line_num": 1, "prob": 4.628275526466086e-23}, {"buggy": true, "line_num": 7, "prob": 3.0776790779068274e-23}, {"buggy": true, "line_num": 5, "prob": 3.444653325626527e-24}]}
{"project": "Graylog2.graylog2-server", "commit": "bc1adbde03308cb046dbc14e562a85b5e42d6ed1", "file_path": "graylog2-shared/src/main/java/org/graylog2/shared/inputs/InputRegistry.java", "func_code": "  public boolean remove(MessageInput input) {\n    final IOState<MessageInput> inputState = this.stop(input);\n    if (inputState != null) inputState.setState(IOState.Type.TERMINATED);\n\n    return super.remove(inputState);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 19, "predictions": [{"buggy": true, "line_num": 4, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 2.2329549057471863e-11}, {"buggy": true, "line_num": 2, "prob": 8.302511605973352e-15}]}
{"project": "openhab.openhab", "commit": "ca588103009cd6ffe00ee721ac9bb9832d3a182f", "file_path": "bundles/binding/org.openhab.binding.astro/src/main/java/org/openhab/binding/astro/internal/util/DateTimeUtils.java", "func_code": "  public static Range getRange(int startMonth, int startDay, int endMonth, int endDay) {\n    Calendar start = Calendar.getInstance();\n    start.set(Calendar.MONTH, startMonth);\n    start.set(Calendar.DAY_OF_MONTH, startDay);\n    start = truncateToMidnight(start);\n\n    Calendar end = Calendar.getInstance();\n    end.set(Calendar.MONTH, endMonth);\n    end.set(Calendar.DAY_OF_MONTH, endDay);\n    end.set(Calendar.HOUR_OF_DAY, 23);\n    end.set(Calendar.MINUTE, 59);\n    end.set(Calendar.SECOND, 59);\n    end.set(Calendar.MILLISECOND, 999);\n\n    return new Range(start, end);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 452, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6911979857181254}, {"buggy": true, "line_num": 4, "prob": 0.16022693552392864}]}
{"project": "liferay.liferay-portal", "commit": "1c36059951048c3dd94d8c6d0c260b9208e21381", "file_path": "portal-impl/src/com/liferay/portlet/wiki/action/EditPageAttachmentAction.java", "func_code": "  protected void addTempAttachment(ActionRequest actionRequest) throws Exception {\n\n    UploadPortletRequest uploadRequest = PortalUtil.getUploadPortletRequest(actionRequest);\n\n    long nodeId = ParamUtil.getLong(actionRequest, \"nodeId\");\n\n    File file = uploadRequest.getFile(\"file\");\n    String sourceFileName = uploadRequest.getFileName(\"file\");\n\n    WikiPageServiceUtil.addTempPageAttachment(nodeId, sourceFileName, _TEMP_FOLDER_NAME, file);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 417, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.5316960803602018}, {"buggy": true, "line_num": 7, "prob": 1.8973332204679296e-06}, {"buggy": false, "line_num": -1, "prob": 7.761317637781023e-08}, {"buggy": true, "line_num": 6, "prob": 7.066030503263328e-16}, {"buggy": true, "line_num": 9, "prob": 4.7689245379556485e-18}]}
{"project": "BroadleafCommerce.BroadleafCommerce", "commit": "b7de4630b8a90f731a175f3dd399efd45f1a1203", "file_path": "admin/broadleaf-open-admin-platform/src/main/java/org/broadleafcommerce/openadmin/client/setup/AppController.java", "func_code": "  public void go(\n      final Canvas container, HashMap<String, String[]> pages, String pageKey, boolean firstTime) {\n    this.pages = pages;\n    this.container = container;\n\n    if (firstTime) {\n      String token = History.getToken();\n      if (pageKey.equals(BLCLaunch.getSelectedPage(token))\n          && MasterView.moduleKey.equals(BLCLaunch.getSelectedModule(token))) {\n        String itemId = BLCLaunch.getDefaultItem(token);\n        showView(pages.get(pageKey)[0], pages.get(pageKey)[1], itemId);\n      } else {\n        buildHistoryNewItem(pageKey);\n      }\n      return;\n    }\n\n    if (pageKey != null && pages.get(pageKey) != null) {\n      if (SecurityManager.getInstance().isUserAuthorizedToViewSection(pages.get(pageKey)[0])) {\n        buildHistoryNewItem(pageKey);\n        return;\n      }\n    }\n\n    for (String sectionTitle : pages.keySet()) {\n      if (SecurityManager.getInstance().isUserAuthorizedToViewSection(pages.get(sectionTitle)[0])) {\n        buildHistoryNewItem(sectionTitle);\n        break;\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 13, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.811750425102639}, {"buggy": true, "line_num": 2, "prob": 0.018659297310415032}, {"buggy": true, "line_num": 9, "prob": 1.0527534705016544e-05}, {"buggy": true, "line_num": 8, "prob": 6.341481801580561e-06}, {"buggy": true, "line_num": 24, "prob": 7.3554155942541856e-09}, {"buggy": true, "line_num": 12, "prob": 3.563689754669583e-10}, {"buggy": true, "line_num": 6, "prob": 5.4744012228818306e-11}, {"buggy": true, "line_num": 7, "prob": 4.149449460277979e-11}, {"buggy": true, "line_num": 19, "prob": 2.522030199816066e-11}, {"buggy": true, "line_num": 17, "prob": 4.1411533986356414e-12}, {"buggy": true, "line_num": 25, "prob": 2.94450408929708e-12}, {"buggy": true, "line_num": 18, "prob": 1.6235992755790873e-12}]}
{"project": "JetBrains.intellij-community", "commit": "a5820de7deaf879d541c20ff4a4eddc3cccc45c5", "file_path": "plugins/svn4idea/src/org/jetbrains/idea/svn/commandLine/SvnInfoStructure.java", "func_code": "  private SVNConflictReason parseConflictReason(@NotNull String reasonName) throws SAXException {\n    SVNConflictReason reason = SVNConflictReason.fromString(reasonName);\n    reason = reason != null ? reason : ourConflictReasons.get(reasonName);\n\n    if (reason == null) {\n      throw new SAXException(\"Can not parse conflict reason: \" + reasonName);\n    }\n\n    return reason;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 46, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9934841964629225}, {"buggy": true, "line_num": 2, "prob": 0.0065157863697616}, {"buggy": true, "line_num": 5, "prob": 5.1659746292213954e-11}, {"buggy": true, "line_num": 1, "prob": 3.6289569275988337e-13}]}
{"project": "capitalone.Hygieia", "commit": "9e966bce65743a4b137e65ecf48ecb4a01060032", "file_path": "api/src/main/java/com/capitalone/dashboard/service/DashboardServiceImpl.java", "func_code": "  public DataResponse<Iterable<Dashboard>> getByServiceAndApplication(String component, String app)\n      throws HygieiaException {\n    Cmdb cmdbCompItem = cmdbService.configurationItemByConfigurationItem(component);\n    Cmdb cmdbAppItem = cmdbService.configurationItemByConfigurationItem(app);\n    Iterable<Dashboard> rt = null;\n\n    if (cmdbAppItem != null && cmdbAppItem != null) {\n      rt =\n          dashboardRepository\n              .findAllByConfigurationItemBusServObjectIdAndConfigurationItemBusAppObjectId(\n                  cmdbAppItem.getId(), cmdbCompItem.getId());\n    }\n    return new DataResponse<>(rt, System.currentTimeMillis());\n  }\n", "line_num": 6, "charoffset": 34, "length": 19, "error": "cmdbAppItem != null", "repair": "cmdbCompItem != null", "task_id": 256, "predictions": [{"buggy": true, "line_num": 6, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 9.144242664618359e-09}, {"buggy": true, "line_num": 12, "prob": 3.551649185727192e-19}, {"buggy": true, "line_num": 7, "prob": 3.4981202232956123e-19}, {"buggy": true, "line_num": 2, "prob": 1.6961867027781943e-20}, {"buggy": true, "line_num": 3, "prob": 1.5417290674097546e-20}, {"buggy": true, "line_num": 10, "prob": 1.208032272100498e-20}]}
{"project": "square.leakcanary", "commit": "1fc11495dd20cd4ac8964e0856067ca299bce6f6", "file_path": "leakcanary-analyzer/src/main/java/com/squareup/leakcanary/HahaHelper.java", "func_code": "  static boolean extendsThread(ClassObj clazz) {\n    boolean extendsThread = false;\n    ClassObj parentClass = clazz;\n    while (parentClass.getSuperClassObj() != null) {\n      if (clazz.getClassName().equals(Thread.class.getName())) {\n        extendsThread = true;\n        break;\n      }\n      parentClass = parentClass.getSuperClassObj();\n    }\n    return extendsThread;\n  }\n", "line_num": 4, "charoffset": 10, "length": 20, "error": "clazz.getClassName()", "repair": "parentClass.getClassName()", "task_id": 513, "predictions": [{"buggy": true, "line_num": 4, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 1.0970475229173142e-08}, {"buggy": true, "line_num": 8, "prob": 6.284819051470761e-18}]}
{"project": "JetBrains.intellij-community", "commit": "bccfa1cfdffe1727fb7bb97cc578c4ab5b1d717e", "file_path": "python/src/com/jetbrains/python/sdk/MacPythonSdkFlavor.java", "func_code": "  private static void collectPythonInstallations(String pythonPath, List<String> candidates) {\n    VirtualFile rootVDir = LocalFileSystem.getInstance().findFileByPath(pythonPath);\n    if (rootVDir != null) {\n      for (VirtualFile dir : rootVDir.getChildren()) {\n        final String dir_name = dir.getName().toLowerCase();\n        if (dir.isDirectory()) {\n          if (\"Current\".equals(dir_name) || dir_name.startsWith(\"2\") || dir_name.startsWith(\"3\")) {\n            VirtualFile bin_dir = dir.findChild(\"bin\");\n            if (bin_dir != null && bin_dir.isDirectory()) {\n              VirtualFile python_exe = bin_dir.findChild(\"python\");\n              if (python_exe != null) candidates.add(python_exe.getPath());\n            }\n          }\n        }\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 70, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6293611774980039}, {"buggy": true, "line_num": 5, "prob": 0.00046680094211497616}, {"buggy": true, "line_num": 6, "prob": 6.807579677957677e-09}, {"buggy": true, "line_num": 7, "prob": 3.997621108047852e-09}]}
{"project": "apache.flink", "commit": "fdac963d5ccdb0397cc069d701bccd6bd04eae5e", "file_path": "flink-staging/flink-streaming/flink-streaming-core/src/main/java/org/apache/flink/streaming/api/graph/StreamGraph.java", "func_code": "  public void addIterationHead(\n      Integer vertexID, Integer iterationHead, Integer iterationID, long timeOut) {\n\n    addNode(vertexID, StreamIterationHead.class, null, null);\n\n    chaining = false;\n\n    StreamLoop iteration = new StreamLoop(iterationID, getStreamNode(vertexID), timeOut);\n    streamLoops.put(iterationID, iteration);\n    vertexIDtoLoop.put(vertexID, iteration);\n\n    setSerializersFrom(iterationHead, vertexID);\n    getStreamNode(vertexID).setOperatorName(\"IterationHead-\" + iterationHead);\n\n    int outpartitionerIndex = getStreamNode(iterationHead).getInEdgeIndices().get(0);\n    StreamPartitioner<?> outputPartitioner =\n        getStreamNode(outpartitionerIndex).getOutEdges().get(0).getPartitioner();\n\n    addEdge(vertexID, iterationHead, outputPartitioner, 0, new ArrayList<String>());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"ITERATION SOURCE: {}\", vertexID);\n    }\n\n    sources.add(vertexID);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 189, "predictions": [{"buggy": true, "line_num": 8, "prob": 0.999919657076003}, {"buggy": true, "line_num": 11, "prob": 4.723845120198739e-05}, {"buggy": false, "line_num": -1, "prob": 2.8751037614315803e-05}, {"buggy": true, "line_num": 14, "prob": 5.5104468053239996e-08}, {"buggy": true, "line_num": 9, "prob": 1.2389372994147061e-12}, {"buggy": true, "line_num": 16, "prob": 2.5553411902281044e-13}, {"buggy": true, "line_num": 12, "prob": 9.453185248856676e-14}, {"buggy": true, "line_num": 21, "prob": 4.822526720730592e-14}, {"buggy": true, "line_num": 24, "prob": 3.502856197228271e-14}, {"buggy": true, "line_num": 18, "prob": 3.388893135625507e-14}]}
{"project": "h2oai.h2o-3", "commit": "b617451a655f097785d1463b3b20edc1da28f2da", "file_path": "h2o-core/src/main/java/water/fvec/Frame.java", "func_code": "  private void bulkAdd(String[] names, Vec[] vecs) {\n    Vec vec = vecs != null && vecs.length > 0 ? makeCompatible(new Frame(vecs[0])).anyVec() : null;\n    String[] tmpnames = names.clone();\n    int N = names.length;\n    assert (names.length == vecs.length);\n    for (int i = 0; i < N; ++i) {\n      checkCompatible(tmpnames[i] = uniquify(tmpnames[i]), vec); // Throw IAE is mismatch\n    }\n\n    int ncols = _keys.length;\n    _names = Arrays.copyOf(_names, ncols + N);\n    _keys = Arrays.copyOf(_keys, ncols + N);\n    _vecs = Arrays.copyOf(_vecs, ncols + N);\n    for (int i = 0; i < N; ++i) {\n      _names[ncols + i] = tmpnames[i];\n      _keys[ncols + i] = vecs[i]._key;\n      _vecs[ncols + i] = vecs[i];\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 351, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9798805534332136}, {"buggy": true, "line_num": 6, "prob": 0.0007925031304128722}, {"buggy": true, "line_num": 15, "prob": 1.6378113966958522e-05}, {"buggy": true, "line_num": 12, "prob": 5.178800494454591e-07}, {"buggy": true, "line_num": 3, "prob": 2.31670150846058e-07}, {"buggy": true, "line_num": 13, "prob": 1.1931625476012782e-07}, {"buggy": true, "line_num": 14, "prob": 1.0777320231499832e-09}]}
{"project": "apache.hive", "commit": "03eca7708ef2b1d9bdf3a4265639dd3d5541ca74", "file_path": "serde/src/java/org/apache/hadoop/hive/serde2/objectinspector/MetadataListStructObjectInspector.java", "func_code": "  public static MetadataListStructObjectInspector getInstance(List<String> columnNames) {\n    ArrayList<List<String>> key = new ArrayList<List<String>>(1);\n    key.add(columnNames);\n    MetadataListStructObjectInspector result = cached.get(key);\n    if (result == null) {\n      result = new MetadataListStructObjectInspector(columnNames);\n      MetadataListStructObjectInspector prev = cached.putIfAbsent(key, result);\n      if (prev != null) {\n        result = prev;\n      }\n    }\n    return result;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 207, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9998697212027553}, {"buggy": false, "line_num": -1, "prob": 0.00011789565979904393}, {"buggy": true, "line_num": 6, "prob": 3.2380544119114835e-11}, {"buggy": true, "line_num": 2, "prob": 1.2794770490561452e-13}, {"buggy": true, "line_num": 3, "prob": 1.2701158881113485e-13}, {"buggy": true, "line_num": 8, "prob": 6.510252500680224e-16}, {"buggy": true, "line_num": 7, "prob": 4.785184314188156e-16}, {"buggy": true, "line_num": 11, "prob": 3.9426170699360495e-16}]}
{"project": "igniterealtime.Openfire", "commit": "71b25e50b07e4ed00b410dd14df34a8ac302d22a", "file_path": "src/java/org/jivesoftware/messenger/net/DNSUtil.java", "func_code": "  public static HostAddress resolveXMPPServerDomain(String domain) {\n    if (context == null) {\n      return new HostAddress(domain, 5269);\n    }\n    String host = domain;\n    int port = 5269;\n    try {\n      Attributes dnsLookup = context.getAttributes(\"_xmpp-server._tcp.\" + domain);\n      String srvRecord = (String) dnsLookup.get(\"SRV\").get();\n      String[] srvRecordEntries = srvRecord.split(\" \");\n      port = Integer.parseInt(srvRecordEntries[srvRecordEntries.length - 2]);\n      host = srvRecordEntries[srvRecordEntries.length - 1];\n    } catch (Exception e) {\n      // Attempt lookup with older \"jabber\" name.\n      try {\n        Attributes dnsLookup = context.getAttributes(\"_jabber._tcp.\" + domain);\n        String srvRecord = (String) dnsLookup.get(\"SRV\").get();\n        String[] srvRecordEntries = srvRecord.split(\" \");\n        port = Integer.parseInt(srvRecordEntries[srvRecordEntries.length - 2]);\n        host = srvRecordEntries[srvRecordEntries.length - 1];\n      } catch (Exception e2) {\n      }\n    }\n    // Host entries in DNS should end with a \".\".\n    if (host.endsWith(\".\")) {\n      host = host.substring(0, host.length() - 1);\n    }\n    return new HostAddress(domain, port);\n  }\n", "line_num": 27, "charoffset": 15, "length": 29, "error": "new HostAddress(domain,port)", "repair": "new HostAddress(host,port)", "task_id": 547, "predictions": [{"buggy": true, "line_num": 27, "prob": 0.9999996423721385}, {"buggy": false, "line_num": -1, "prob": 7.28445549887169e-11}, {"buggy": true, "line_num": 10, "prob": 6.062576992169801e-16}, {"buggy": true, "line_num": 15, "prob": 6.849927540985836e-19}, {"buggy": true, "line_num": 18, "prob": 1.287873616856024e-19}, {"buggy": true, "line_num": 24, "prob": 4.211399433764916e-20}, {"buggy": true, "line_num": 9, "prob": 1.1694449469495304e-21}, {"buggy": true, "line_num": 17, "prob": 5.769264791731702e-22}, {"buggy": true, "line_num": 19, "prob": 2.1862520078340702e-22}]}
{"project": "mongodb.mongo-java-driver", "commit": "d08a48bf0f45a3c27853a82758117d70c35251c4", "file_path": "src/main/com/mongodb/MongoURI.java", "func_code": "  private void parseOptions(String optionsPart) {\n    for (String _part : optionsPart.split(\"&|;\")) {\n      int idx = _part.indexOf(\"=\");\n      if (idx >= 0) {\n        String key = _part.substring(0, idx).toLowerCase();\n        String value = _part.substring(idx + 1);\n        if (key.equals(\"maxpoolsize\")) _options.connectionsPerHost = Integer.parseInt(value);\n        else if (key.equals(\"minpoolsize\"))\n          LOGGER.warning(\"Currently No support in Java driver for Min Pool Size.\");\n        else if (key.equals(\"waitqueuemultiple\"))\n          _options.threadsAllowedToBlockForConnectionMultiplier = Integer.parseInt(value);\n        else if (key.equals(\"waitqueuetimeoutms\")) _options.maxWaitTime = Integer.parseInt(value);\n        else if (key.equals(\"connecttimeoutms\")) _options.connectTimeout = Integer.parseInt(value);\n        else if (key.equals(\"sockettimeoutms\")) _options.socketTimeout = Integer.parseInt(value);\n        else if (key.equals(\"autoconnectretry\")) _options.autoConnectRetry = _parseBoolean(value);\n        else if (key.equals(\"slaveok\")) _options.slaveOk = _parseBoolean(value);\n        else if (key.equals(\"safe\")) _options.safe = _parseBoolean(value);\n        else if (key.equals(\"w\")) _options.w = Integer.parseInt(value);\n        else if (key.equals(\"wtimeout\")) _options.wtimeout = Integer.parseInt(value);\n        else if (key.equals(\"fsync\")) _options.fsync = _parseBoolean(value);\n        else LOGGER.warning(\"Unknown or Unsupported Option '\" + value + \"'\");\n      }\n    }\n  }\n", "line_num": 20, "charoffset": 37, "length": 47, "error": "\"Unknown or Unsupported Option '\" + value + \"'\"", "repair": "\"Unknown or Unsupported Option '\" + key + \"'\"", "task_id": 430, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7163312202800511}, {"buggy": true, "line_num": 20, "prob": 0.2826826589514997}, {"buggy": true, "line_num": 14, "prob": 9.508572573689411e-05}, {"buggy": true, "line_num": 19, "prob": 3.6244887355851583e-09}, {"buggy": true, "line_num": 3, "prob": 9.726845364711908e-10}]}
{"project": "oracle.graal", "commit": "4c5685d7340d1ef33353eef9e13bd035c0c59bf5", "file_path": "projects/uk.ac.man.cs.llvm/src/uk/ac/man/cs/llvm/ir/module/FunctionV32.java", "func_code": "  protected void crateCall(long[] args) {\n    int i = 2;\n    int target = getIndex(args[i++]);\n    int[] arguments = new int[args.length - i];\n    int j = 0;\n    while (j < arguments.length) {\n      arguments[j++] = getIndex(args[i++]);\n    }\n\n    Type type = symbols.get(target).getType();\n\n    if (type instanceof PointerType) {\n      type = ((PointerType) type).getPointeeType();\n    }\n\n    Type returnType = ((FunctionType) type).getReturnType();\n\n    code.createCall(returnType, target, arguments);\n\n    if (returnType != MetaType.VOID) {\n      symbols.add(returnType);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 463, "predictions": [{"buggy": true, "line_num": 20, "prob": 0.9996369522099409}, {"buggy": false, "line_num": -1, "prob": 0.00012678562065141552}, {"buggy": true, "line_num": 5, "prob": 1.6325767660844751e-12}, {"buggy": true, "line_num": 12, "prob": 1.0734570421247133e-12}, {"buggy": true, "line_num": 3, "prob": 9.385816807256624e-13}, {"buggy": true, "line_num": 9, "prob": 6.32470791693684e-14}, {"buggy": true, "line_num": 17, "prob": 1.6810574621338376e-14}, {"buggy": true, "line_num": 6, "prob": 1.578990483034191e-14}]}
{"project": "airbnb.lottie-android", "commit": "2bbbae2028aa94c472483099db07e44005837266", "file_path": "lottie/src/main/java/com/airbnb/lottie/BaseStrokeContent.java", "func_code": "  @Override\n  public void getBounds(RectF outBounds, Matrix parentMatrix) {\n    path.reset();\n    for (int i = 0; i < pathGroups.size(); i++) {\n      PathGroup pathGroup = pathGroups.get(i);\n      for (int j = 0; j < pathGroup.paths.size(); j++) {\n        path.addPath(pathGroup.paths.get(i).getPath(), parentMatrix);\n      }\n    }\n    path.computeBounds(rect, false);\n\n    float width = widthAnimation.getValue();\n    rect.set(\n        rect.left - width / 2f,\n        rect.top - width / 2f,\n        rect.right + width / 2f,\n        rect.bottom + width / 2f);\n    outBounds.set(rect);\n    // Add padding to account for rounding errors.\n    outBounds.set(outBounds.left - 1, outBounds.top - 1, outBounds.right + 1, outBounds.bottom + 1);\n  }\n", "line_num": 6, "charoffset": 21, "length": 22, "error": "pathGroup.paths.get(i)", "repair": "pathGroup.paths.get(j)", "task_id": 127, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6717078070218729}, {"buggy": true, "line_num": 6, "prob": 1.4907650553144862e-05}, {"buggy": true, "line_num": 17, "prob": 1.1382631717336653e-05}, {"buggy": true, "line_num": 16, "prob": 7.389201719496094e-10}, {"buggy": true, "line_num": 15, "prob": 4.4677863139737096e-11}, {"buggy": true, "line_num": 11, "prob": 1.550272793481404e-11}, {"buggy": true, "line_num": 5, "prob": 1.199807284289459e-12}, {"buggy": true, "line_num": 4, "prob": 3.484526213576224e-13}, {"buggy": true, "line_num": 1, "prob": 2.241221886544871e-13}, {"buggy": true, "line_num": 9, "prob": 1.2561089674888853e-13}]}
{"project": "lingochamp.FileDownloader", "commit": "cd08d0a6764615ca3ee17299efc6999435178015", "file_path": "library/src/main/java/com/liulishuo/filedownloader/event/DownloadEventPoolImpl.java", "func_code": "  public boolean removeListener(final String eventId, final IDownloadListener listener) {\n    if (FileDownloadLog.NEED_LOG) {\n      FileDownloadLog.v(this, \"removeListener %s\", eventId);\n    }\n\n    LinkedList<IDownloadListener> container = listenersMap.get(eventId);\n    if (container == null) {\n      synchronized (eventId.intern()) {\n        container = listenersMap.get(eventId);\n      }\n    }\n\n    if (container == null || listener == null) {\n      return false;\n    }\n\n    synchronized (eventId.intern()) {\n      boolean succeed = container.remove(listener);\n      if (container.size() <= 0) {\n        listenersMap.remove(eventId);\n      }\n      return succeed;\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 419, "predictions": [{"buggy": true, "line_num": 12, "prob": 0.9997873904558537}, {"buggy": true, "line_num": 16, "prob": 9.32946282399935e-07}, {"buggy": false, "line_num": -1, "prob": 3.5794600612154817e-10}, {"buggy": true, "line_num": 7, "prob": 1.0873548337643058e-11}, {"buggy": true, "line_num": 17, "prob": 6.253411050468446e-13}, {"buggy": true, "line_num": 19, "prob": 2.4254944671481284e-16}, {"buggy": true, "line_num": 8, "prob": 1.0174258322054092e-17}, {"buggy": true, "line_num": 18, "prob": 1.011400758742561e-17}]}
{"project": "gitblit.gitblit", "commit": "55dc95d6015dfb980a118a3f2aec2c43c773e90a", "file_path": "src/main/java/com/gitblit/models/PluginRegistry.java", "func_code": "  public InstallState getInstallState(Version system) {\r\n    if (StringUtils.isEmpty(installedRelease)) {\r\n      return InstallState.NOT_INSTALLED;\r\n    }\r\n    Version ir = Version.createVersion(installedRelease);\r\n    Version cr = Version.ZERO;\r\n    PluginRelease curr = getCurrentRelease(system);\r\n    if (curr != null) {\r\n      cr = Version.createVersion(curr.version);\r\n    }\r\n    switch (ir.compareTo(cr)) {\r\n      case -1:\r\n        return InstallState.UNKNOWN;\r\n      case 1:\r\n        return InstallState.UPDATE_AVAILABLE;\r\n      default:\r\n        return InstallState.INSTALLED;\r\n    }\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 323, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7590309247824025}, {"buggy": true, "line_num": 1, "prob": 7.848664756523885e-10}, {"buggy": true, "line_num": 6, "prob": 5.398558898603977e-12}, {"buggy": true, "line_num": 7, "prob": 2.1353332841028987e-12}, {"buggy": true, "line_num": 4, "prob": 1.8517381214229795e-12}, {"buggy": true, "line_num": 10, "prob": 1.4947800356991725e-12}, {"buggy": true, "line_num": 8, "prob": 3.644612847274099e-13}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "157aee22f5119c5ccafaf984ac9e083131dff61f", "file_path": "core/java/android/security/keystore/recovery/RecoveryController.java", "func_code": "  public Key importKey(@NonNull String alias, byte[] keyBytes)\n      throws InternalRecoveryServiceException, LockScreenRequiredException {\n    try {\n      String grantAlias = mBinder.importKey(alias, keyBytes);\n      if (grantAlias == null) {\n        throw new InternalRecoveryServiceException(\"Null grant alias\");\n      }\n      return getKeyFromGrant(grantAlias);\n    } catch (RemoteException e) {\n      throw e.rethrowFromSystemServer();\n    } catch (UnrecoverableKeyException e) {\n      throw new InternalRecoveryServiceException(\"Failed to get key from keystore\", e);\n    } catch (ServiceSpecificException e) {\n      if (e.errorCode == ERROR_INSECURE_USER) {\n        throw new LockScreenRequiredException(e.getMessage());\n      }\n      throw wrapUnexpectedServiceSpecificException(e);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 132, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999997615814209}, {"buggy": true, "line_num": 16, "prob": 1.4354816253126758e-10}, {"buggy": true, "line_num": 7, "prob": 1.909561432553389e-11}, {"buggy": true, "line_num": 11, "prob": 7.485134435075574e-14}, {"buggy": true, "line_num": 4, "prob": 7.059706155480299e-14}]}
{"project": "redsolution.xabber-android", "commit": "e07bc7a870e50c82dcd509d9cd3792a4a778fbe5", "file_path": "app/src/main/java/com/xabber/android/ui/ChatViewer.java", "func_code": "  protected void onNewIntent(Intent intent) {\n    super.onNewIntent(intent);\n    if (isFinishing()) return;\n\n    chatViewerAdapter.onChange();\n\n    String account = getAccount(intent);\n    String user = getUser(intent);\n    if (account == null || user == null) {\n      return;\n    }\n\n    LogManager.i(this, \"onNewIntent account: \" + account + \", user: \" + user);\n\n    actionWithUser = user;\n    actionWithAccount = user;\n\n    selectPage(false);\n    onChatSelected();\n  }\n", "line_num": 15, "charoffset": 8, "length": 24, "error": "actionWithAccount=user", "repair": "actionWithAccount=account", "task_id": 497, "predictions": [{"buggy": true, "line_num": 14, "prob": 0.9741159227449647}, {"buggy": true, "line_num": 15, "prob": 0.02583728389572277}, {"buggy": false, "line_num": -1, "prob": 1.557668166515766e-05}, {"buggy": true, "line_num": 7, "prob": 1.354575377551751e-07}, {"buggy": true, "line_num": 8, "prob": 9.046439126376728e-12}, {"buggy": true, "line_num": 4, "prob": 2.3126008505423754e-12}, {"buggy": true, "line_num": 12, "prob": 6.479953770209834e-15}, {"buggy": true, "line_num": 6, "prob": 1.0483132681759025e-18}]}
{"project": "liquibase.liquibase", "commit": "404fa25ff274a61cfd2054c137f35d90608332cb", "file_path": "liquibase-core/src/main/java/liquibase/configuration/LiquibaseConfiguration.java", "func_code": "  public ConfigurationContainer getConfiguration(String typeName) {\n    for (Map.Entry<Class, ConfigurationContainer> entry : configurations.entrySet()) {\n      if (entry.getKey().getName().equals(typeName)) {\n        return entry.getValue();\n      }\n    }\n    try {\n      Class typeClass = Class.forName(typeName);\n      configurations.put(typeClass, createConfiguration(typeClass));\n      return configurations.get(typeClass);\n    } catch (Exception e) {\n      throw new UnexpectedLiquibaseException(e);\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 423, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999407529847613}, {"buggy": true, "line_num": 8, "prob": 5.290929183756138e-09}, {"buggy": true, "line_num": 9, "prob": 6.5429962690919e-11}, {"buggy": true, "line_num": 11, "prob": 5.153979354415622e-14}]}
{"project": "elastic.elasticsearch", "commit": "a5bef30be949ee30d33ec12a8c7b95dbc8424209", "file_path": "src/test/java/org/elasticsearch/test/unit/common/compress/CompressIndexInputOutputTests.java", "func_code": "  private void verify(IndexWriter writer) throws Exception {\n    CheckIndex checkIndex = new CheckIndex(writer.getDirectory());\n    CheckIndex.Status status = checkIndex.checkIndex();\n    assertThat(status.clean, equalTo(true));\n    IndexReader reader = DirectoryReader.open(writer, true);\n    final Bits liveDocs = MultiFields.getLiveDocs(reader);\n    for (int i = 0; i < reader.maxDoc(); i++) {\n      if (liveDocs != null && !liveDocs.get(i)) {\n        continue;\n      }\n      Document document = reader.document(i);\n      checkDoc(document);\n      DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(\"id\", \"field\", \"count\");\n      reader.document(i, visitor);\n      document = visitor.getDocument();\n      checkDoc(document);\n    }\n    for (int i = 0; i < 100; i++) {\n      int doc = ThreadLocalRandom.current().nextInt(reader.maxDoc());\n      if (liveDocs != null && !liveDocs.get(i)) {\n        continue;\n      }\n      Document document = reader.document(doc);\n      checkDoc(document);\n      DocumentStoredFieldVisitor visitor = new DocumentStoredFieldVisitor(\"id\", \"field\", \"count\");\n      reader.document(i, visitor);\n      document = visitor.getDocument();\n      checkDoc(document);\n    }\n  }\n", "line_num": 25, "charoffset": 12, "length": 27, "error": "reader.document(i,visitor)", "repair": "reader.document(doc,visitor)", "task_id": 545, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9890389446760116}, {"buggy": true, "line_num": 1, "prob": 3.3404768274351655e-08}, {"buggy": true, "line_num": 4, "prob": 2.4608638319615676e-08}, {"buggy": true, "line_num": 5, "prob": 2.6313927623975336e-09}, {"buggy": true, "line_num": 25, "prob": 1.968729439839941e-09}, {"buggy": true, "line_num": 19, "prob": 1.8014635071486772e-09}, {"buggy": true, "line_num": 13, "prob": 6.567518274604751e-10}, {"buggy": true, "line_num": 26, "prob": 2.9752920490076286e-10}, {"buggy": true, "line_num": 14, "prob": 1.3221149101098185e-10}, {"buggy": true, "line_num": 22, "prob": 6.39658666273889e-11}]}
{"project": "libgdx.libgdx", "commit": "2763f44d32286938fdd6c5afd58d4a69bc8bce8f", "file_path": "backends/gdx-backend-lwjgl/src/com/badlogic/gdx/backends/lwjgl/LwjglGL11.java", "func_code": "  public void glGenBuffers(int n, int[] buffers, int offset) {\r\n    for (int i = offset; i < offset + n; i++) buffers[i] = GL15.glGenBuffers();\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 392, "predictions": [{"buggy": true, "line_num": 1, "prob": 0.9960215791204936}, {"buggy": false, "line_num": -1, "prob": 3.3622730137037626e-05}]}
{"project": "redisson.redisson", "commit": "8029f91b60231a426d6f92ec87d9ea5e8af69750", "file_path": "src/main/java/org/redisson/RedissonSet.java", "func_code": "  public Future<Boolean> removeAllAsync(Collection<?> c) {\n    if (c.isEmpty()) {\n      return newSucceededFuture(false);\n    }\n\n    List<Object> args = new ArrayList<Object>(c.size() + 1);\n    args.add(getName());\n    args.addAll(c);\n\n    return commandExecutor.writeAsync(getName(), codec, RedisCommands.SREM_SINGLE, args.toArray());\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 496, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9997603893282976}, {"buggy": true, "line_num": 9, "prob": 5.207690961347282e-12}, {"buggy": true, "line_num": 7, "prob": 1.558288140854275e-12}, {"buggy": true, "line_num": 2, "prob": 1.3056167903377332e-12}, {"buggy": true, "line_num": 5, "prob": 7.412368674640066e-13}, {"buggy": true, "line_num": 6, "prob": 2.769789245717932e-13}]}
{"project": "JetBrains.intellij-community", "commit": "cb5ee8641f42b078ef9310172f88c0232bd67558", "file_path": "platform/vcs-log/impl/src/com/intellij/vcs/log/data/NodeAroundProvider.java", "func_code": "  public MultiMap<VirtualFile, Hash> getCommitsAround(@NotNull Node node, int above, int below) {\n    MultiMap<VirtualFile, Hash> commits = MultiMap.create();\n    int rowIndex = node.getRowIndex();\n    for (int i = rowIndex - above; i < rowIndex + below; i++) {\n      Node commitNode = getCommitNodeInRow(i);\n      if (commitNode != null) {\n        Hash hash = myDataHolder.getHash(commitNode.getCommitIndex());\n        commits.putValue(commitNode.getBranch().getRepositoryRoot(), hash);\n      }\n    }\n    return commits;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 45, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9884412291495555}, {"buggy": true, "line_num": 3, "prob": 7.099470404963135e-11}, {"buggy": true, "line_num": 1, "prob": 1.6956534093228204e-12}, {"buggy": true, "line_num": 4, "prob": 6.186312059502392e-13}, {"buggy": true, "line_num": 7, "prob": 1.9296786034513992e-13}, {"buggy": true, "line_num": 10, "prob": 6.675077305444284e-14}, {"buggy": true, "line_num": 5, "prob": 6.572266711698377e-14}]}
{"project": "MovingBlocks.Terasology", "commit": "564609134a4f5309a1b407fee287ca3290cd868f", "file_path": "engine/src/main/java/org/terasology/rendering/nui/layers/mainMenu/inputSettings/InputSettingsScreen.java", "func_code": "  private void addInputBindRow(SimpleUri uri, RegisterBindButton bind, ColumnLayout layout) {\n    UIInputBindButton inputBind = new UIInputBindButton();\n    inputBind.setManager(getManager());\n    inputBind.setDescription(bind.description());\n    inputBind.bindInput(new InputConfigBinding(config.getInput().getBinds(), uri));\n    UIInputBindButton secondaryInputBind = new UIInputBindButton();\n    secondaryInputBind.setManager(getManager());\n    secondaryInputBind.setDescription(bind.description());\n    secondaryInputBind.bindInput(new InputConfigBinding(config.getInput().getBinds(), uri, 1));\n    layout.addWidget(\n        new RowLayout(new UILabel(bind.description()), inputBind, secondaryInputBind)\n            .setColumnRatios(0.4f)\n            .setHorizontalSpacing(horizontalSpacing));\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 102, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.4662425139193942}, {"buggy": true, "line_num": 10, "prob": 0.36302252101670557}, {"buggy": true, "line_num": 7, "prob": 9.306805897727597e-10}, {"buggy": true, "line_num": 4, "prob": 8.007741251450149e-10}, {"buggy": true, "line_num": 8, "prob": 4.0165811651582736e-10}, {"buggy": true, "line_num": 11, "prob": 2.1165480897156093e-11}, {"buggy": true, "line_num": 3, "prob": 1.0532488174434461e-12}]}
{"project": "k9mail.k-9", "commit": "86374b25faf968fd1c919e4dc978a150a170dcec", "file_path": "k9mail/src/main/java/com/fsck/k9/activity/MessageCompose.java", "func_code": "  private void initializeFromMailto(MailTo mailTo) {\n    recipientPresenter.initFromMailto(mailTo);\n\n    String subject = mailTo.getSubject();\n    if (subject != null && !subject.isEmpty()) {\n      mSubjectView.setText(subject);\n    }\n\n    String body = mailTo.getBody();\n    if (body != null && !subject.isEmpty()) {\n      mMessageContentView.setCharacters(body);\n    }\n  }\n", "line_num": 9, "charoffset": 29, "length": 17, "error": "subject.isEmpty()", "repair": "body.isEmpty()", "task_id": 377, "predictions": [{"buggy": true, "line_num": 9, "prob": 0.9998577833177361}, {"buggy": false, "line_num": -1, "prob": 0.00014223494587371443}, {"buggy": true, "line_num": 10, "prob": 2.860037260710433e-15}, {"buggy": true, "line_num": 4, "prob": 4.252166579968455e-17}, {"buggy": true, "line_num": 1, "prob": 2.0211305227206399e-19}, {"buggy": true, "line_num": 5, "prob": 1.6494019148141023e-21}]}
{"project": "facebook.buck", "commit": "f809f032bd9dca69fbdcab8e342c0e8ef809c5df", "file_path": "src/com/facebook/buck/android/NativeLibraryMergeEnhancer.java", "func_code": "  private static APKModule getModuleForLinkable(\n      MergedLibNativeLinkable linkable,\n      ImmutableMap<NativeLinkable, APKModule> linkableToModuleMap) {\n    APKModule module = null;\n    for (NativeLinkable constituent : linkable.constituents.getLinkables()) {\n      APKModule constituentModule = linkableToModuleMap.get(constituent);\n      if (module == null) {\n        module = constituentModule;\n      }\n      if (module != constituentModule) {\n        StringBuilder sb = new StringBuilder();\n        sb.append(\"Native library merge of \")\n            .append(linkable)\n            .append(\" has inconsistent application module mappings: \");\n        for (NativeLinkable innerConstituent : linkable.constituents.getLinkables()) {\n          APKModule innerConstituentModule = linkableToModuleMap.get(constituent);\n          sb.append(innerConstituent).append(\" -> \").append(innerConstituentModule).append(\", \");\n        }\n        throw new RuntimeException(\n            \"Native library merge of \"\n                + linkable\n                + \" has inconsistent application module mappings: \"\n                + sb);\n      }\n    }\n    return Preconditions.checkNotNull(module);\n  }\n", "line_num": 15, "charoffset": 45, "length": 36, "error": "linkableToModuleMap.get(constituent)", "repair": "linkableToModuleMap.get(innerConstituent)", "task_id": 306, "predictions": [{"buggy": true, "line_num": 12, "prob": 0.973366369908386}, {"buggy": false, "line_num": -1, "prob": 0.0048287826750835865}, {"buggy": true, "line_num": 25, "prob": 7.018574101820122e-05}, {"buggy": true, "line_num": 20, "prob": 7.957087025680905e-10}, {"buggy": true, "line_num": 6, "prob": 1.2807527163426474e-15}, {"buggy": true, "line_num": 14, "prob": 1.6051488583086982e-16}, {"buggy": true, "line_num": 4, "prob": 2.1809265371650566e-17}, {"buggy": true, "line_num": 9, "prob": 2.369340484725311e-19}]}
{"project": "stanfordnlp.CoreNLP", "commit": "b9c41e9ff3fc13529a73bd488d9e9d86b33d0871", "file_path": "src/edu/stanford/nlp/pipeline/StanfordCoreNLP.java", "func_code": "  private static void registerCustomAnnotators(\n      AnnotatorPool pool, AnnotatorImplementations annotatorImplementation, Properties inputProps) {\n    // add annotators loaded via reflection from class names specified\n    // in the properties\n    for (String property : inputProps.stringPropertyNames()) {\n      if (property.startsWith(CUSTOM_ANNOTATOR_PREFIX)) {\n        final String customName = property.substring(CUSTOM_ANNOTATOR_PREFIX.length());\n        final String customClassName = inputProps.getProperty(property);\n        logger.info(\"Registering annotator \" + customName + \" with class \" + customClassName);\n        pool.register(\n            customName,\n            inputProps,\n            Lazy.of(() -> annotatorImplementation.custom(inputProps, property)));\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 514, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9606680262384133}, {"buggy": true, "line_num": 12, "prob": 4.217717270148439e-09}, {"buggy": false, "line_num": -1, "prob": 4.268534984579167e-12}, {"buggy": true, "line_num": 4, "prob": 5.64090378468715e-17}, {"buggy": true, "line_num": 7, "prob": 2.7175774791693e-22}, {"buggy": true, "line_num": 6, "prob": 2.5521780174689223e-22}, {"buggy": true, "line_num": 8, "prob": 5.2481656583204667e-23}]}
{"project": "grails.grails-core", "commit": "96802a09b44c1ccf3372b84ebe5c060a76849414", "file_path": "grails-web-sitemesh/src/main/groovy/org/codehaus/groovy/grails/web/sitemesh/GrailsLayoutView.java", "func_code": "  protected void renderTemplate(\n      Map<String, Object> model,\n      GrailsWebRequest webRequest,\n      HttpServletRequest request,\n      HttpServletResponse response)\n      throws Exception {\n    Content content = obtainContent(model, webRequest, request, response);\n    if (content != null) {\n      beforeDecorating(content, model, webRequest, request, response);\n      SpringMVCViewDecorator decorator =\n          (SpringMVCViewDecorator) groovyPageLayoutFinder.findLayout(request, content);\n      if (decorator != null) {\n        decorator.render(content, model, request, response, webRequest.getServletContext());\n      } else {\n        PrintWriter writer = response.getWriter();\n        content.writeOriginal(writer);\n        if (!response.isCommitted()) {\n          writer.flush();\n        }\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 345, "predictions": [{"buggy": true, "line_num": 8, "prob": 0.9828740420007391}, {"buggy": true, "line_num": 10, "prob": 0.0008236627299429213}, {"buggy": true, "line_num": 15, "prob": 2.5006458684865803e-05}, {"buggy": false, "line_num": -1, "prob": 1.885320191374894e-12}, {"buggy": true, "line_num": 14, "prob": 3.375629584971681e-14}, {"buggy": true, "line_num": 16, "prob": 2.465992835929731e-17}]}
{"project": "CymChad.BaseRecyclerViewAdapterHelper", "commit": "87ca06f73c1d1516dfc1a0d8f7cab5eb29522e77", "file_path": "library/src/main/java/com/chad/library/adapter/base/BaseQuickAdapter.java", "func_code": "  private int recursiveCollapse(@IntRange(from = 0) int position) {\n    T item = getItem(position);\n    if (!isExpandable(item)) {\n      return 0;\n    }\n    IExpandable expandable = (IExpandable) item;\n    int subItemCount = 0;\n    if (expandable.isExpanded()) {\n      List<T> subItems = expandable.getSubItems();\n      for (int i = subItems.size() - 1; i >= 0; i--) {\n        T subItem = subItems.get(i);\n        int pos = getItemPosition(subItem);\n        if (pos < 0) {\n          continue;\n        }\n        if (subItem instanceof IExpandable) {\n          subItemCount += recursiveCollapse(pos);\n        }\n        mData.remove(subItem);\n        subItemCount++;\n      }\n    }\n    return subItemCount;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 17, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6519390119099755}, {"buggy": true, "line_num": 15, "prob": 4.729964480057406e-06}, {"buggy": true, "line_num": 16, "prob": 3.6083360503899326e-08}, {"buggy": true, "line_num": 5, "prob": 1.0475191035416905e-08}, {"buggy": true, "line_num": 18, "prob": 3.4148802229056056e-10}, {"buggy": true, "line_num": 11, "prob": 1.567844808915509e-10}, {"buggy": true, "line_num": 10, "prob": 2.4396705126067536e-11}, {"buggy": true, "line_num": 22, "prob": 6.223690351241008e-12}, {"buggy": true, "line_num": 2, "prob": 5.674727618715704e-12}]}
{"project": "JetBrains.kotlin", "commit": "5abbf3562b6036742fc3c9af9a2e4f665a4a9264", "file_path": "compiler/backend/src/org/jetbrains/kotlin/codegen/StackValue.java", "func_code": "  public static void unboxInlineClass(\n      @NotNull Type type,\n      @NotNull KotlinType targetInlineClassType,\n      @NotNull InstructionAdapter v) {\n    Type owner = KotlinTypeMapper.mapInlineClassTypeAsDeclaration(targetInlineClassType);\n\n    coerce(type, owner, v);\n\n    Type resultType = KotlinTypeMapper.mapUnderlyingTypeOfInlineClassType(targetInlineClassType);\n\n    if (TypeUtils.isNullableType(targetInlineClassType) && !isPrimitive(type)) {\n      boxOrUnboxWithNullCheck(v, vv -> invokeUnboxMethod(vv, owner, resultType));\n    } else {\n      invokeUnboxMethod(v, owner, resultType);\n    }\n  }\n", "line_num": 10, "charoffset": 64, "length": 17, "error": "isPrimitive(type)", "repair": "isPrimitive(resultType)", "task_id": 90, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7781745255290545}, {"buggy": true, "line_num": 11, "prob": 0.05402310011369516}, {"buggy": true, "line_num": 13, "prob": 0.007920286617961406}, {"buggy": true, "line_num": 6, "prob": 0.002908058607633315}, {"buggy": true, "line_num": 10, "prob": 8.50315591894328e-07}, {"buggy": true, "line_num": 8, "prob": 6.812693998877995e-10}, {"buggy": true, "line_num": 4, "prob": 3.579790970596004e-12}]}
{"project": "apache.storm", "commit": "72d409c6065de1209ad00289f147b0f65accef16", "file_path": "storm-core/src/jvm/org/apache/storm/scheduler/DefaultScheduler.java", "func_code": "  private static Set<WorkerSlot> badSlots(\n      Map<WorkerSlot, List<ExecutorDetails>> existingSlots, int numExecutors, int numWorkers) {\n    if (numWorkers != 0) {\n      Map<Integer, Integer> distribution = Utils.integerDivided(numExecutors, numWorkers);\n      Set<WorkerSlot> slots = new HashSet<WorkerSlot>();\n\n      for (Entry<WorkerSlot, List<ExecutorDetails>> entry : existingSlots.entrySet()) {\n        Integer executorCount = entry.getValue().size();\n        Integer workerCount = distribution.get(executorCount);\n        if (workerCount != null && workerCount > 0) {\n          slots.add(entry.getKey());\n          workerCount--;\n          distribution.put(executorCount, workerCount);\n        }\n      }\n\n      for (WorkerSlot slot : slots) {\n        existingSlots.remove(slot);\n      }\n\n      return existingSlots.keySet();\n    }\n\n    return null;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 228, "predictions": [{"buggy": true, "line_num": 20, "prob": 0.49629467546839756}, {"buggy": false, "line_num": -1, "prob": 0.49018970672342177}, {"buggy": true, "line_num": 2, "prob": 0.012302115643445173}, {"buggy": true, "line_num": 12, "prob": 0.0006379067779657163}, {"buggy": true, "line_num": 17, "prob": 5.192593058889743e-09}, {"buggy": true, "line_num": 11, "prob": 4.869699468095636e-12}, {"buggy": true, "line_num": 10, "prob": 2.2442804475569707e-13}, {"buggy": true, "line_num": 6, "prob": 2.0671100641205872e-13}, {"buggy": true, "line_num": 8, "prob": 1.5339293788213063e-13}, {"buggy": true, "line_num": 3, "prob": 3.609612260576889e-14}]}
{"project": "eclipse.che", "commit": "c22d49922856a8ea5be23441e2978ea55d942e6b", "file_path": "infrastructures/openshift/src/main/java/org/eclipse/che/workspace/infrastructure/openshift/OpenShiftInfrastructure.java", "func_code": "  public RuntimeContext prepare(RuntimeIdentity id, Environment originEnv)\n      throws ValidationException, InfrastructureException {\n    final EnvironmentImpl environment = new EnvironmentImpl(originEnv);\n    final OpenShiftEnvironment openShiftEnvironment = envParser.parse(environment);\n\n    infrastructureProvisioner.provision(environment, openShiftEnvironment, id);\n\n    return runtimeContextFactory.create(environment, openShiftEnvironment, id, this);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 284, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.476671986986203}, {"buggy": true, "line_num": 5, "prob": 2.1772885179431507e-05}, {"buggy": true, "line_num": 7, "prob": 9.864609214149217e-08}, {"buggy": true, "line_num": 3, "prob": 1.2392836190459542e-10}, {"buggy": true, "line_num": 2, "prob": 5.096842154358275e-13}, {"buggy": true, "line_num": 1, "prob": 2.2711078190569202e-13}]}
{"project": "ReactiveX.RxJava", "commit": "c57049c727506a578cd2d08bbf5b502dbdc007c1", "file_path": "rxjava-core/src/test/java/rx/subscriptions/CompositeSubscriptionTest.java", "func_code": "  public void testClear() {\n    BooleanSubscription s1 = new BooleanSubscription();\n    BooleanSubscription s2 = new BooleanSubscription();\n\n    CompositeSubscription s = new CompositeSubscription();\n    s.add(s1);\n    s.add(s2);\n\n    assertFalse(s1.isUnsubscribed());\n    assertFalse(s2.isUnsubscribed());\n\n    s.clear();\n\n    assertTrue(s1.isUnsubscribed());\n    assertTrue(s2.isUnsubscribed());\n    assertFalse(s.isUnsubscribed());\n\n    BooleanSubscription s3 = new BooleanSubscription();\n\n    s.add(s3);\n    s.unsubscribe();\n\n    assertTrue(s3.isUnsubscribed());\n    assertTrue(s.isUnsubscribed());\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 113, "predictions": [{"buggy": true, "line_num": 15, "prob": 0.9999992847445185}, {"buggy": true, "line_num": 19, "prob": 3.541496961991593e-07}, {"buggy": false, "line_num": -1, "prob": 7.911063519950964e-11}, {"buggy": true, "line_num": 6, "prob": 6.731268314934059e-14}, {"buggy": true, "line_num": 22, "prob": 3.61004602834542e-14}, {"buggy": true, "line_num": 23, "prob": 2.8031361046212753e-15}, {"buggy": true, "line_num": 9, "prob": 2.727407678249228e-18}, {"buggy": true, "line_num": 2, "prob": 2.6495616804692747e-18}, {"buggy": true, "line_num": 20, "prob": 2.1281219237018785e-18}]}
{"project": "Atmosphere.atmosphere", "commit": "e978b63812235df130f7598de0a9a22b85589c32", "file_path": "modules/cpr/src/main/java/org/atmosphere/cpr/DefaultAsyncSupportResolver.java", "func_code": "  public AsyncSupport resolve(\n      boolean useNativeIfPossible, boolean defaultToBlocking, boolean useServlet30Async) {\n    AsyncSupport cs = null;\n\n    // Validate the value for old Servlet Container.\n    useServlet30Async = testClassExists(SERVLET_30);\n\n    if (!defaultToBlocking) {\n      List<Class<? extends AsyncSupport>> l =\n          detectWebSocketPresent(useNativeIfPossible, useServlet30Async);\n\n      if (!l.isEmpty()) {\n        cs = resolveWebSocket(l);\n      }\n    }\n\n    if (cs == null) {\n      AsyncSupport nativeSupport = resolveNativeCometSupport(detectContainersPresent());\n      return nativeSupport == null ? defaultCometSupport(defaultToBlocking) : nativeSupport;\n    } else {\n      return cs;\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 10, "predictions": [{"buggy": true, "line_num": 18, "prob": 0.8485687937992267}, {"buggy": false, "line_num": -1, "prob": 1.8624194031512265e-10}, {"buggy": true, "line_num": 7, "prob": 1.5531434531129583e-15}, {"buggy": true, "line_num": 5, "prob": 1.780859832393035e-20}, {"buggy": true, "line_num": 12, "prob": 1.1403818531842883e-22}]}
{"project": "JetBrains.intellij-community", "commit": "c46e9238b3a1516b53135855237dc613bdafb9c5", "file_path": "plugins/groovy/src/org/jetbrains/plugins/groovy/compiler/generator/GroovycStubGenerator.java", "func_code": "  private void cleanDirectory(final VirtualFile dir) {\n    new WriteCommandAction(myProject) {\n      protected void run(Result result) throws Throwable {\n        deleteChildrenRecursively(dir);\n      }\n\n      private void deleteChildrenRecursively(final VirtualFile dir) throws IOException {\n        for (final VirtualFile child : dir.getChildren()) {\n          if (child.isDirectory()) {\n            deleteChildrenRecursively(child);\n          }\n          TranslatingCompilerFilesMonitor.removeSourceInfo(child);\n          child.delete(this);\n        }\n      }\n    }.execute();\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 74, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9991344534235901}, {"buggy": true, "line_num": 9, "prob": 9.787068116419794e-06}, {"buggy": true, "line_num": 8, "prob": 2.8702449976276304e-06}, {"buggy": true, "line_num": 11, "prob": 2.2635044155550013e-10}, {"buggy": true, "line_num": 12, "prob": 1.1077187012754518e-11}, {"buggy": true, "line_num": 3, "prob": 4.692530229653109e-13}, {"buggy": true, "line_num": 7, "prob": 2.7759069601363764e-14}, {"buggy": true, "line_num": 2, "prob": 2.5482626961703157e-18}, {"buggy": true, "line_num": 1, "prob": 1.6351396394536162e-18}]}
{"project": "libgdx.libgdx", "commit": "fcda34896499d9f0c29ea5f000aee28854bdbfe2", "file_path": "gdx/src/com/badlogic/gdx/math/Vector3.java", "func_code": "  public float dst(final Vector3 vector) {\r\n    final float a = vector.x - x;\r\n    final float b = vector.y - y;\r\n    final float c = vector.z - z;\r\n\r\n    return (float) Math.sqrt(a * a + b * b + c * c);\r\n  }\r\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 389, "predictions": [{"buggy": true, "line_num": 1, "prob": 0.9957505462606687}, {"buggy": false, "line_num": -1, "prob": 2.9529096570460964e-10}, {"buggy": true, "line_num": 5, "prob": 1.836533383285181e-11}, {"buggy": true, "line_num": 2, "prob": 2.8387832329847592e-14}, {"buggy": true, "line_num": 3, "prob": 2.489180347140099e-14}]}
{"project": "JetBrains.intellij-community", "commit": "99156fefe9f21dcd3b8eb2c400d55b6120e7e0c6", "file_path": "java/compiler/impl/src/com/intellij/compiler/backwardRefs/CompilerReferenceReader.java", "func_code": "  Map<VirtualFile, Object[]> getDirectInheritors(\n      @NotNull LightRef searchElement,\n      @NotNull GlobalSearchScope searchScope,\n      @NotNull GlobalSearchScope dirtyScope,\n      @NotNull FileType fileType,\n      @NotNull CompilerHierarchySearchType searchType)\n      throws StorageException {\n    GlobalSearchScope effectiveSearchScope =\n        GlobalSearchScope.notScope(dirtyScope).intersectWith(searchScope);\n    LanguageLightRefAdapter adapter = CompilerReferenceServiceImpl.findAdapterForFileType(fileType);\n    LOG.assertTrue(adapter != null, \"adapter is null for file type: \" + fileType);\n    Class<? extends LightRef> requiredLightRefClass = searchType.getRequiredClass(adapter);\n\n    Map<VirtualFile, Object[]> candidatesPerFile = new HashMap<>();\n    myIndex\n        .get(CompilerIndices.BACK_HIERARCHY)\n        .getData(searchElement)\n        .forEach(\n            (fileId, defs) -> {\n              final List<LightRef> requiredCandidates =\n                  defs.stream().filter(requiredLightRefClass::isInstance).collect(toList());\n              if (requiredCandidates.isEmpty()) return true;\n              final VirtualFile file = findFile(fileId);\n              if (file != null && effectiveSearchScope.contains(file)) {\n                candidatesPerFile.put(\n                    file, searchType.convertToIds(requiredCandidates, myIndex.getByteSeqEum()));\n              }\n              return true;\n            });\n    return candidatesPerFile.isEmpty() ? Collections.emptyMap() : candidatesPerFile;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 40, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9676743131624559}, {"buggy": true, "line_num": 10, "prob": 0.03186518072068359}, {"buggy": false, "line_num": -1, "prob": 0.00017321311309288377}, {"buggy": true, "line_num": 25, "prob": 2.2945713703444558e-10}]}
{"project": "osmandapp.Osmand", "commit": "e6bb14dba13ac0d07ada229f940399c3d48218fa", "file_path": "OsmAnd/src/net/osmand/plus/activities/MapActivity.java", "func_code": "  public static net.osmand.Location convertLocation(Location l, OsmandApplication app) {\n    net.osmand.Location r = new net.osmand.Location(l.getProvider());\n    r.setLatitude(l.getLatitude());\n    r.setLongitude(l.getLongitude());\n    r.setTime(l.getTime());\n    if (l.hasAccuracy()) {\n      r.setAccuracy(l.getAccuracy());\n    }\n    if (l.hasSpeed()) {\n      r.setSpeed(l.getSpeed());\n    }\n    if (l.hasAltitude()) {\n      r.setAltitude(l.getAltitude());\n    }\n    if (l.hasBearing()) {\n      r.setBearing(l.getBearing());\n    }\n    if (l.hasAltitude() && app != null) {\n      double alt = l.getAltitude();\n      final GeoidAltitudeCorrection geo = app.getResourceManager().getGeoidAltitudeCorrection();\n      if (geo != null) {\n        alt -= geo.getGeoidHeight(l.getLatitude(), l.getLongitude());\n        r.setAltitude(alt);\n      }\n    }\n    return r;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 477, "predictions": [{"buggy": true, "line_num": 21, "prob": 0.9922417856873992}, {"buggy": false, "line_num": -1, "prob": 0.004750875939926016}, {"buggy": true, "line_num": 9, "prob": 1.6894190081260673e-09}, {"buggy": true, "line_num": 4, "prob": 2.6098220697314716e-11}, {"buggy": true, "line_num": 19, "prob": 1.0060973588745201e-11}, {"buggy": true, "line_num": 6, "prob": 7.033608451457501e-13}, {"buggy": true, "line_num": 12, "prob": 3.7674699637141293e-13}, {"buggy": true, "line_num": 17, "prob": 1.0477142571923759e-13}]}
{"project": "apache.cxf", "commit": "7d860bbdebf8294b48d2c7c59015a83f4a392de6", "file_path": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/client/AbstractClient.java", "func_code": "  protected <T> void writeBody(\n      T o,\n      Message outMessage,\n      Class<?> cls,\n      Type type,\n      Annotation[] anns,\n      MultivaluedMap<String, Object> headers,\n      OutputStream os) {\n\n    if (o == null) {\n      return;\n    }\n    @SuppressWarnings(\"unchecked\")\n    Class<T> theClass = (Class<T>) cls;\n\n    MediaType contentType = MediaType.valueOf(headers.getFirst(\"Content-Type\").toString());\n\n    MessageBodyWriter<T> mbw =\n        ProviderFactory.getInstance(outMessage)\n            .createMessageBodyWriter(theClass, type, anns, contentType, outMessage);\n    if (mbw != null) {\n      try {\n        mbw.writeTo(o, cls, type, anns, contentType, headers, os);\n        if (os != null) {\n          os.flush();\n        }\n      } catch (Exception ex) {\n        reportMessageHandlerProblem(\"MSG_WRITER_PROBLEM\", cls, contentType, ex, null);\n      }\n    } else {\n      reportMessageHandlerProblem(\"NO_MSG_WRITER\", cls, contentType, null, null);\n    }\n  }\n", "line_num": 22, "charoffset": 16, "length": 57, "error": "mbw.writeTo(o,cls,type,anns,contentType,headers,os)", "repair": "mbw.writeTo(o,theClass,type,anns,contentType,headers,os)", "task_id": 186, "predictions": [{"buggy": true, "line_num": 15, "prob": 0.9942797449462016}, {"buggy": true, "line_num": 27, "prob": 4.198366398311321e-07}, {"buggy": false, "line_num": -1, "prob": 1.8512474877595547e-08}, {"buggy": true, "line_num": 22, "prob": 1.1023966925864401e-11}]}
{"project": "liferay.liferay-portal", "commit": "65dbcf32cd02992f7770c8aae7456e018be8bafc", "file_path": "portal-impl/src/com/liferay/portal/service/impl/LayoutLocalServiceImpl.java", "func_code": "  public Map<Long, List<Layout>> getLayoutChildLayouts(\n      LayoutSet layoutSet, List<Layout> parentLayouts) {\n\n    List<Layout> childLayouts =\n        _getChildLayouts(layoutSet, ListUtil.toLongArray(parentLayouts, Layout::getLayoutId));\n\n    Map<Long, List<Layout>> layoutChildLayouts = new HashMap<>();\n\n    for (Layout childLayout : childLayouts) {\n      List<Layout> layoutChildLayoutsList =\n          layoutChildLayouts.computeIfAbsent(\n              childLayout.getParentLayoutId(), (parentLayoutId) -> new ArrayList<>());\n\n      layoutChildLayoutsList.add(childLayout);\n    }\n\n    for (List<Layout> layoutChildLayoutsList : layoutChildLayouts.values()) {\n\n      layoutChildLayoutsList.sort(Comparator.comparing(Layout::getPriority));\n    }\n\n    return layoutChildLayouts;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 398, "predictions": [{"buggy": true, "line_num": 21, "prob": 0.99475267653985}, {"buggy": false, "line_num": -1, "prob": 0.0042895666840614775}, {"buggy": true, "line_num": 13, "prob": 3.204086187125497e-11}, {"buggy": true, "line_num": 10, "prob": 9.329874467897299e-14}, {"buggy": true, "line_num": 16, "prob": 2.3892006030084925e-14}, {"buggy": true, "line_num": 11, "prob": 3.2139094565793026e-15}, {"buggy": true, "line_num": 6, "prob": 1.0780741298523e-15}, {"buggy": true, "line_num": 4, "prob": 7.301268074174948e-16}]}
{"project": "apache.tomcat", "commit": "94df67a429ebc6848ef2aa2bee3e4bb367a113ed", "file_path": "java/org/apache/catalina/realm/UserDatabaseRealm.java", "func_code": "  protected Principal getPrincipal(String username) {\n\n    User user = database.findUser(username);\n    if (user == null) {\n      return null;\n    }\n\n    List roles = new ArrayList();\n    Iterator uroles = user.getRoles();\n    while (uroles.hasNext()) {\n      Role role = (Role) uroles.next();\n      roles.add(role.getName());\n    }\n    Iterator groups = user.getGroups();\n    while (groups.hasNext()) {\n      Group group = (Group) groups.next();\n      uroles = group.getRoles();\n      while (uroles.hasNext()) {\n        Role role = (Role) uroles.next();\n        roles.add(role.getName());\n      }\n    }\n    return new GenericPrincipal(this, username, user.getPassword(), roles, user);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 241, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9968106171841835}, {"buggy": true, "line_num": 22, "prob": 0.0003465331205505308}, {"buggy": true, "line_num": 2, "prob": 2.4655676782116944e-11}, {"buggy": true, "line_num": 15, "prob": 2.4205971229338203e-11}, {"buggy": true, "line_num": 9, "prob": 8.755742541799921e-12}]}
{"project": "h6ah4i.android-advancedrecyclerview", "commit": "7cf7808cf67f1f057ef05820f1a728129aac61be", "file_path": "example/src/main/java/com/h6ah4i/android/example/advrecyclerview/common/utils/AdapterUtils.java", "func_code": "  public static View findParentViewHolderItemView(View v) {\n    final ViewParent parent = v.getParent();\n    if (parent instanceof RecyclerView) {\n      // returns the passed instance if the parent is RecyclerView\n      return v;\n    } else if (parent instanceof View) {\n      // check the parent view recursively\n      return findParentViewHolderItemView((View) parent);\n    } else {\n      return null;\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 352, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9992934465564884}, {"buggy": true, "line_num": 2, "prob": 1.2355403826248718e-10}, {"buggy": true, "line_num": 4, "prob": 4.442523215021806e-11}, {"buggy": true, "line_num": 7, "prob": 1.6610559834878025e-12}, {"buggy": true, "line_num": 5, "prob": 4.270609420615593e-13}, {"buggy": true, "line_num": 1, "prob": 5.025712872195246e-14}]}
{"project": "wildfly.wildfly", "commit": "0ffe574925f8ef6918802c4568ff406a7b4e2126", "file_path": "controller/src/main/java/org/jboss/as/controller/services/path/PathManagerService.java", "func_code": "  public final String resolveRelativePathEntry(String path, String relativeTo) {\n    if (relativeTo == null) {\n      return AbsolutePathService.convertPath(path);\n    } else {\n      PathEntry pathEntry;\n      synchronized (pathEntries) {\n        pathEntry = pathEntries.get(relativeTo);\n        if (pathEntry == null) {\n          throw MESSAGES.pathEntryNotFound(path);\n        }\n        return RelativePathService.doResolve(pathEntry.resolvePath(), path);\n      }\n    }\n  }\n", "line_num": 8, "charoffset": 26, "length": 32, "error": "MESSAGES.pathEntryNotFound(path)", "repair": "MESSAGES.pathEntryNotFound(relativeTo)", "task_id": 532, "predictions": [{"buggy": true, "line_num": 10, "prob": 0.9999380149532311}, {"buggy": false, "line_num": -1, "prob": 5.2677246943776683e-05}, {"buggy": true, "line_num": 8, "prob": 9.931952031056297e-08}, {"buggy": true, "line_num": 2, "prob": 7.529351160887402e-14}, {"buggy": true, "line_num": 1, "prob": 4.249213813431978e-14}, {"buggy": true, "line_num": 4, "prob": 5.253793011155658e-16}, {"buggy": true, "line_num": 6, "prob": 1.0374814134520475e-16}, {"buggy": true, "line_num": 5, "prob": 2.51586793034631e-17}]}
{"project": "aosp-mirror.platform_frameworks_base", "commit": "b2aea203cf911527664437f9dd3f1d56ce87ae6a", "file_path": "tests/Camera2Tests/SmartCamera/SimpleCamera/src/androidx/media/filterfw/FrameManager.java", "func_code": "  public void removeFrameSlot(String name) {\n    assertNotRunning();\n    FrameSlot slot = getSlot(name);\n    slot.releaseFrame();\n    mFrameSlots.remove(slot);\n  }\n", "line_num": 4, "charoffset": 8, "length": 24, "error": "mFrameSlots.remove(slot)", "repair": "mFrameSlots.remove(name)", "task_id": 133, "predictions": [{"buggy": true, "line_num": 4, "prob": 0.9999997615814777}, {"buggy": false, "line_num": -1, "prob": 2.103759599766777e-07}, {"buggy": true, "line_num": 2, "prob": 2.2867652428260177e-20}]}
{"project": "spring-cloud.spring-cloud-netflix", "commit": "d3314447a837267f61ddb5eca0a78c28974a08a8", "file_path": "spring-cloud-netflix-core/src/main/java/org/springframework/cloud/netflix/zuul/filters/SimpleRouteLocator.java", "func_code": "  private String adjustPath(final String path) {\n    String adjustedPath = path;\n\n    if (RequestUtils.isDispatcherServletRequest()\n        && StringUtils.hasText(this.dispatcherServletPath)) {\n      if (!this.dispatcherServletPath.equals(\"/\")) {\n        adjustedPath = path.substring(this.dispatcherServletPath.length());\n        log.debug(\"Stripped dispatcherServletPath\");\n      }\n    } else if (RequestUtils.isZuulServletRequest()) {\n      if (StringUtils.hasText(this.zuulServletPath) && !this.zuulServletPath.equals(\"/\")) {\n        adjustedPath = path.substring(this.zuulServletPath.length());\n        log.debug(\"Stripped zuulServletPath\");\n      }\n    } else {\n      // do nothing\n    }\n\n    log.debug(\"adjustedPath=\" + path);\n    return adjustedPath;\n  }\n", "line_num": 18, "charoffset": 12, "length": 22, "error": "\"adjustedPath=\" + path", "repair": "\"adjustedPath=\" + adjustedPath", "task_id": 504, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9180188323591439}, {"buggy": true, "line_num": 11, "prob": 0.051477280540375245}, {"buggy": true, "line_num": 6, "prob": 0.030347283096925345}, {"buggy": true, "line_num": 10, "prob": 1.5771742791942e-08}, {"buggy": true, "line_num": 18, "prob": 2.811958952266749e-09}, {"buggy": true, "line_num": 5, "prob": 6.859270306125289e-13}, {"buggy": true, "line_num": 1, "prob": 4.1711159618548946e-13}, {"buggy": true, "line_num": 4, "prob": 4.164438463781561e-13}]}
{"project": "apache.tomcat", "commit": "ef978de304d03668dbac52e5e57ed9f12319d011", "file_path": "java/org/apache/catalina/tribes/group/interceptors/EncryptInterceptor.java", "func_code": "  private static String getAlgorithmMode(String algorithm) {\n    int start = algorithm.indexOf('/');\n    if (start < 0)\n      throw new IllegalArgumentException(sm.getString(\"encryptInterceptor.algorithm.required\"));\n    int end = algorithm.indexOf('/', start + 1);\n    if (start < 0)\n      throw new IllegalArgumentException(sm.getString(\"encryptInterceptor.algorithm.required\"));\n\n    return algorithm.substring(start + 1, end);\n  }\n", "line_num": 5, "charoffset": 11, "length": 9, "error": "start < 0", "repair": "end < 0", "task_id": 230, "predictions": [{"buggy": true, "line_num": 5, "prob": 0.9991890812934936}, {"buggy": false, "line_num": -1, "prob": 0.0008101965537977982}, {"buggy": true, "line_num": 3, "prob": 5.794995808263662e-14}, {"buggy": true, "line_num": 4, "prob": 7.768991625773763e-15}, {"buggy": true, "line_num": 6, "prob": 1.2340299353397382e-15}, {"buggy": true, "line_num": 8, "prob": 1.1909590517005675e-15}, {"buggy": true, "line_num": 1, "prob": 9.549786574470844e-16}, {"buggy": true, "line_num": 2, "prob": 4.2761780793388246e-16}]}
{"project": "apache.lucene-solr", "commit": "ff47493dbdad056c9487633767d6129d2f994395", "file_path": "modules/analysis/common/src/java/org/apache/lucene/analysis/id/IndonesianAnalyzer.java", "func_code": "  protected TokenStreamComponents createComponents(String fieldName, Reader reader) {\n    final Tokenizer source = new StandardTokenizer(matchVersion, reader);\n    TokenStream result = new StandardFilter(matchVersion, source);\n    result = new LowerCaseFilter(matchVersion, result);\n    result = new StopFilter(matchVersion, result, stopwords);\n    if (!stemExclusionSet.isEmpty()) {\n      result = new KeywordMarkerFilter(result, stemExclusionSet);\n    }\n    return new TokenStreamComponents(source, new IndonesianStemFilter(result));\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 216, "predictions": [{"buggy": true, "line_num": 6, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 4.6685363874874845e-08}, {"buggy": true, "line_num": 1, "prob": 1.6144457316352847e-09}, {"buggy": true, "line_num": 3, "prob": 2.1097574758471772e-14}, {"buggy": true, "line_num": 8, "prob": 5.859867133098901e-16}, {"buggy": true, "line_num": 2, "prob": 2.212584348993147e-18}, {"buggy": true, "line_num": 4, "prob": 9.817497034068931e-19}, {"buggy": true, "line_num": 5, "prob": 9.719864699077706e-19}]}
{"project": "wordpress-mobile.WordPress-Android", "commit": "e28a54bb77a29f8f4a1fa51df5fde0ba0b6d35d8", "file_path": "src/org/wordpress/android/util/WPStatsTrackerMixpanel.java", "func_code": "  public void track(WPStats.Stat stat, JSONObject properties) {\n    WPStatsTrackerMixpanelInstructionsForStat instructions = instructionsForStat(stat);\n\n    if (instructions == null) return;\n\n    trackMixpanelDataForInstructions(instructions, properties);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 539, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.8753185898109919}, {"buggy": true, "line_num": 5, "prob": 7.491555069982941e-12}, {"buggy": true, "line_num": 1, "prob": 2.0056998249962827e-12}, {"buggy": true, "line_num": 3, "prob": 6.486254426810941e-13}]}
{"project": "signalapp.Signal-Android", "commit": "3d7331159fa43056df1d51bf8f668e0a154b6c1c", "file_path": "src/org/thoughtcrime/securesms/ApplicationPreferencesActivity.java", "func_code": "  private void tintIcons(Context context) {\n    Drawable sms =\n        DrawableCompat.wrap(ContextCompat.getDrawable(context, R.drawable.ic_textsms_white_24dp));\n    Drawable notifications =\n        DrawableCompat.wrap(\n            ContextCompat.getDrawable(context, R.drawable.ic_notifications_white_24dp));\n    Drawable privacy =\n        DrawableCompat.wrap(ContextCompat.getDrawable(context, R.drawable.ic_security_white_24dp));\n    Drawable appearance =\n        DrawableCompat.wrap(\n            ContextCompat.getDrawable(context, R.drawable.ic_brightness_6_white_24dp));\n    Drawable chats =\n        DrawableCompat.wrap(ContextCompat.getDrawable(context, R.drawable.ic_forum_white_24dp));\n    Drawable devices =\n        DrawableCompat.wrap(ContextCompat.getDrawable(context, R.drawable.ic_laptop_white_24dp));\n    Drawable advanced =\n        DrawableCompat.wrap(ContextCompat.getDrawable(context, R.drawable.ic_advanced_white_24dp));\n\n    int[] tintAttr = new int[] {R.attr.pref_icon_tint};\n    TypedArray typedArray = context.obtainStyledAttributes(tintAttr);\n    int color = typedArray.getColor(0, 0x0);\n    typedArray.recycle();\n\n    DrawableCompat.setTint(sms, color);\n    DrawableCompat.setTint(notifications, color);\n    DrawableCompat.setTint(privacy, color);\n    DrawableCompat.setTint(appearance, color);\n    DrawableCompat.setTint(chats, color);\n    DrawableCompat.setTint(devices, color);\n    DrawableCompat.setTint(advanced, color);\n\n    this.findPreference(PREFERENCE_CATEGORY_SMS_MMS).setIcon(sms);\n    this.findPreference(PREFERENCE_CATEGORY_NOTIFICATIONS).setIcon(notifications);\n    this.findPreference(PREFERENCE_CATEGORY_APP_PROTECTION).setIcon(privacy);\n    this.findPreference(PREFERENCE_CATEGORY_APPEARANCE).setIcon(appearance);\n    this.findPreference(PREFERENCE_CATEGORY_CHATS).setIcon(chats);\n    this.findPreference(PREFERENCE_CATEGORY_DEVICES).setIcon(devices);\n    this.findPreference(PREFERENCE_CATEGORY_ADVANCED).setIcon(advanced);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 548, "predictions": [{"buggy": true, "line_num": 24, "prob": 0.8133973826788541}, {"buggy": true, "line_num": 23, "prob": 0.13444758888229577}, {"buggy": false, "line_num": -1, "prob": 0.04207355366700645}, {"buggy": true, "line_num": 26, "prob": 0.002415400057441117}, {"buggy": true, "line_num": 19, "prob": 0.00108556675213294}, {"buggy": true, "line_num": 28, "prob": 2.78669643389703e-07}]}
{"project": "reactor.reactor-core", "commit": "5ca55d3b95a87f7bf2e399243fa434b065b1840f", "file_path": "reactor-core/src/main/java/reactor/util/context/Context.java", "func_code": "  default <T> T get(Class<T> key) {\n    T v = get((Object) key);\n    if (key.isInstance(v)) {\n      return v;\n    }\n    return null;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 493, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999816418851707}, {"buggy": true, "line_num": 2, "prob": 6.200731258018614e-07}, {"buggy": true, "line_num": 3, "prob": 1.487617504643242e-13}]}
{"project": "spring-projects.spring-boot", "commit": "af39d558ff5ca71fad662cc1fc7bb2927640751c", "file_path": "spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/data/redis/RedisAutoConfiguration.java", "func_code": "  protected final RedisClusterConfiguration getClusterConfiguration() {\n    if (this.clusterConfiguration != null) {\n      return this.clusterConfiguration;\n    }\n    if (this.properties.getCluster() == null) {\n      return null;\n    }\n    Cluster clusterProperties = this.properties.getCluster();\n    RedisClusterConfiguration config = new RedisClusterConfiguration(clusterProperties.getNodes());\n\n    if (clusterProperties.getMaxRedirects() != null) {\n      config.setMaxRedirects(config.getMaxRedirects());\n    }\n    return config;\n  }\n", "line_num": 11, "charoffset": 27, "length": 24, "error": "config.getMaxRedirects()", "repair": "clusterProperties.getMaxRedirects()", "task_id": 508, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9999922514562126}, {"buggy": false, "line_num": -1, "prob": 9.360975475701953e-11}, {"buggy": true, "line_num": 13, "prob": 1.9515657433929579e-16}, {"buggy": true, "line_num": 4, "prob": 2.8070225327815688e-21}, {"buggy": true, "line_num": 7, "prob": 2.13735272692204e-21}, {"buggy": true, "line_num": 1, "prob": 3.358678499748315e-23}, {"buggy": true, "line_num": 10, "prob": 1.379224659637918e-23}, {"buggy": true, "line_num": 8, "prob": 4.542790214124895e-24}]}
{"project": "apache.camel", "commit": "d13af0e3717e7070b523a42ef437064372707f33", "file_path": "camel-core/src/main/java/org/apache/camel/management/ManagementStrategyFactory.java", "func_code": "  public ManagementStrategy create(CamelContext context, boolean disableJMX) {\n    ManagementStrategy answer = null;\n\n    if (disableJMX || Boolean.getBoolean(JmxSystemPropertyKeys.DISABLED)) {\n      log.info(\"JMX is disabled.\");\n    } else {\n      try {\n        ManagedManagementStrategy jmx =\n            new ManagedManagementStrategy(new DefaultManagementAgent(context));\n        // must start it to ensure JMX works and can load needed Spring JARs\n        ServiceHelper.startService(jmx);\n        // prefer to have it at first strategy\n        context.getLifecycleStrategies().add(0, new DefaultManagementLifecycleStrategy(context));\n        log.info(\"JMX enabled.\");\n      } catch (Exception e) {\n        answer = null;\n        log.warn(\"Cannot create JMX lifecycle strategy. Will fallback and disable JMX.\", e);\n      }\n    }\n\n    if (answer == null) {\n      answer = new DefaultManagementStrategy();\n    }\n    return answer;\n  }\n", "line_num": 10, "charoffset": 16, "length": 31, "error": "ServiceHelper.startService(jmx)", "repair": "ServiceHelper.startService(answer)", "task_id": 168, "predictions": [{"buggy": true, "line_num": 12, "prob": 0.9951197637711602}, {"buggy": false, "line_num": -1, "prob": 0.004045795846306214}, {"buggy": true, "line_num": 16, "prob": 3.7061618301535326e-09}, {"buggy": true, "line_num": 8, "prob": 2.4596162400166594e-15}, {"buggy": true, "line_num": 10, "prob": 1.1912862032990816e-15}]}
{"project": "JetBrains.intellij-community", "commit": "81e9437fa222d366a85ce47224260031c2baaf0f", "file_path": "plugins/groovy/src/org/jetbrains/plugins/groovy/intentions/conversions/ClassNameDiffersFromFileNamePredicate.java", "func_code": "  public boolean satisfiedBy(PsiElement element) {\n    final PsiElement parent = element.getParent();\n    if (!(parent instanceof GrTypeDefinition)) return false;\n    if (((GrTypeDefinition) parent).getNameIdentifierGroovy() != element) return false;\n\n    final String name = ((GrTypeDefinition) element).getName();\n    if (name == null || name.length() == 0) return false;\n    final PsiFile file = element.getContainingFile();\n    if (!(file instanceof GroovyFile)) return false;\n    if (!file.isPhysical()) return false;\n    if (name.equals(FileUtil.getNameWithoutExtension(file.getName()))) return false;\n    if (mySearchForClassInMultiClassFile) {\n      return ((GroovyFile) file).getClasses().length > 1;\n    } else {\n      return !((GroovyFile) file).isScript();\n    }\n  }\n", "line_num": 5, "charoffset": 25, "length": 25, "error": "(GrTypeDefinition)element", "repair": "(GrTypeDefinition)parent", "task_id": 60, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.5384343391800605}, {"buggy": true, "line_num": 3, "prob": 3.670937974100492e-08}, {"buggy": true, "line_num": 11, "prob": 9.99648853714362e-09}, {"buggy": true, "line_num": 7, "prob": 2.338441385153999e-09}, {"buggy": true, "line_num": 5, "prob": 1.7968719751450327e-09}, {"buggy": true, "line_num": 10, "prob": 2.986538240342297e-10}, {"buggy": true, "line_num": 9, "prob": 1.0431913764964071e-10}, {"buggy": true, "line_num": 8, "prob": 9.017381794499805e-11}, {"buggy": true, "line_num": 1, "prob": 2.7522489108650544e-12}, {"buggy": true, "line_num": 2, "prob": 1.6531732243384657e-12}, {"buggy": true, "line_num": 6, "prob": 1.5239247208313453e-12}]}
{"project": "javamelody.javamelody", "commit": "97ec0778512c095baa2d622e48d10a8f08dabfe2", "file_path": "javamelody-core/src/main/java/net/bull/javamelody/RequestToMethodMapper.java", "func_code": "  Object invokeAndReturn(HttpServletRequest httpRequest, T controller) throws IOException {\n    final String partParameter = HttpParameter.PART.getParameterFrom(httpRequest);\n    final HttpPart httpPart = HttpPart.getByName(partParameter);\n    final Method method = methodsByPart.get(httpPart);\n    if (method == null) {\n      throw new IllegalArgumentException(\"Unknown http part: \" + partParameter);\n    }\n    try {\n      // find parameters values\n      final Object[] parameterValues = getParameterValues(httpRequest, method);\n      // invoke the method (the \"endpoint\")\n      return method.invoke(controller, parameterValues);\n    } catch (final IllegalAccessException e) {\n      throw new IllegalStateException(e);\n    } catch (final InvocationTargetException e) {\n      final Throwable targetException = e.getTargetException();\n      if (targetException instanceof IOException) {\n        throw (IOException) targetException;\n      } else if (targetException instanceof RuntimeException) {\n        throw (RuntimeException) targetException;\n      } else if (targetException instanceof Error) {\n        throw (Error) targetException;\n      }\n      throw new IOException(e);\n    }\n  }\n", "line_num": 23, "charoffset": 9, "length": 18, "error": "new IOException(e)", "repair": "new IOException(targetException)", "task_id": 375, "predictions": [{"buggy": true, "line_num": 9, "prob": 0.9999995231630692}, {"buggy": true, "line_num": 23, "prob": 4.945455299454195e-07}, {"buggy": false, "line_num": -1, "prob": 1.373770188446545e-10}, {"buggy": true, "line_num": 11, "prob": 1.590026138695518e-12}, {"buggy": true, "line_num": 3, "prob": 3.1338188680776755e-18}, {"buggy": true, "line_num": 1, "prob": 1.5856714433698068e-19}, {"buggy": true, "line_num": 5, "prob": 4.44853154692115e-20}]}
{"project": "apache.mahout", "commit": "4d1b7231f462d8d4a7a61566c081e6b3bae53217", "file_path": "core/src/main/java/org/apache/mahout/utils/SquaredEuclideanDistanceMeasure.java", "func_code": "  public double distance(double centroidLengthSquare, Vector centroid, Vector v) {\n    if (centroid.size() != v.size()) {\n      throw new CardinalityException();\n    }\n\n    double result = centroidLengthSquare;\n    result += v.getDistanceSquared(centroid);\n    return result;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 219, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.6795346080548741}, {"buggy": true, "line_num": 1, "prob": 1.665689928844638e-06}, {"buggy": true, "line_num": 5, "prob": 1.0272327789201559e-08}, {"buggy": true, "line_num": 6, "prob": 7.307998396884002e-12}]}
{"project": "apache.groovy", "commit": "a33d8f0c81a742c69757157a71bec771939aca38", "file_path": "src/main/org/codehaus/groovy/vmplugin/v5/Java5.java", "func_code": "  private ClassNode configureWildcardType(WildcardType wildcardType) {\r\n    ClassNode base = ClassHelper.makeWithoutCaching(\"?\");\r\n    base.setRedirect(ClassHelper.OBJECT_TYPE);\r\n    // TODO: more than one lower bound for wildcards?\r\n    ClassNode[] lowers = configureTypes(wildcardType.getLowerBounds());\r\n    ClassNode lower = null;\r\n    // TODO: is it safe to remove this? What was the original intention?\r\n    if (lower != null) lower = lowers[0];\r\n\r\n    ClassNode[] upper = configureTypes(wildcardType.getUpperBounds());\r\n    GenericsType t = new GenericsType(base, upper, lower);\r\n    t.setWildcard(true);\r\n\r\n    ClassNode ref = ClassHelper.makeWithoutCaching(Object.class, false);\r\n    ref.setGenericsTypes(new GenericsType[] {t});\r\n\r\n    return ref;\r\n  }\r\n", "line_num": 7, "charoffset": 12, "length": 13, "error": "lower != null", "repair": "lowers != null", "task_id": 194, "predictions": [{"buggy": true, "line_num": 7, "prob": 0.9832921688486284}, {"buggy": false, "line_num": -1, "prob": 3.91724704735817e-07}, {"buggy": true, "line_num": 2, "prob": 2.63114784593607e-12}, {"buggy": true, "line_num": 10, "prob": 2.065586640193558e-15}, {"buggy": true, "line_num": 16, "prob": 1.0392525332341483e-15}, {"buggy": true, "line_num": 9, "prob": 3.798566333584538e-18}, {"buggy": true, "line_num": 14, "prob": 2.5372908058966545e-19}]}
{"project": "JetBrains.intellij-community", "commit": "2ba226b85cec4302b40febea3e60d7edeac51051", "file_path": "platform/testFramework/src/com/intellij/testFramework/fixtures/impl/CodeInsightTestFixtureImpl.java", "func_code": "  public void renameElement(\n      final PsiElement element,\n      final String newName,\n      final boolean searchInComments,\n      final boolean searchTextOccurrences) {\n    new WriteCommandAction.Simple(myProjectFixture.getProject()) {\n      @Override\n      protected void run() throws Exception {\n        final PsiElement substitution =\n            RenamePsiElementProcessor.forElement(element)\n                .substituteElementToRename(element, myEditor);\n        if (element == null) return;\n        new RenameProcessor(\n                myProjectFixture.getProject(),\n                substitution,\n                newName,\n                searchInComments,\n                searchTextOccurrences)\n            .run();\n      }\n    }.execute().throwException();\n  }\n", "line_num": 11, "charoffset": 12, "length": 15, "error": "element == null", "repair": "substitution == null", "task_id": 65, "predictions": [{"buggy": true, "line_num": 11, "prob": 0.9919861639020942}, {"buggy": false, "line_num": -1, "prob": 0.007404631012449453}, {"buggy": true, "line_num": 15, "prob": 1.7297168719935583e-05}, {"buggy": true, "line_num": 10, "prob": 8.905674663228355e-07}, {"buggy": true, "line_num": 9, "prob": 1.5020767516454733e-08}, {"buggy": true, "line_num": 5, "prob": 2.870967179441498e-12}, {"buggy": true, "line_num": 16, "prob": 2.681399008924275e-13}, {"buggy": true, "line_num": 17, "prob": 1.2522719162886416e-13}]}
{"project": "wildfly.wildfly", "commit": "d4a1a1cdac176e1f13c04cbbee22b690c8c7b5fe", "file_path": "host-controller/src/main/java/org/jboss/as/host/controller/ServerInventoryImpl.java", "func_code": "  public void reconnectServer(\n      final String serverName,\n      final ModelNode domainModel,\n      final byte[] authKey,\n      final boolean running,\n      final boolean stopping) {\n    if (shutdown || connectionFinished) {\n      throw HostControllerMessages.MESSAGES.hostAlreadyShutdown();\n    }\n    final ManagedServer existing = servers.get(serverName);\n    if (existing != null) {\n      ROOT_LOGGER.existingServerWithState(serverName, existing.getState());\n      return;\n    }\n    final ManagedServer server = createManagedServer(serverName, domainModel, authKey);\n    if (servers.putIfAbsent(serverName, server) != null) {\n      ROOT_LOGGER.existingServerWithState(serverName, server.getState());\n      return;\n    }\n    if (running) {\n      if (!stopping) {\n        server.reconnectServerProcess();\n        // Register the server proxy at the domain controller\n        domainController.registerRunningServer(server.getProxyController());\n      } else {\n        server.setServerProcessStopping();\n      }\n    } else {\n      server.removeServerProcess();\n    }\n    synchronized (shutdownCondition) {\n      shutdownCondition.notifyAll();\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 534, "predictions": [{"buggy": true, "line_num": 6, "prob": 0.4791697744090298}, {"buggy": false, "line_num": -1, "prob": 0.3728944589457037}, {"buggy": true, "line_num": 14, "prob": 7.952842663798106e-09}, {"buggy": true, "line_num": 21, "prob": 2.527000698000498e-10}, {"buggy": true, "line_num": 11, "prob": 2.0778929878512753e-10}, {"buggy": true, "line_num": 9, "prob": 6.421034304920805e-11}, {"buggy": true, "line_num": 16, "prob": 1.6724091397443005e-11}, {"buggy": true, "line_num": 28, "prob": 2.8596325234082883e-12}, {"buggy": true, "line_num": 23, "prob": 1.1664896560239331e-12}]}
{"project": "MovingBlocks.Terasology", "commit": "f1c1eb995aea0a4cf85d1b4ccf3bff5c4219e023", "file_path": "src/main/java/org/terasology/entitySystem/metadata/core/StringMapTypeHandler.java", "func_code": "  public Map<String, T> copy(Map<String, T> value) {\n    if (value != null) {\n      Map<String, T> result = Maps.newHashMap();\n      for (Map.Entry<String, T> entry : result.entrySet()) {\n        result.put(entry.getKey(), contentsHandler.copy(entry.getValue()));\n      }\n      return result;\n    }\n    return null;\n  }\n", "line_num": 3, "charoffset": 46, "length": 17, "error": "result.entrySet()", "repair": "value.entrySet()", "task_id": 105, "predictions": [{"buggy": true, "line_num": 3, "prob": 1.0}, {"buggy": false, "line_num": -1, "prob": 2.233312406736521e-15}, {"buggy": true, "line_num": 4, "prob": 2.1565965068361412e-16}]}
{"project": "SpringSource.spring-framework", "commit": "9ca6003533558b27f47af3c1d06f95a3978c5bf4", "file_path": "org.springframework.transaction/src/main/java/org/springframework/transaction/support/TransactionSynchronizationUtils.java", "func_code": "  static Object unwrapResourceIfNecessary(Object resource) {\n    Assert.notNull(resource, \"Resource must not be null\");\n    Object resourceRef = resource;\n    // unwrap infrastructure proxy\n    if (resourceRef instanceof InfrastructureProxy) {\n      resourceRef = ((InfrastructureProxy) resourceRef).getWrappedObject();\n    }\n    if (aopAvailable) {\n      // now unwrap scoped proxy\n      resourceRef = ScopedProxyUnwrapper.unwrapIfNecessary(resourceRef);\n    }\n    return resourceRef;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 123, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9996413000041039}, {"buggy": true, "line_num": 11, "prob": 4.0186141504890204e-07}, {"buggy": true, "line_num": 4, "prob": 8.135109842984177e-08}, {"buggy": true, "line_num": 9, "prob": 3.749371629338275e-08}, {"buggy": true, "line_num": 7, "prob": 5.7821148936469794e-09}, {"buggy": true, "line_num": 5, "prob": 2.0447409797446366e-11}, {"buggy": true, "line_num": 2, "prob": 2.980029833127243e-13}, {"buggy": true, "line_num": 1, "prob": 5.799507218973406e-14}]}
{"project": "mongodb.mongo-java-driver", "commit": "6664cb56436c603e706964a093d39c4374b634d6", "file_path": "driver-core/src/test/unit/com/mongodb/connection/ServerDiscoveryAndMonitoringMonitoringTest.java", "func_code": "  private void assertEqualClusterDescriptions(\n      final ClusterDescription expected, final ClusterDescription actual) {\n    assertEquals(expected.getType(), actual.getType());\n    assertEquals(expected.getAll().size(), actual.getAll().size());\n    for (ServerDescription curExpected : actual.getAll()) {\n      ServerDescription curActual = getByServerAddress(curExpected.getAddress(), actual.getAll());\n      assertNotNull(curActual);\n      assertEqualServerDescriptions(curExpected, curActual);\n    }\n  }\n", "line_num": 4, "charoffset": 44, "length": 15, "error": "actual.getAll()", "repair": "expected.getAll()", "task_id": 429, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9798709348357889}, {"buggy": true, "line_num": 5, "prob": 0.003432993681135128}, {"buggy": true, "line_num": 4, "prob": 3.1368352667114255e-09}, {"buggy": true, "line_num": 3, "prob": 3.292151452710375e-12}, {"buggy": true, "line_num": 7, "prob": 2.7863917097362967e-12}, {"buggy": true, "line_num": 1, "prob": 2.050046957899686e-12}, {"buggy": true, "line_num": 2, "prob": 1.0580590608535462e-12}, {"buggy": true, "line_num": 6, "prob": 2.798672791974876e-13}]}
{"project": "oracle.graal", "commit": "75f1d85125aeda2253fab45c65a38afb04c7b609", "file_path": "graal/org.graalvm.compiler.phases.common/src/org/graalvm/compiler/phases/common/NewConditionalEliminationPhase.java", "func_code": "  protected void processTypeSwitch(AbstractBeginNode beginNode, TypeSwitchNode typeSwitch) {\n    ValueNode hub = typeSwitch.value();\n    if (hub instanceof LoadHubNode) {\n      LoadHubNode loadHub = (LoadHubNode) hub;\n      ValueNode value = loadHub.getValue();\n      if (maybeMultipleUsages(value)) {\n        Stamp stamp = null;\n        for (int i = 0; i < typeSwitch.keyCount(); i++) {\n          if (typeSwitch.keySuccessor(i) == beginNode) {\n            if (stamp == null) {\n              stamp =\n                  StampFactory.objectNonNull(\n                      TypeReference.createExactTrusted(typeSwitch.typeAt(i)));\n            } else {\n              stamp =\n                  stamp.meet(\n                      StampFactory.objectNonNull(\n                          TypeReference.createExactTrusted(typeSwitch.typeAt(i))));\n            }\n          }\n        }\n        if (stamp != null) {\n          registerNewStamp(value, stamp, beginNode);\n        }\n      }\n    }\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 460, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9744780091844808}, {"buggy": true, "line_num": 15, "prob": 6.326368068856701e-08}, {"buggy": true, "line_num": 22, "prob": 2.5549383131111693e-08}, {"buggy": true, "line_num": 9, "prob": 2.3284173195736126e-10}, {"buggy": true, "line_num": 5, "prob": 1.0567229898235621e-10}, {"buggy": true, "line_num": 8, "prob": 7.950934647749473e-12}]}
{"project": "hazelcast.hazelcast", "commit": "25ab2615a8237104ff679c956ae237891b9b176c", "file_path": "hazelcast/src/main/java/com/hazelcast/util/scheduler/SecondsBasedEntryTaskScheduler.java", "func_code": "  public ScheduledEntry<K, V> cancelComparingTimeKey(K key) {\n    Set<TimeKey> candidateKeys = new HashSet<TimeKey>();\n    for (Object tkey : secondsOfKeys.keySet()) {\n      TimeKey timeKey = (TimeKey) tkey;\n      if (timeKey.getKey().equals(key)) {\n        candidateKeys.add(timeKey);\n      }\n    }\n\n    ScheduledEntry<K, V> result = null;\n    for (TimeKey timeKey : candidateKeys) {\n      final Integer second = secondsOfKeys.remove(timeKey);\n      if (second != null) {\n        final ConcurrentMap<Object, ScheduledEntry<K, V>> entries = scheduledEntries.get(second);\n        if (entries != null) {\n          result = entries.remove(timeKey);\n        }\n      }\n    }\n\n    return result;\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 359, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.9999948740091398}, {"buggy": true, "line_num": 13, "prob": 1.3949430223837707e-07}, {"buggy": true, "line_num": 20, "prob": 3.1111615909849275e-08}, {"buggy": true, "line_num": 15, "prob": 1.5199820109856316e-09}, {"buggy": true, "line_num": 14, "prob": 1.1368271942254648e-10}, {"buggy": true, "line_num": 5, "prob": 5.536227835848789e-11}, {"buggy": true, "line_num": 12, "prob": 1.9461872266283158e-12}]}
{"project": "liferay.liferay-portal", "commit": "28003fe23d4069b167e46b919a0fa5bf18e16b7b", "file_path": "modules/apps/forms-and-workflow/dynamic-data-lists/dynamic-data-lists-web/src/main/java/com/liferay/dynamic/data/lists/web/upgrade/v1_0_0/UpgradeDDLFormPortletId.java", "func_code": "  protected long getResourcePermissionCount(long companyId, String name, int scope, long roleId) {\n\n    DynamicQuery dynamicQuery = _resourcePermissionLocalService.dynamicQuery();\n\n    Property companyIdProperty = PropertyFactoryUtil.forName(\"companyId\");\n\n    dynamicQuery.add(companyIdProperty.eq(companyId));\n\n    Property nameProperty = PropertyFactoryUtil.forName(\"name\");\n\n    dynamicQuery.add(nameProperty.eq(name));\n\n    Property scopeProperty = PropertyFactoryUtil.forName(\"scope\");\n\n    dynamicQuery.add(scopeProperty.eq(scope));\n\n    Property roleIdProperty = PropertyFactoryUtil.forName(\"roleId\");\n\n    dynamicQuery.add(roleIdProperty.eq(roleId));\n\n    return _resourcePermissionLocalService.dynamicQueryCount(dynamicQuery);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 402, "predictions": [{"buggy": false, "line_num": -1, "prob": 0.7719959467611988}, {"buggy": true, "line_num": 16, "prob": 0.018798225074117148}, {"buggy": true, "line_num": 14, "prob": 6.818046237049931e-11}, {"buggy": true, "line_num": 2, "prob": 4.618565810535703e-12}]}
{"project": "JetBrains.intellij-community", "commit": "bf941cff321ffaf199e434471a1fd1c297bbed6b", "file_path": "java/java-impl/src/com/intellij/codeInspection/SimplifyStreamApiCallChainsInspection.java", "func_code": "  public PsiElement simplify(PsiMethodCallExpression call) {\n    Context context = Context.from(call);\n    if (context == null) return null;\n    String collectorText =\n        JAVA_UTIL_STREAM_COLLECTORS + \".joining(\" + context.myDelimiterExpression.getText() + \")\";\n    new CommentTracker().replaceAndRestoreComments(context.myCollectorsToListCall, collectorText);\n    CommentTracker ct = new CommentTracker();\n    ct.markUnchanged(call);\n    PsiElement result = ct.replaceAndRestoreComments(context.myStringJoinCall, call);\n    return JavaCodeStyleManager.getInstance(result.getProject()).shortenClassReferences(result);\n  }\n", "line_num": -2, "charoffset": -1, "length": -1, "error": "None", "repair": "None", "task_id": 28, "predictions": [{"buggy": true, "line_num": 9, "prob": 0.9986129999363024}, {"buggy": true, "line_num": 8, "prob": 3.532487087865884e-09}, {"buggy": true, "line_num": 7, "prob": 5.312333687042483e-10}, {"buggy": false, "line_num": -1, "prob": 2.405170565211578e-11}, {"buggy": true, "line_num": 1, "prob": 4.947571180907219e-21}, {"buggy": true, "line_num": 4, "prob": 4.6773024945757526e-21}]}
